{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"C:\\Users\\admin\\Documents\\meteor\\testHRMS-master\\imports\\shiftMgmt\\shiftRoster\\shiftAllotment\\api\\shiftAllocation.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.windows.x86_64"},"sourceFileName":"imports/shiftMgmt/shiftRoster/shiftAllotment/api/shiftAllocation.js","filename":"C:\\Users\\admin\\Documents\\meteor\\testHRMS-master\\imports\\shiftMgmt\\shiftRoster\\shiftAllotment\\api\\shiftAllocation.js","passPerPreset":false,"envName":"development","cwd":"C:\\Users\\admin\\Documents\\meteor\\testHRMS-master","root":"C:\\Users\\admin\\Documents\\meteor\\testHRMS-master","plugins":[{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"C:\\Users\\admin\\Documents\\meteor\\testHRMS-master\\imports\\shiftMgmt\\shiftRoster\\shiftAllotment\\api\\shiftAllocation.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/shiftMgmt/shiftRoster/shiftAllotment/api/shiftAllocation.js"}},"code":"module.export({\n  ShiftAllocation: () => ShiftAllocation\n});\nlet Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 0);\nconst ShiftAllocation = new Mongo.Collection('shiftAllocation');\n\nif (Meteor.isServer) {\n  Meteor.publish(\"allShiftsData\", function () {\n    var allShifts = ShiftAllocation.find({});\n    console.log(\"allShifts\", allShifts);\n    return allShifts;\n  });\n}\n\nMeteor.methods({// \t\"insertBasicInfo\" : function(formValues){\n  // \t\tconsole.log(formValues);\n  // \t\tvar emp_id = ShiftAllocation.insert({\n  // \t\t\t\t\t\t\t\t\t\"shiftName\" \t\t: formValues.shiftName,\t        \n  // \t\t\t\t\t\t\t        \"startTime\" \t\t: formValues.startTime,\t        \n  // \t\t\t\t\t\t\t        \"startTimeAmPm\" \t: formValues.startTimeAmPm,\t        \n  // \t\t\t\t\t\t\t        \"endTime\" \t\t\t: formValues.endTime,\t        \n  // \t\t\t\t\t\t\t        \"endTimeAmPm\" \t\t: formValues.endTimeAmPm,\t        \n  // \t\t\t\t\t\t\t        \"effectiveFrom\" \t: formValues.effectiveFrom,\t   \n  // \t\t\t\t\t\t\t        \"tillDate\" \t\t\t: formValues.tillDate,\t\t\t\t\t\n  // \t\t\t\t\t\t\t\t}, \n  // \t\t\t\t\t\t\t\t(error,result)=>{\n  // \t\t\t\t\t\t\t\t\tif(error){\n  // \t\t\t\t\t\t\t\t\t\tconsole.log(error);\n  // \t\t\t\t\t\t\t\t\t\treturn;\n  // \t\t\t\t\t\t\t\t\t}else{\n  // \t\t\t\t\t\t\t\t\t\tconsole.log(result);\n  // \t\t\t\t\t\t\t\t\t\treturn;\n  // \t\t\t\t\t\t\t\t\t}\n  // \t\t\t\t\t\t\t\t}\n  // \t\t\t\t\t\t\t);\n  // \t\treturn emp_id;\n  // \t},\t\n  // \t\"updateBasicInfo\" : function(formValues){\n  // \t\tconsole.log(formValues);\n  // \t\tvar emp_id = ShiftAllocation.update(\n  // \t\t\t\t\t\t\t\t{\"_id\": formValues._id},\n  // \t\t\t\t\t\t\t\t{$set : {\n  // \t\t\t\t\t\t\t\t\t\t\t\t\t\"shiftName\" \t\t: formValues.shiftName,\t        \n  // \t\t\t\t\t\t\t\t\t\t\t        \"startTime\" \t\t: formValues.startTime,\t        \n  // \t\t\t\t\t\t\t\t\t\t\t        \"startTimeAmPm\" \t: formValues.startTimeAmPm,\t        \n  // \t\t\t\t\t\t\t\t\t\t\t        \"endTime\" \t\t\t: formValues.endTime,\t        \n  // \t\t\t\t\t\t\t\t\t\t\t        \"endTimeAmPm\" \t\t: formValues.endTimeAmPm,\t        \n  // \t\t\t\t\t\t\t\t\t\t\t        \"effectiveFrom\" \t: formValues.effectiveFrom,\t   \n  // \t\t\t\t\t\t\t\t\t\t\t        \"tillDate\" \t\t\t: formValues.tillDate,\t\t\t\t\t\n  // \t\t\t\t\t\t\t\t\t\t\t\t}\n  // \t\t\t\t\t\t\t\t},\n  // \t\t\t\t\t\t\t\t(error,result)=>{\n  // \t\t\t\t\t\t\t\t\tif(error){\n  // \t\t\t\t\t\t\t\t\t\tconsole.log(error);\n  // \t\t\t\t\t\t\t\t\t\treturn;\n  // \t\t\t\t\t\t\t\t\t}else{\n  // \t\t\t\t\t\t\t\t\t\tconsole.log(result);\n  // \t\t\t\t\t\t\t\t\t\treturn;\n  // \t\t\t\t\t\t\t\t\t}\n  // \t\t\t\t\t\t\t\t}\n  // \t\t\t\t\t\t\t);\n  // \t\treturn emp_id;\n  // \t},\n  // \"deleteAllotedShift\" : function(empid){\n  // \tShiftAllocation.remove({\"_id\":empid}, (error,result)=>{\n  // \t\t\tif(error){\n  // \t\t\t\treturn error;\n  // \t\t\t\tconsole.log(error);\n  // \t\t\t}else{\n  // \t\t\t\treturn result;\n  // \t\t\t}\n  // \t});\n  // \treturn;\n  // }\n});","map":{"version":3,"sources":["imports/shiftMgmt/shiftRoster/shiftAllotment/api/shiftAllocation.js"],"names":["module","export","ShiftAllocation","Mongo","link","v","Collection","Meteor","isServer","publish","allShifts","find","console","log","methods"],"mappings":"AAAAA,MAAM,CAACC,MAAP,CAAc;AAACC,EAAAA,eAAe,EAAC,MAAIA;AAArB,CAAd;AAAqD,IAAIC,KAAJ;AAAUH,MAAM,CAACI,IAAP,CAAY,cAAZ,EAA2B;AAACD,EAAAA,KAAK,CAACE,CAAD,EAAG;AAACF,IAAAA,KAAK,GAACE,CAAN;AAAQ;;AAAlB,CAA3B,EAA+C,CAA/C;AAGxD,MAAMH,eAAe,GAAG,IAAIC,KAAK,CAACG,UAAV,CAAqB,iBAArB,CAAxB;;AAEP,IAAGC,MAAM,CAACC,QAAV,EAAmB;AAElBD,EAAAA,MAAM,CAACE,OAAP,CAAe,eAAf,EAA+B,YAAU;AACxC,QAAIC,SAAS,GAAGR,eAAe,CAACS,IAAhB,CAAqB,EAArB,CAAhB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAwBH,SAAxB;AACA,WAAOA,SAAP;AACA,GAJD;AAKA;;AAEDH,MAAM,CAACO,OAAP,CAAe,CACf;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AApEc,CAAf","sourcesContent":["import { Mongo } from 'meteor/mongo';\n\n\nexport const ShiftAllocation = new Mongo.Collection('shiftAllocation');\n\nif(Meteor.isServer){\n\n\tMeteor.publish(\"allShiftsData\",function(){\n\t\tvar allShifts = ShiftAllocation.find({});\n\t\tconsole.log(\"allShifts\",allShifts);\n\t\treturn allShifts;\n\t});\n}\n\nMeteor.methods({\n// \t\"insertBasicInfo\" : function(formValues){\n// \t\tconsole.log(formValues);\n\n// \t\tvar emp_id = ShiftAllocation.insert({\n\t\t\t\t\t\t\t\t\t\t\n// \t\t\t\t\t\t\t\t\t\"shiftName\" \t\t: formValues.shiftName,\t        \n// \t\t\t\t\t\t\t        \"startTime\" \t\t: formValues.startTime,\t        \n// \t\t\t\t\t\t\t        \"startTimeAmPm\" \t: formValues.startTimeAmPm,\t        \n// \t\t\t\t\t\t\t        \"endTime\" \t\t\t: formValues.endTime,\t        \n// \t\t\t\t\t\t\t        \"endTimeAmPm\" \t\t: formValues.endTimeAmPm,\t        \n// \t\t\t\t\t\t\t        \"effectiveFrom\" \t: formValues.effectiveFrom,\t   \n// \t\t\t\t\t\t\t        \"tillDate\" \t\t\t: formValues.tillDate,\t\t\t\t\t\n// \t\t\t\t\t\t\t\t}, \n// \t\t\t\t\t\t\t\t(error,result)=>{\n// \t\t\t\t\t\t\t\t\tif(error){\n// \t\t\t\t\t\t\t\t\t\tconsole.log(error);\n// \t\t\t\t\t\t\t\t\t\treturn;\n// \t\t\t\t\t\t\t\t\t}else{\n// \t\t\t\t\t\t\t\t\t\tconsole.log(result);\n// \t\t\t\t\t\t\t\t\t\treturn;\n// \t\t\t\t\t\t\t\t\t}\n// \t\t\t\t\t\t\t\t}\n// \t\t\t\t\t\t\t);\n\n// \t\treturn emp_id;\n// \t},\t\n\n// \t\"updateBasicInfo\" : function(formValues){\n// \t\tconsole.log(formValues);\n\n// \t\tvar emp_id = ShiftAllocation.update(\n// \t\t\t\t\t\t\t\t{\"_id\": formValues._id},\n// \t\t\t\t\t\t\t\t{$set : {\n// \t\t\t\t\t\t\t\t\t\t\t\t\t\"shiftName\" \t\t: formValues.shiftName,\t        \n// \t\t\t\t\t\t\t\t\t\t\t        \"startTime\" \t\t: formValues.startTime,\t        \n// \t\t\t\t\t\t\t\t\t\t\t        \"startTimeAmPm\" \t: formValues.startTimeAmPm,\t        \n// \t\t\t\t\t\t\t\t\t\t\t        \"endTime\" \t\t\t: formValues.endTime,\t        \n// \t\t\t\t\t\t\t\t\t\t\t        \"endTimeAmPm\" \t\t: formValues.endTimeAmPm,\t        \n// \t\t\t\t\t\t\t\t\t\t\t        \"effectiveFrom\" \t: formValues.effectiveFrom,\t   \n// \t\t\t\t\t\t\t\t\t\t\t        \"tillDate\" \t\t\t: formValues.tillDate,\t\t\t\t\t\n// \t\t\t\t\t\t\t\t\t\t\t\t}\n// \t\t\t\t\t\t\t\t},\n// \t\t\t\t\t\t\t\t(error,result)=>{\n// \t\t\t\t\t\t\t\t\tif(error){\n// \t\t\t\t\t\t\t\t\t\tconsole.log(error);\n// \t\t\t\t\t\t\t\t\t\treturn;\n// \t\t\t\t\t\t\t\t\t}else{\n// \t\t\t\t\t\t\t\t\t\tconsole.log(result);\n// \t\t\t\t\t\t\t\t\t\treturn;\n// \t\t\t\t\t\t\t\t\t}\n// \t\t\t\t\t\t\t\t}\n// \t\t\t\t\t\t\t);\n\n// \t\treturn emp_id;\n// \t},\n\n\t// \"deleteAllotedShift\" : function(empid){\n\t// \tShiftAllocation.remove({\"_id\":empid}, (error,result)=>{\n\t// \t\t\tif(error){\n\t// \t\t\t\treturn error;\n\t// \t\t\t\tconsole.log(error);\n\t// \t\t\t}else{\n\t// \t\t\t\treturn result;\n\t// \t\t\t}\n\t// \t});\n\n\t// \treturn;\n\t// }\n\n});"]},"sourceType":"script","hash":"a4e9f9aa9d7a0ab2b03d3601231d6e63b612d2eb"}
