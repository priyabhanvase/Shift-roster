[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nECMAScript = Package.ecmascript.ECMAScript;\nReactMeteorData = Package['react-meteor-data'].ReactMeteorData;\nRoles = Package['alanning:roles'].Roles;\nFlowRouter = Package['kadira:flow-router'].FlowRouter;\nmoment = Package['momentjs:moment'].moment;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nWebAppInternals = Package.webapp.WebAppInternals;\nmain = Package.webapp.main;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nmeteorInstall = Package.modules.meteorInstall;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nAccounts = Package['accounts-base'].Accounts;\nAutoupdate = Package.autoupdate.Autoupdate;\n\n","servePath":"/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"imports\":{\"shiftMgmt\":{\"shiftRoster\":{\"shiftAllotment\":{\"api\":{\"empMaster.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////\n//                                                                                   //\n// imports/shiftMgmt/shiftRoster/shiftAllotment/api/empMaster.js                     //\n//                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////\n                                                                                     //\nmodule.export({\n  EmpMaster: () => EmpMaster\n});\nlet Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 0);\nconst EmpMaster = new Mongo.Collection('empMaster');\n\nif (Meteor.isServer) {\n  Meteor.publish(\"empData\", function (empid) {\n    var empprof = EmpMaster.find({\n      \"_id\": empid\n    });\n    return empprof;\n  });\n  Meteor.publish(\"allEmpData\", function () {\n    var allEmp = EmpMaster.find({});\n    return allEmp;\n  });\n}\n\nMeteor.methods({\n  \"insertBasicInfo\": function (formValues) {\n    console.log(formValues);\n    var emp_id = EmpMaster.insert({\n      \"shiftName\": formValues.shiftName,\n      \"startTime\": formValues.startTime,\n      \"startTimeAmPm\": formValues.startTimeAmPm,\n      \"endTime\": formValues.endTime,\n      \"endTimeAmPm\": formValues.endTimeAmPm,\n      \"effectiveFrom\": formValues.effectiveFrom,\n      \"tillDate\": formValues.tillDate\n    }, (error, result) => {\n      if (error) {\n        console.log(error);\n        return;\n      } else {\n        console.log(result);\n        return;\n      }\n    });\n    return emp_id;\n  },\n  \"updateBasicInfo\": function (formValues) {\n    console.log(formValues);\n    var emp_id = EmpMaster.update({\n      \"_id\": formValues._id\n    }, {\n      $set: {\n        \"shiftName\": formValues.shiftName,\n        \"startTime\": formValues.startTime,\n        \"startTimeAmPm\": formValues.startTimeAmPm,\n        \"endTime\": formValues.endTime,\n        \"endTimeAmPm\": formValues.endTimeAmPm,\n        \"effectiveFrom\": formValues.effectiveFrom,\n        \"tillDate\": formValues.tillDate\n      }\n    }, (error, result) => {\n      if (error) {\n        console.log(error);\n        return;\n      } else {\n        console.log(result);\n        return;\n      }\n    });\n    return emp_id;\n  },\n  \"deleteAllotedShift\": function (empid) {\n    EmpMaster.remove({\n      \"_id\": empid\n    }, (error, result) => {\n      if (error) {\n        return error;\n        console.log(error);\n      } else {\n        return result;\n      }\n    });\n    return;\n  }\n});\n///////////////////////////////////////////////////////////////////////////////////////\n\n},\"shiftAllocation.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////\n//                                                                                   //\n// imports/shiftMgmt/shiftRoster/shiftAllotment/api/shiftAllocation.js               //\n//                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////\n                                                                                     //\nmodule.export({\n  ShiftAllocation: () => ShiftAllocation\n});\nlet Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 0);\nconst ShiftAllocation = new Mongo.Collection('shiftAllocation');\n///////////////////////////////////////////////////////////////////////////////////////\n\n}}}}}},\"server\":{\"main.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////\n//                                                                                   //\n// server/main.js                                                                    //\n//                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////\n                                                                                     //\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nmodule.link(\"/imports/shiftMgmt/shiftRoster/shiftAllotment/api/empMaster.js\");\nmodule.link(\"/imports/shiftMgmt/shiftRoster/shiftAllotment/api/shiftAllocation.js\");\n\n/*import Links from '/imports/api/links';\n\nfunction insertLink(title, url) {\n  Links.insert({ title, url, createdAt: new Date() });\n}*/\nMeteor.startup(() => {// If the Links collection is empty, add some data.\n\n  /*  if (Links.find().count() === 0) {\n      insertLink(\n        'Do the Tutorial',\n        'https://www.meteor.com/tutorials/react/creating-an-app'\n      );\n  \n      insertLink(\n        'Follow the Guide',\n        'http://guide.meteor.com'\n      );\n  \n      insertLink(\n        'Read the Docs',\n        'https://docs.meteor.com'\n      );\n  \n      insertLink(\n        'Discussions',\n        'https://forums.meteor.com'\n      );\n    }*/\n});\n///////////////////////////////////////////////////////////////////////////////////////\n\n}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\",\n    \".jsx\"\n  ]\n});\n\nvar exports = require(\"/server/main.js\");","hash":"363b969f712b0f65524ddc6ca6ea5ca6ed7b6872","servePath":"/app.js","sourceMap":{"version":3,"sources":["imports/shiftMgmt/shiftRoster/shiftAllotment/api/empMaster.js","imports/shiftMgmt/shiftRoster/shiftAllotment/api/shiftAllocation.js","server/main.js"],"names":["module","export","EmpMaster","Mongo","link","v","Collection","Meteor","isServer","publish","empid","empprof","find","allEmp","methods","formValues","console","log","emp_id","insert","shiftName","startTime","startTimeAmPm","endTime","endTimeAmPm","effectiveFrom","tillDate","error","result","update","_id","$set","remove","ShiftAllocation","startup"],"mappings":";;;;;;;;AAAAA,MAAM,CAACC,MAAP,CAAc;AAACC,WAAS,EAAC,MAAIA;AAAf,CAAd;AAAyC,IAAIC,KAAJ;AAAUH,MAAM,CAACI,IAAP,CAAY,cAAZ,EAA2B;AAACD,OAAK,CAACE,CAAD,EAAG;AAACF,SAAK,GAACE,CAAN;AAAQ;;AAAlB,CAA3B,EAA+C,CAA/C;AAE5C,MAAMH,SAAS,GAAG,IAAIC,KAAK,CAACG,UAAV,CAAqB,WAArB,CAAlB;;AAEP,IAAGC,MAAM,CAACC,QAAV,EAAmB;AAClBD,QAAM,CAACE,OAAP,CAAe,SAAf,EAAyB,UAASC,KAAT,EAAe;AACvC,QAAIC,OAAO,GAAGT,SAAS,CAACU,IAAV,CAAe;AAAC,aAAMF;AAAP,KAAf,CAAd;AACA,WAAOC,OAAP;AACA,GAHD;AAKAJ,QAAM,CAACE,OAAP,CAAe,YAAf,EAA4B,YAAU;AACrC,QAAII,MAAM,GAAGX,SAAS,CAACU,IAAV,CAAe,EAAf,CAAb;AACA,WAAOC,MAAP;AACA,GAHD;AAIA;;AAEDN,MAAM,CAACO,OAAP,CAAe;AACd,qBAAoB,UAASC,UAAT,EAAoB;AACvCC,WAAO,CAACC,GAAR,CAAYF,UAAZ;AAEA,QAAIG,MAAM,GAAGhB,SAAS,CAACiB,MAAV,CAAiB;AAEvB,mBAAgBJ,UAAU,CAACK,SAFJ;AAGjB,mBAAgBL,UAAU,CAACM,SAHV;AAIjB,uBAAmBN,UAAU,CAACO,aAJb;AAKjB,iBAAeP,UAAU,CAACQ,OALT;AAMjB,qBAAkBR,UAAU,CAACS,WANZ;AAOjB,uBAAmBT,UAAU,CAACU,aAPb;AAQjB,kBAAgBV,UAAU,CAACW;AARV,KAAjB,EAUP,CAACC,KAAD,EAAOC,MAAP,KAAgB;AACf,UAAGD,KAAH,EAAS;AACRX,eAAO,CAACC,GAAR,CAAYU,KAAZ;AACA;AACA,OAHD,MAGK;AACJX,eAAO,CAACC,GAAR,CAAYW,MAAZ;AACA;AACA;AACD,KAlBM,CAAb;AAqBA,WAAOV,MAAP;AACA,GA1Ba;AA4Bd,qBAAoB,UAASH,UAAT,EAAoB;AACvCC,WAAO,CAACC,GAAR,CAAYF,UAAZ;AAEA,QAAIG,MAAM,GAAGhB,SAAS,CAAC2B,MAAV,CACP;AAAC,aAAOd,UAAU,CAACe;AAAnB,KADO,EAEP;AAACC,UAAI,EAAG;AACH,qBAAgBhB,UAAU,CAACK,SADxB;AAEG,qBAAgBL,UAAU,CAACM,SAF9B;AAGG,yBAAmBN,UAAU,CAACO,aAHjC;AAIG,mBAAeP,UAAU,CAACQ,OAJ7B;AAKG,uBAAkBR,UAAU,CAACS,WALhC;AAMG,yBAAmBT,UAAU,CAACU,aANjC;AAOG,oBAAgBV,UAAU,CAACW;AAP9B;AAAR,KAFO,EAYP,CAACC,KAAD,EAAOC,MAAP,KAAgB;AACf,UAAGD,KAAH,EAAS;AACRX,eAAO,CAACC,GAAR,CAAYU,KAAZ;AACA;AACA,OAHD,MAGK;AACJX,eAAO,CAACC,GAAR,CAAYW,MAAZ;AACA;AACA;AACD,KApBM,CAAb;AAuBA,WAAOV,MAAP;AACA,GAvDa;AAyDd,wBAAuB,UAASR,KAAT,EAAe;AACrCR,aAAS,CAAC8B,MAAV,CAAiB;AAAC,aAAMtB;AAAP,KAAjB,EAAgC,CAACiB,KAAD,EAAOC,MAAP,KAAgB;AAC9C,UAAGD,KAAH,EAAS;AACR,eAAOA,KAAP;AACAX,eAAO,CAACC,GAAR,CAAYU,KAAZ;AACA,OAHD,MAGK;AACJ,eAAOC,MAAP;AACA;AACF,KAPD;AASA;AACA;AApEa,CAAf,E;;;;;;;;;;;AChBA5B,MAAM,CAACC,MAAP,CAAc;AAACgC,iBAAe,EAAC,MAAIA;AAArB,CAAd;AAAqD,IAAI9B,KAAJ;AAAUH,MAAM,CAACI,IAAP,CAAY,cAAZ,EAA2B;AAACD,OAAK,CAACE,CAAD,EAAG;AAACF,SAAK,GAACE,CAAN;AAAQ;;AAAlB,CAA3B,EAA+C,CAA/C;AAGxD,MAAM4B,eAAe,GAAG,IAAI9B,KAAK,CAACG,UAAV,CAAqB,iBAArB,CAAxB,C;;;;;;;;;;;ACHP,IAAIC,MAAJ;AAAWP,MAAM,CAACI,IAAP,CAAY,eAAZ,EAA4B;AAACG,QAAM,CAACF,CAAD,EAAG;AAACE,UAAM,GAACF,CAAP;AAAS;;AAApB,CAA5B,EAAkD,CAAlD;AAAqDL,MAAM,CAACI,IAAP,CAAY,gEAAZ;AAA8EJ,MAAM,CAACI,IAAP,CAAY,sEAAZ;;AAG9I;;;;;AAMAG,MAAM,CAAC2B,OAAP,CAAe,MAAM,CACnB;;AACF;;;;;;;;;;;;;;;;;;;;;AAqBC,CAvBD,E","file":"/app.js","sourcesContent":["import { Mongo } from 'meteor/mongo';\n\nexport const EmpMaster = new Mongo.Collection('empMaster');\n\nif(Meteor.isServer){\n\tMeteor.publish(\"empData\",function(empid){\n\t\tvar empprof = EmpMaster.find({\"_id\":empid});\n\t\treturn empprof;\n\t});\n\n\tMeteor.publish(\"allEmpData\",function(){\n\t\tvar allEmp = EmpMaster.find({});\n\t\treturn allEmp;\n\t});\n}\n\nMeteor.methods({\n\t\"insertBasicInfo\" : function(formValues){\n\t\tconsole.log(formValues);\n\n\t\tvar emp_id = EmpMaster.insert({\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\"shiftName\" \t\t: formValues.shiftName,\t        \n\t\t\t\t\t\t\t        \"startTime\" \t\t: formValues.startTime,\t        \n\t\t\t\t\t\t\t        \"startTimeAmPm\" \t: formValues.startTimeAmPm,\t        \n\t\t\t\t\t\t\t        \"endTime\" \t\t\t: formValues.endTime,\t        \n\t\t\t\t\t\t\t        \"endTimeAmPm\" \t\t: formValues.endTimeAmPm,\t        \n\t\t\t\t\t\t\t        \"effectiveFrom\" \t: formValues.effectiveFrom,\t   \n\t\t\t\t\t\t\t        \"tillDate\" \t\t\t: formValues.tillDate,\t\t\t\t\t\n\t\t\t\t\t\t\t\t}, \n\t\t\t\t\t\t\t\t(error,result)=>{\n\t\t\t\t\t\t\t\t\tif(error){\n\t\t\t\t\t\t\t\t\t\tconsole.log(error);\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t\t\tconsole.log(result);\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t);\n\n\t\treturn emp_id;\n\t},\t\n\n\t\"updateBasicInfo\" : function(formValues){\n\t\tconsole.log(formValues);\n\n\t\tvar emp_id = EmpMaster.update(\n\t\t\t\t\t\t\t\t{\"_id\": formValues._id},\n\t\t\t\t\t\t\t\t{$set : {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"shiftName\" \t\t: formValues.shiftName,\t        \n\t\t\t\t\t\t\t\t\t\t\t        \"startTime\" \t\t: formValues.startTime,\t        \n\t\t\t\t\t\t\t\t\t\t\t        \"startTimeAmPm\" \t: formValues.startTimeAmPm,\t        \n\t\t\t\t\t\t\t\t\t\t\t        \"endTime\" \t\t\t: formValues.endTime,\t        \n\t\t\t\t\t\t\t\t\t\t\t        \"endTimeAmPm\" \t\t: formValues.endTimeAmPm,\t        \n\t\t\t\t\t\t\t\t\t\t\t        \"effectiveFrom\" \t: formValues.effectiveFrom,\t   \n\t\t\t\t\t\t\t\t\t\t\t        \"tillDate\" \t\t\t: formValues.tillDate,\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t(error,result)=>{\n\t\t\t\t\t\t\t\t\tif(error){\n\t\t\t\t\t\t\t\t\t\tconsole.log(error);\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t\t\tconsole.log(result);\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t);\n\n\t\treturn emp_id;\n\t},\n\n\t\"deleteAllotedShift\" : function(empid){\n\t\tEmpMaster.remove({\"_id\":empid}, (error,result)=>{\n\t\t\t\tif(error){\n\t\t\t\t\treturn error;\n\t\t\t\t\tconsole.log(error);\n\t\t\t\t}else{\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t});\n\n\t\treturn;\n\t}\n\n});","import { Mongo } from 'meteor/mongo';\n\n\nexport const ShiftAllocation = new Mongo.Collection('shiftAllocation');\n","import { Meteor } from 'meteor/meteor';\nimport \"/imports/shiftMgmt/shiftRoster/shiftAllotment/api/empMaster.js\";\nimport \"/imports/shiftMgmt/shiftRoster/shiftAllotment/api/shiftAllocation.js\";\n/*import Links from '/imports/api/links';\n\nfunction insertLink(title, url) {\n  Links.insert({ title, url, createdAt: new Date() });\n}*/\n\nMeteor.startup(() => {\n  // If the Links collection is empty, add some data.\n/*  if (Links.find().count() === 0) {\n    insertLink(\n      'Do the Tutorial',\n      'https://www.meteor.com/tutorials/react/creating-an-app'\n    );\n\n    insertLink(\n      'Follow the Guide',\n      'http://guide.meteor.com'\n    );\n\n    insertLink(\n      'Read the Docs',\n      'https://docs.meteor.com'\n    );\n\n    insertLink(\n      'Discussions',\n      'https://forums.meteor.com'\n    );\n  }*/\n});\n"]}}]