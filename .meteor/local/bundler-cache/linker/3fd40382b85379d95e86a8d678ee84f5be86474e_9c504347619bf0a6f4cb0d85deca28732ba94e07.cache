[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\n\n/* Package-scope variables */\nvar $, jQuery;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////\n//                                                                   //\n// packages/jquery/packages/jquery.js                                //\n//                                                                   //\n///////////////////////////////////////////////////////////////////////\n                                                                     //\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/jquery/jquery.js                                                                                         //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n/*!                                                                                                                  // 1\n * jQuery JavaScript Library v1.11.0                                                                                 // 2\n * http://jquery.com/                                                                                                // 3\n *                                                                                                                   // 4\n * Includes Sizzle.js                                                                                                // 5\n * http://sizzlejs.com/                                                                                              // 6\n *                                                                                                                   // 7\n * Copyright 2005, 2014 jQuery Foundation, Inc. and other contributors                                               // 8\n * Released under the MIT license                                                                                    // 9\n * http://jquery.org/license                                                                                         // 10\n *                                                                                                                   // 11\n * Date: 2014-01-23T21:02Z                                                                                           // 12\n */                                                                                                                  // 13\n                                                                                                                     // 14\n(function( global, factory ) {                                                                                       // 15\n                                                                                                                     // 16\n\tif ( typeof module === \"object\" && typeof module.exports === \"object\" ) {                                           // 17\n\t\t// For CommonJS and CommonJS-like environments where a proper window is present,                                   // 18\n\t\t// execute the factory and get jQuery                                                                              // 19\n\t\t// For environments that do not inherently posses a window with a document                                         // 20\n\t\t// (such as Node.js), expose a jQuery-making factory as module.exports                                             // 21\n\t\t// This accentuates the need for the creation of a real window                                                     // 22\n\t\t// e.g. var jQuery = require(\"jquery\")(window);                                                                    // 23\n\t\t// See ticket #14549 for more info                                                                                 // 24\n\t\tmodule.exports = global.document ?                                                                                 // 25\n\t\t\tfactory( global, true ) :                                                                                         // 26\n\t\t\tfunction( w ) {                                                                                                   // 27\n\t\t\t\tif ( !w.document ) {                                                                                             // 28\n\t\t\t\t\tthrow new Error( \"jQuery requires a window with a document\" );                                                  // 29\n\t\t\t\t}                                                                                                                // 30\n\t\t\t\treturn factory( w );                                                                                             // 31\n\t\t\t};                                                                                                                // 32\n\t} else {                                                                                                            // 33\n\t\tfactory( global );                                                                                                 // 34\n\t}                                                                                                                   // 35\n                                                                                                                     // 36\n// Pass this if window is not defined yet                                                                            // 37\n}(typeof window !== \"undefined\" ? window : this, function( window, noGlobal ) {                                      // 38\n                                                                                                                     // 39\n// Can't do this because several apps including ASP.NET trace                                                        // 40\n// the stack via arguments.caller.callee and Firefox dies if                                                         // 41\n// you try to trace through \"use strict\" call chains. (#13335)                                                       // 42\n// Support: Firefox 18+                                                                                              // 43\n//                                                                                                                   // 44\n                                                                                                                     // 45\nvar deletedIds = [];                                                                                                 // 46\n                                                                                                                     // 47\nvar slice = deletedIds.slice;                                                                                        // 48\n                                                                                                                     // 49\nvar concat = deletedIds.concat;                                                                                      // 50\n                                                                                                                     // 51\nvar push = deletedIds.push;                                                                                          // 52\n                                                                                                                     // 53\nvar indexOf = deletedIds.indexOf;                                                                                    // 54\n                                                                                                                     // 55\nvar class2type = {};                                                                                                 // 56\n                                                                                                                     // 57\nvar toString = class2type.toString;                                                                                  // 58\n                                                                                                                     // 59\nvar hasOwn = class2type.hasOwnProperty;                                                                              // 60\n                                                                                                                     // 61\nvar trim = \"\".trim;                                                                                                  // 62\n                                                                                                                     // 63\nvar support = {};                                                                                                    // 64\n                                                                                                                     // 65\n                                                                                                                     // 66\n                                                                                                                     // 67\nvar                                                                                                                  // 68\n\tversion = \"1.11.0\",                                                                                                 // 69\n                                                                                                                     // 70\n\t// Define a local copy of jQuery                                                                                    // 71\n\tjQuery = function( selector, context ) {                                                                            // 72\n\t\t// The jQuery object is actually just the init constructor 'enhanced'                                              // 73\n\t\t// Need init if jQuery is called (just allow error to be thrown if not included)                                   // 74\n\t\treturn new jQuery.fn.init( selector, context );                                                                    // 75\n\t},                                                                                                                  // 76\n                                                                                                                     // 77\n\t// Make sure we trim BOM and NBSP (here's looking at you, Safari 5.0 and IE)                                        // 78\n\trtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,                                                                       // 79\n                                                                                                                     // 80\n\t// Matches dashed string for camelizing                                                                             // 81\n\trmsPrefix = /^-ms-/,                                                                                                // 82\n\trdashAlpha = /-([\\da-z])/gi,                                                                                        // 83\n                                                                                                                     // 84\n\t// Used by jQuery.camelCase as callback to replace()                                                                // 85\n\tfcamelCase = function( all, letter ) {                                                                              // 86\n\t\treturn letter.toUpperCase();                                                                                       // 87\n\t};                                                                                                                  // 88\n                                                                                                                     // 89\njQuery.fn = jQuery.prototype = {                                                                                     // 90\n\t// The current version of jQuery being used                                                                         // 91\n\tjquery: version,                                                                                                    // 92\n                                                                                                                     // 93\n\tconstructor: jQuery,                                                                                                // 94\n                                                                                                                     // 95\n\t// Start with an empty selector                                                                                     // 96\n\tselector: \"\",                                                                                                       // 97\n                                                                                                                     // 98\n\t// The default length of a jQuery object is 0                                                                       // 99\n\tlength: 0,                                                                                                          // 100\n                                                                                                                     // 101\n\ttoArray: function() {                                                                                               // 102\n\t\treturn slice.call( this );                                                                                         // 103\n\t},                                                                                                                  // 104\n                                                                                                                     // 105\n\t// Get the Nth element in the matched element set OR                                                                // 106\n\t// Get the whole matched element set as a clean array                                                               // 107\n\tget: function( num ) {                                                                                              // 108\n\t\treturn num != null ?                                                                                               // 109\n                                                                                                                     // 110\n\t\t\t// Return a 'clean' array                                                                                         // 111\n\t\t\t( num < 0 ? this[ num + this.length ] : this[ num ] ) :                                                           // 112\n                                                                                                                     // 113\n\t\t\t// Return just the object                                                                                         // 114\n\t\t\tslice.call( this );                                                                                               // 115\n\t},                                                                                                                  // 116\n                                                                                                                     // 117\n\t// Take an array of elements and push it onto the stack                                                             // 118\n\t// (returning the new matched element set)                                                                          // 119\n\tpushStack: function( elems ) {                                                                                      // 120\n                                                                                                                     // 121\n\t\t// Build a new jQuery matched element set                                                                          // 122\n\t\tvar ret = jQuery.merge( this.constructor(), elems );                                                               // 123\n                                                                                                                     // 124\n\t\t// Add the old object onto the stack (as a reference)                                                              // 125\n\t\tret.prevObject = this;                                                                                             // 126\n\t\tret.context = this.context;                                                                                        // 127\n                                                                                                                     // 128\n\t\t// Return the newly-formed element set                                                                             // 129\n\t\treturn ret;                                                                                                        // 130\n\t},                                                                                                                  // 131\n                                                                                                                     // 132\n\t// Execute a callback for every element in the matched set.                                                         // 133\n\t// (You can seed the arguments with an array of args, but this is                                                   // 134\n\t// only used internally.)                                                                                           // 135\n\teach: function( callback, args ) {                                                                                  // 136\n\t\treturn jQuery.each( this, callback, args );                                                                        // 137\n\t},                                                                                                                  // 138\n                                                                                                                     // 139\n\tmap: function( callback ) {                                                                                         // 140\n\t\treturn this.pushStack( jQuery.map(this, function( elem, i ) {                                                      // 141\n\t\t\treturn callback.call( elem, i, elem );                                                                            // 142\n\t\t}));                                                                                                               // 143\n\t},                                                                                                                  // 144\n                                                                                                                     // 145\n\tslice: function() {                                                                                                 // 146\n\t\treturn this.pushStack( slice.apply( this, arguments ) );                                                           // 147\n\t},                                                                                                                  // 148\n                                                                                                                     // 149\n\tfirst: function() {                                                                                                 // 150\n\t\treturn this.eq( 0 );                                                                                               // 151\n\t},                                                                                                                  // 152\n                                                                                                                     // 153\n\tlast: function() {                                                                                                  // 154\n\t\treturn this.eq( -1 );                                                                                              // 155\n\t},                                                                                                                  // 156\n                                                                                                                     // 157\n\teq: function( i ) {                                                                                                 // 158\n\t\tvar len = this.length,                                                                                             // 159\n\t\t\tj = +i + ( i < 0 ? len : 0 );                                                                                     // 160\n\t\treturn this.pushStack( j >= 0 && j < len ? [ this[j] ] : [] );                                                     // 161\n\t},                                                                                                                  // 162\n                                                                                                                     // 163\n\tend: function() {                                                                                                   // 164\n\t\treturn this.prevObject || this.constructor(null);                                                                  // 165\n\t},                                                                                                                  // 166\n                                                                                                                     // 167\n\t// For internal use only.                                                                                           // 168\n\t// Behaves like an Array's method, not like a jQuery method.                                                        // 169\n\tpush: push,                                                                                                         // 170\n\tsort: deletedIds.sort,                                                                                              // 171\n\tsplice: deletedIds.splice                                                                                           // 172\n};                                                                                                                   // 173\n                                                                                                                     // 174\njQuery.extend = jQuery.fn.extend = function() {                                                                      // 175\n\tvar src, copyIsArray, copy, name, options, clone,                                                                   // 176\n\t\ttarget = arguments[0] || {},                                                                                       // 177\n\t\ti = 1,                                                                                                             // 178\n\t\tlength = arguments.length,                                                                                         // 179\n\t\tdeep = false;                                                                                                      // 180\n                                                                                                                     // 181\n\t// Handle a deep copy situation                                                                                     // 182\n\tif ( typeof target === \"boolean\" ) {                                                                                // 183\n\t\tdeep = target;                                                                                                     // 184\n                                                                                                                     // 185\n\t\t// skip the boolean and the target                                                                                 // 186\n\t\ttarget = arguments[ i ] || {};                                                                                     // 187\n\t\ti++;                                                                                                               // 188\n\t}                                                                                                                   // 189\n                                                                                                                     // 190\n\t// Handle case when target is a string or something (possible in deep copy)                                         // 191\n\tif ( typeof target !== \"object\" && !jQuery.isFunction(target) ) {                                                   // 192\n\t\ttarget = {};                                                                                                       // 193\n\t}                                                                                                                   // 194\n                                                                                                                     // 195\n\t// extend jQuery itself if only one argument is passed                                                              // 196\n\tif ( i === length ) {                                                                                               // 197\n\t\ttarget = this;                                                                                                     // 198\n\t\ti--;                                                                                                               // 199\n\t}                                                                                                                   // 200\n                                                                                                                     // 201\n\tfor ( ; i < length; i++ ) {                                                                                         // 202\n\t\t// Only deal with non-null/undefined values                                                                        // 203\n\t\tif ( (options = arguments[ i ]) != null ) {                                                                        // 204\n\t\t\t// Extend the base object                                                                                         // 205\n\t\t\tfor ( name in options ) {                                                                                         // 206\n\t\t\t\tsrc = target[ name ];                                                                                            // 207\n\t\t\t\tcopy = options[ name ];                                                                                          // 208\n                                                                                                                     // 209\n\t\t\t\t// Prevent never-ending loop                                                                                     // 210\n\t\t\t\tif ( target === copy ) {                                                                                         // 211\n\t\t\t\t\tcontinue;                                                                                                       // 212\n\t\t\t\t}                                                                                                                // 213\n                                                                                                                     // 214\n\t\t\t\t// Recurse if we're merging plain objects or arrays                                                              // 215\n\t\t\t\tif ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {                  // 216\n\t\t\t\t\tif ( copyIsArray ) {                                                                                            // 217\n\t\t\t\t\t\tcopyIsArray = false;                                                                                           // 218\n\t\t\t\t\t\tclone = src && jQuery.isArray(src) ? src : [];                                                                 // 219\n                                                                                                                     // 220\n\t\t\t\t\t} else {                                                                                                        // 221\n\t\t\t\t\t\tclone = src && jQuery.isPlainObject(src) ? src : {};                                                           // 222\n\t\t\t\t\t}                                                                                                               // 223\n                                                                                                                     // 224\n\t\t\t\t\t// Never move original objects, clone them                                                                      // 225\n\t\t\t\t\ttarget[ name ] = jQuery.extend( deep, clone, copy );                                                            // 226\n                                                                                                                     // 227\n\t\t\t\t// Don't bring in undefined values                                                                               // 228\n\t\t\t\t} else if ( copy !== undefined ) {                                                                               // 229\n\t\t\t\t\ttarget[ name ] = copy;                                                                                          // 230\n\t\t\t\t}                                                                                                                // 231\n\t\t\t}                                                                                                                 // 232\n\t\t}                                                                                                                  // 233\n\t}                                                                                                                   // 234\n                                                                                                                     // 235\n\t// Return the modified object                                                                                       // 236\n\treturn target;                                                                                                      // 237\n};                                                                                                                   // 238\n                                                                                                                     // 239\njQuery.extend({                                                                                                      // 240\n\t// Unique for each copy of jQuery on the page                                                                       // 241\n\texpando: \"jQuery\" + ( version + Math.random() ).replace( /\\D/g, \"\" ),                                               // 242\n                                                                                                                     // 243\n\t// Assume jQuery is ready without the ready module                                                                  // 244\n\tisReady: true,                                                                                                      // 245\n                                                                                                                     // 246\n\terror: function( msg ) {                                                                                            // 247\n\t\tthrow new Error( msg );                                                                                            // 248\n\t},                                                                                                                  // 249\n                                                                                                                     // 250\n\tnoop: function() {},                                                                                                // 251\n                                                                                                                     // 252\n\t// See test/unit/core.js for details concerning isFunction.                                                         // 253\n\t// Since version 1.3, DOM methods and functions like alert                                                          // 254\n\t// aren't supported. They return false on IE (#2968).                                                               // 255\n\tisFunction: function( obj ) {                                                                                       // 256\n\t\treturn jQuery.type(obj) === \"function\";                                                                            // 257\n\t},                                                                                                                  // 258\n                                                                                                                     // 259\n\tisArray: Array.isArray || function( obj ) {                                                                         // 260\n\t\treturn jQuery.type(obj) === \"array\";                                                                               // 261\n\t},                                                                                                                  // 262\n                                                                                                                     // 263\n\tisWindow: function( obj ) {                                                                                         // 264\n\t\t/* jshint eqeqeq: false */                                                                                         // 265\n\t\treturn obj != null && obj == obj.window;                                                                           // 266\n\t},                                                                                                                  // 267\n                                                                                                                     // 268\n\tisNumeric: function( obj ) {                                                                                        // 269\n\t\t// parseFloat NaNs numeric-cast false positives (null|true|false|\"\")                                               // 270\n\t\t// ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")                                // 271\n\t\t// subtraction forces infinities to NaN                                                                            // 272\n\t\treturn obj - parseFloat( obj ) >= 0;                                                                               // 273\n\t},                                                                                                                  // 274\n                                                                                                                     // 275\n\tisEmptyObject: function( obj ) {                                                                                    // 276\n\t\tvar name;                                                                                                          // 277\n\t\tfor ( name in obj ) {                                                                                              // 278\n\t\t\treturn false;                                                                                                     // 279\n\t\t}                                                                                                                  // 280\n\t\treturn true;                                                                                                       // 281\n\t},                                                                                                                  // 282\n                                                                                                                     // 283\n\tisPlainObject: function( obj ) {                                                                                    // 284\n\t\tvar key;                                                                                                           // 285\n                                                                                                                     // 286\n\t\t// Must be an Object.                                                                                              // 287\n\t\t// Because of IE, we also have to check the presence of the constructor property.                                  // 288\n\t\t// Make sure that DOM nodes and window objects don't pass through, as well                                         // 289\n\t\tif ( !obj || jQuery.type(obj) !== \"object\" || obj.nodeType || jQuery.isWindow( obj ) ) {                           // 290\n\t\t\treturn false;                                                                                                     // 291\n\t\t}                                                                                                                  // 292\n                                                                                                                     // 293\n\t\ttry {                                                                                                              // 294\n\t\t\t// Not own constructor property must be Object                                                                    // 295\n\t\t\tif ( obj.constructor &&                                                                                           // 296\n\t\t\t\t!hasOwn.call(obj, \"constructor\") &&                                                                              // 297\n\t\t\t\t!hasOwn.call(obj.constructor.prototype, \"isPrototypeOf\") ) {                                                     // 298\n\t\t\t\treturn false;                                                                                                    // 299\n\t\t\t}                                                                                                                 // 300\n\t\t} catch ( e ) {                                                                                                    // 301\n\t\t\t// IE8,9 Will throw exceptions on certain host objects #9897                                                      // 302\n\t\t\treturn false;                                                                                                     // 303\n\t\t}                                                                                                                  // 304\n                                                                                                                     // 305\n\t\t// Support: IE<9                                                                                                   // 306\n\t\t// Handle iteration over inherited properties before own properties.                                               // 307\n\t\tif ( support.ownLast ) {                                                                                           // 308\n\t\t\tfor ( key in obj ) {                                                                                              // 309\n\t\t\t\treturn hasOwn.call( obj, key );                                                                                  // 310\n\t\t\t}                                                                                                                 // 311\n\t\t}                                                                                                                  // 312\n                                                                                                                     // 313\n\t\t// Own properties are enumerated firstly, so to speed up,                                                          // 314\n\t\t// if last one is own, then all properties are own.                                                                // 315\n\t\tfor ( key in obj ) {}                                                                                              // 316\n                                                                                                                     // 317\n\t\treturn key === undefined || hasOwn.call( obj, key );                                                               // 318\n\t},                                                                                                                  // 319\n                                                                                                                     // 320\n\ttype: function( obj ) {                                                                                             // 321\n\t\tif ( obj == null ) {                                                                                               // 322\n\t\t\treturn obj + \"\";                                                                                                  // 323\n\t\t}                                                                                                                  // 324\n\t\treturn typeof obj === \"object\" || typeof obj === \"function\" ?                                                      // 325\n\t\t\tclass2type[ toString.call(obj) ] || \"object\" :                                                                    // 326\n\t\t\ttypeof obj;                                                                                                       // 327\n\t},                                                                                                                  // 328\n                                                                                                                     // 329\n\t// Evaluates a script in a global context                                                                           // 330\n\t// Workarounds based on findings by Jim Driscoll                                                                    // 331\n\t// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context                          // 332\n\tglobalEval: function( data ) {                                                                                      // 333\n\t\tif ( data && jQuery.trim( data ) ) {                                                                               // 334\n\t\t\t// We use execScript on Internet Explorer                                                                         // 335\n\t\t\t// We use an anonymous function so that context is window                                                         // 336\n\t\t\t// rather than jQuery in Firefox                                                                                  // 337\n\t\t\t( window.execScript || function( data ) {                                                                         // 338\n\t\t\t\twindow[ \"eval\" ].call( window, data );                                                                           // 339\n\t\t\t} )( data );                                                                                                      // 340\n\t\t}                                                                                                                  // 341\n\t},                                                                                                                  // 342\n                                                                                                                     // 343\n\t// Convert dashed to camelCase; used by the css and data modules                                                    // 344\n\t// Microsoft forgot to hump their vendor prefix (#9572)                                                             // 345\n\tcamelCase: function( string ) {                                                                                     // 346\n\t\treturn string.replace( rmsPrefix, \"ms-\" ).replace( rdashAlpha, fcamelCase );                                       // 347\n\t},                                                                                                                  // 348\n                                                                                                                     // 349\n\tnodeName: function( elem, name ) {                                                                                  // 350\n\t\treturn elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();                                        // 351\n\t},                                                                                                                  // 352\n                                                                                                                     // 353\n\t// args is for internal usage only                                                                                  // 354\n\teach: function( obj, callback, args ) {                                                                             // 355\n\t\tvar value,                                                                                                         // 356\n\t\t\ti = 0,                                                                                                            // 357\n\t\t\tlength = obj.length,                                                                                              // 358\n\t\t\tisArray = isArraylike( obj );                                                                                     // 359\n                                                                                                                     // 360\n\t\tif ( args ) {                                                                                                      // 361\n\t\t\tif ( isArray ) {                                                                                                  // 362\n\t\t\t\tfor ( ; i < length; i++ ) {                                                                                      // 363\n\t\t\t\t\tvalue = callback.apply( obj[ i ], args );                                                                       // 364\n                                                                                                                     // 365\n\t\t\t\t\tif ( value === false ) {                                                                                        // 366\n\t\t\t\t\t\tbreak;                                                                                                         // 367\n\t\t\t\t\t}                                                                                                               // 368\n\t\t\t\t}                                                                                                                // 369\n\t\t\t} else {                                                                                                          // 370\n\t\t\t\tfor ( i in obj ) {                                                                                               // 371\n\t\t\t\t\tvalue = callback.apply( obj[ i ], args );                                                                       // 372\n                                                                                                                     // 373\n\t\t\t\t\tif ( value === false ) {                                                                                        // 374\n\t\t\t\t\t\tbreak;                                                                                                         // 375\n\t\t\t\t\t}                                                                                                               // 376\n\t\t\t\t}                                                                                                                // 377\n\t\t\t}                                                                                                                 // 378\n                                                                                                                     // 379\n\t\t// A special, fast, case for the most common use of each                                                           // 380\n\t\t} else {                                                                                                           // 381\n\t\t\tif ( isArray ) {                                                                                                  // 382\n\t\t\t\tfor ( ; i < length; i++ ) {                                                                                      // 383\n\t\t\t\t\tvalue = callback.call( obj[ i ], i, obj[ i ] );                                                                 // 384\n                                                                                                                     // 385\n\t\t\t\t\tif ( value === false ) {                                                                                        // 386\n\t\t\t\t\t\tbreak;                                                                                                         // 387\n\t\t\t\t\t}                                                                                                               // 388\n\t\t\t\t}                                                                                                                // 389\n\t\t\t} else {                                                                                                          // 390\n\t\t\t\tfor ( i in obj ) {                                                                                               // 391\n\t\t\t\t\tvalue = callback.call( obj[ i ], i, obj[ i ] );                                                                 // 392\n                                                                                                                     // 393\n\t\t\t\t\tif ( value === false ) {                                                                                        // 394\n\t\t\t\t\t\tbreak;                                                                                                         // 395\n\t\t\t\t\t}                                                                                                               // 396\n\t\t\t\t}                                                                                                                // 397\n\t\t\t}                                                                                                                 // 398\n\t\t}                                                                                                                  // 399\n                                                                                                                     // 400\n\t\treturn obj;                                                                                                        // 401\n\t},                                                                                                                  // 402\n                                                                                                                     // 403\n\t// Use native String.trim function wherever possible                                                                // 404\n\ttrim: trim && !trim.call(\"\\uFEFF\\xA0\") ?                                                                            // 405\n\t\tfunction( text ) {                                                                                                 // 406\n\t\t\treturn text == null ?                                                                                             // 407\n\t\t\t\t\"\" :                                                                                                             // 408\n\t\t\t\ttrim.call( text );                                                                                               // 409\n\t\t} :                                                                                                                // 410\n                                                                                                                     // 411\n\t\t// Otherwise use our own trimming functionality                                                                    // 412\n\t\tfunction( text ) {                                                                                                 // 413\n\t\t\treturn text == null ?                                                                                             // 414\n\t\t\t\t\"\" :                                                                                                             // 415\n\t\t\t\t( text + \"\" ).replace( rtrim, \"\" );                                                                              // 416\n\t\t},                                                                                                                 // 417\n                                                                                                                     // 418\n\t// results is for internal usage only                                                                               // 419\n\tmakeArray: function( arr, results ) {                                                                               // 420\n\t\tvar ret = results || [];                                                                                           // 421\n                                                                                                                     // 422\n\t\tif ( arr != null ) {                                                                                               // 423\n\t\t\tif ( isArraylike( Object(arr) ) ) {                                                                               // 424\n\t\t\t\tjQuery.merge( ret,                                                                                               // 425\n\t\t\t\t\ttypeof arr === \"string\" ?                                                                                       // 426\n\t\t\t\t\t[ arr ] : arr                                                                                                   // 427\n\t\t\t\t);                                                                                                               // 428\n\t\t\t} else {                                                                                                          // 429\n\t\t\t\tpush.call( ret, arr );                                                                                           // 430\n\t\t\t}                                                                                                                 // 431\n\t\t}                                                                                                                  // 432\n                                                                                                                     // 433\n\t\treturn ret;                                                                                                        // 434\n\t},                                                                                                                  // 435\n                                                                                                                     // 436\n\tinArray: function( elem, arr, i ) {                                                                                 // 437\n\t\tvar len;                                                                                                           // 438\n                                                                                                                     // 439\n\t\tif ( arr ) {                                                                                                       // 440\n\t\t\tif ( indexOf ) {                                                                                                  // 441\n\t\t\t\treturn indexOf.call( arr, elem, i );                                                                             // 442\n\t\t\t}                                                                                                                 // 443\n                                                                                                                     // 444\n\t\t\tlen = arr.length;                                                                                                 // 445\n\t\t\ti = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;                                                                   // 446\n                                                                                                                     // 447\n\t\t\tfor ( ; i < len; i++ ) {                                                                                          // 448\n\t\t\t\t// Skip accessing in sparse arrays                                                                               // 449\n\t\t\t\tif ( i in arr && arr[ i ] === elem ) {                                                                           // 450\n\t\t\t\t\treturn i;                                                                                                       // 451\n\t\t\t\t}                                                                                                                // 452\n\t\t\t}                                                                                                                 // 453\n\t\t}                                                                                                                  // 454\n                                                                                                                     // 455\n\t\treturn -1;                                                                                                         // 456\n\t},                                                                                                                  // 457\n                                                                                                                     // 458\n\tmerge: function( first, second ) {                                                                                  // 459\n\t\tvar len = +second.length,                                                                                          // 460\n\t\t\tj = 0,                                                                                                            // 461\n\t\t\ti = first.length;                                                                                                 // 462\n                                                                                                                     // 463\n\t\twhile ( j < len ) {                                                                                                // 464\n\t\t\tfirst[ i++ ] = second[ j++ ];                                                                                     // 465\n\t\t}                                                                                                                  // 466\n                                                                                                                     // 467\n\t\t// Support: IE<9                                                                                                   // 468\n\t\t// Workaround casting of .length to NaN on otherwise arraylike objects (e.g., NodeLists)                           // 469\n\t\tif ( len !== len ) {                                                                                               // 470\n\t\t\twhile ( second[j] !== undefined ) {                                                                               // 471\n\t\t\t\tfirst[ i++ ] = second[ j++ ];                                                                                    // 472\n\t\t\t}                                                                                                                 // 473\n\t\t}                                                                                                                  // 474\n                                                                                                                     // 475\n\t\tfirst.length = i;                                                                                                  // 476\n                                                                                                                     // 477\n\t\treturn first;                                                                                                      // 478\n\t},                                                                                                                  // 479\n                                                                                                                     // 480\n\tgrep: function( elems, callback, invert ) {                                                                         // 481\n\t\tvar callbackInverse,                                                                                               // 482\n\t\t\tmatches = [],                                                                                                     // 483\n\t\t\ti = 0,                                                                                                            // 484\n\t\t\tlength = elems.length,                                                                                            // 485\n\t\t\tcallbackExpect = !invert;                                                                                         // 486\n                                                                                                                     // 487\n\t\t// Go through the array, only saving the items                                                                     // 488\n\t\t// that pass the validator function                                                                                // 489\n\t\tfor ( ; i < length; i++ ) {                                                                                        // 490\n\t\t\tcallbackInverse = !callback( elems[ i ], i );                                                                     // 491\n\t\t\tif ( callbackInverse !== callbackExpect ) {                                                                       // 492\n\t\t\t\tmatches.push( elems[ i ] );                                                                                      // 493\n\t\t\t}                                                                                                                 // 494\n\t\t}                                                                                                                  // 495\n                                                                                                                     // 496\n\t\treturn matches;                                                                                                    // 497\n\t},                                                                                                                  // 498\n                                                                                                                     // 499\n\t// arg is for internal usage only                                                                                   // 500\n\tmap: function( elems, callback, arg ) {                                                                             // 501\n\t\tvar value,                                                                                                         // 502\n\t\t\ti = 0,                                                                                                            // 503\n\t\t\tlength = elems.length,                                                                                            // 504\n\t\t\tisArray = isArraylike( elems ),                                                                                   // 505\n\t\t\tret = [];                                                                                                         // 506\n                                                                                                                     // 507\n\t\t// Go through the array, translating each of the items to their new values                                         // 508\n\t\tif ( isArray ) {                                                                                                   // 509\n\t\t\tfor ( ; i < length; i++ ) {                                                                                       // 510\n\t\t\t\tvalue = callback( elems[ i ], i, arg );                                                                          // 511\n                                                                                                                     // 512\n\t\t\t\tif ( value != null ) {                                                                                           // 513\n\t\t\t\t\tret.push( value );                                                                                              // 514\n\t\t\t\t}                                                                                                                // 515\n\t\t\t}                                                                                                                 // 516\n                                                                                                                     // 517\n\t\t// Go through every key on the object,                                                                             // 518\n\t\t} else {                                                                                                           // 519\n\t\t\tfor ( i in elems ) {                                                                                              // 520\n\t\t\t\tvalue = callback( elems[ i ], i, arg );                                                                          // 521\n                                                                                                                     // 522\n\t\t\t\tif ( value != null ) {                                                                                           // 523\n\t\t\t\t\tret.push( value );                                                                                              // 524\n\t\t\t\t}                                                                                                                // 525\n\t\t\t}                                                                                                                 // 526\n\t\t}                                                                                                                  // 527\n                                                                                                                     // 528\n\t\t// Flatten any nested arrays                                                                                       // 529\n\t\treturn concat.apply( [], ret );                                                                                    // 530\n\t},                                                                                                                  // 531\n                                                                                                                     // 532\n\t// A global GUID counter for objects                                                                                // 533\n\tguid: 1,                                                                                                            // 534\n                                                                                                                     // 535\n\t// Bind a function to a context, optionally partially applying any                                                  // 536\n\t// arguments.                                                                                                       // 537\n\tproxy: function( fn, context ) {                                                                                    // 538\n\t\tvar args, proxy, tmp;                                                                                              // 539\n                                                                                                                     // 540\n\t\tif ( typeof context === \"string\" ) {                                                                               // 541\n\t\t\ttmp = fn[ context ];                                                                                              // 542\n\t\t\tcontext = fn;                                                                                                     // 543\n\t\t\tfn = tmp;                                                                                                         // 544\n\t\t}                                                                                                                  // 545\n                                                                                                                     // 546\n\t\t// Quick check to determine if target is callable, in the spec                                                     // 547\n\t\t// this throws a TypeError, but we will just return undefined.                                                     // 548\n\t\tif ( !jQuery.isFunction( fn ) ) {                                                                                  // 549\n\t\t\treturn undefined;                                                                                                 // 550\n\t\t}                                                                                                                  // 551\n                                                                                                                     // 552\n\t\t// Simulated bind                                                                                                  // 553\n\t\targs = slice.call( arguments, 2 );                                                                                 // 554\n\t\tproxy = function() {                                                                                               // 555\n\t\t\treturn fn.apply( context || this, args.concat( slice.call( arguments ) ) );                                       // 556\n\t\t};                                                                                                                 // 557\n                                                                                                                     // 558\n\t\t// Set the guid of unique handler to the same of original handler, so it can be removed                            // 559\n\t\tproxy.guid = fn.guid = fn.guid || jQuery.guid++;                                                                   // 560\n                                                                                                                     // 561\n\t\treturn proxy;                                                                                                      // 562\n\t},                                                                                                                  // 563\n                                                                                                                     // 564\n\tnow: function() {                                                                                                   // 565\n\t\treturn +( new Date() );                                                                                            // 566\n\t},                                                                                                                  // 567\n                                                                                                                     // 568\n\t// jQuery.support is not used in Core but other projects attach their                                               // 569\n\t// properties to it so it needs to exist.                                                                           // 570\n\tsupport: support                                                                                                    // 571\n});                                                                                                                  // 572\n                                                                                                                     // 573\n// Populate the class2type map                                                                                       // 574\njQuery.each(\"Boolean Number String Function Array Date RegExp Object Error\".split(\" \"), function(i, name) {          // 575\n\tclass2type[ \"[object \" + name + \"]\" ] = name.toLowerCase();                                                         // 576\n});                                                                                                                  // 577\n                                                                                                                     // 578\nfunction isArraylike( obj ) {                                                                                        // 579\n\tvar length = obj.length,                                                                                            // 580\n\t\ttype = jQuery.type( obj );                                                                                         // 581\n                                                                                                                     // 582\n\tif ( type === \"function\" || jQuery.isWindow( obj ) ) {                                                              // 583\n\t\treturn false;                                                                                                      // 584\n\t}                                                                                                                   // 585\n                                                                                                                     // 586\n\tif ( obj.nodeType === 1 && length ) {                                                                               // 587\n\t\treturn true;                                                                                                       // 588\n\t}                                                                                                                   // 589\n                                                                                                                     // 590\n\treturn type === \"array\" || length === 0 ||                                                                          // 591\n\t\ttypeof length === \"number\" && length > 0 && ( length - 1 ) in obj;                                                 // 592\n}                                                                                                                    // 593\nvar Sizzle =                                                                                                         // 594\n/*!                                                                                                                  // 595\n * Sizzle CSS Selector Engine v1.10.16                                                                               // 596\n * http://sizzlejs.com/                                                                                              // 597\n *                                                                                                                   // 598\n * Copyright 2013 jQuery Foundation, Inc. and other contributors                                                     // 599\n * Released under the MIT license                                                                                    // 600\n * http://jquery.org/license                                                                                         // 601\n *                                                                                                                   // 602\n * Date: 2014-01-13                                                                                                  // 603\n */                                                                                                                  // 604\n(function( window ) {                                                                                                // 605\n                                                                                                                     // 606\nvar i,                                                                                                               // 607\n\tsupport,                                                                                                            // 608\n\tExpr,                                                                                                               // 609\n\tgetText,                                                                                                            // 610\n\tisXML,                                                                                                              // 611\n\tcompile,                                                                                                            // 612\n\toutermostContext,                                                                                                   // 613\n\tsortInput,                                                                                                          // 614\n\thasDuplicate,                                                                                                       // 615\n                                                                                                                     // 616\n\t// Local document vars                                                                                              // 617\n\tsetDocument,                                                                                                        // 618\n\tdocument,                                                                                                           // 619\n\tdocElem,                                                                                                            // 620\n\tdocumentIsHTML,                                                                                                     // 621\n\trbuggyQSA,                                                                                                          // 622\n\trbuggyMatches,                                                                                                      // 623\n\tmatches,                                                                                                            // 624\n\tcontains,                                                                                                           // 625\n                                                                                                                     // 626\n\t// Instance-specific data                                                                                           // 627\n\texpando = \"sizzle\" + -(new Date()),                                                                                 // 628\n\tpreferredDoc = window.document,                                                                                     // 629\n\tdirruns = 0,                                                                                                        // 630\n\tdone = 0,                                                                                                           // 631\n\tclassCache = createCache(),                                                                                         // 632\n\ttokenCache = createCache(),                                                                                         // 633\n\tcompilerCache = createCache(),                                                                                      // 634\n\tsortOrder = function( a, b ) {                                                                                      // 635\n\t\tif ( a === b ) {                                                                                                   // 636\n\t\t\thasDuplicate = true;                                                                                              // 637\n\t\t}                                                                                                                  // 638\n\t\treturn 0;                                                                                                          // 639\n\t},                                                                                                                  // 640\n                                                                                                                     // 641\n\t// General-purpose constants                                                                                        // 642\n\tstrundefined = typeof undefined,                                                                                    // 643\n\tMAX_NEGATIVE = 1 << 31,                                                                                             // 644\n                                                                                                                     // 645\n\t// Instance methods                                                                                                 // 646\n\thasOwn = ({}).hasOwnProperty,                                                                                       // 647\n\tarr = [],                                                                                                           // 648\n\tpop = arr.pop,                                                                                                      // 649\n\tpush_native = arr.push,                                                                                             // 650\n\tpush = arr.push,                                                                                                    // 651\n\tslice = arr.slice,                                                                                                  // 652\n\t// Use a stripped-down indexOf if we can't use a native one                                                         // 653\n\tindexOf = arr.indexOf || function( elem ) {                                                                         // 654\n\t\tvar i = 0,                                                                                                         // 655\n\t\t\tlen = this.length;                                                                                                // 656\n\t\tfor ( ; i < len; i++ ) {                                                                                           // 657\n\t\t\tif ( this[i] === elem ) {                                                                                         // 658\n\t\t\t\treturn i;                                                                                                        // 659\n\t\t\t}                                                                                                                 // 660\n\t\t}                                                                                                                  // 661\n\t\treturn -1;                                                                                                         // 662\n\t},                                                                                                                  // 663\n                                                                                                                     // 664\n\tbooleans = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\",\n                                                                                                                     // 666\n\t// Regular expressions                                                                                              // 667\n                                                                                                                     // 668\n\t// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace                                            // 669\n\twhitespace = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",                                                                                 // 670\n\t// http://www.w3.org/TR/css3-syntax/#characters                                                                     // 671\n\tcharacterEncoding = \"(?:\\\\\\\\.|[\\\\w-]|[^\\\\x00-\\\\xa0])+\",                                                             // 672\n                                                                                                                     // 673\n\t// Loosely modeled on CSS identifier characters                                                                     // 674\n\t// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors            // 675\n\t// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier                                      // 676\n\tidentifier = characterEncoding.replace( \"w\", \"w#\" ),                                                                // 677\n                                                                                                                     // 678\n\t// Acceptable operators http://www.w3.org/TR/selectors/#attribute-selectors                                         // 679\n\tattributes = \"\\\\[\" + whitespace + \"*(\" + characterEncoding + \")\" + whitespace +                                     // 680\n\t\t\"*(?:([*^$|!~]?=)\" + whitespace + \"*(?:(['\\\"])((?:\\\\\\\\.|[^\\\\\\\\])*?)\\\\3|(\" + identifier + \")|)|)\" + whitespace + \"*\\\\]\",\n                                                                                                                     // 682\n\t// Prefer arguments quoted,                                                                                         // 683\n\t//   then not containing pseudos/brackets,                                                                          // 684\n\t//   then attribute selectors/non-parenthetical expressions,                                                        // 685\n\t//   then anything else                                                                                             // 686\n\t// These preferences are here to reduce the number of selectors                                                     // 687\n\t//   needing tokenize in the PSEUDO preFilter                                                                       // 688\n\tpseudos = \":(\" + characterEncoding + \")(?:\\\\(((['\\\"])((?:\\\\\\\\.|[^\\\\\\\\])*?)\\\\3|((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + attributes.replace( 3, 8 ) + \")*)|.*)\\\\)|)\",\n                                                                                                                     // 690\n\t// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter       // 691\n\trtrim = new RegExp( \"^\" + whitespace + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" + whitespace + \"+$\", \"g\" ),                    // 692\n                                                                                                                     // 693\n\trcomma = new RegExp( \"^\" + whitespace + \"*,\" + whitespace + \"*\" ),                                                  // 694\n\trcombinators = new RegExp( \"^\" + whitespace + \"*([>+~]|\" + whitespace + \")\" + whitespace + \"*\" ),                   // 695\n                                                                                                                     // 696\n\trattributeQuotes = new RegExp( \"=\" + whitespace + \"*([^\\\\]'\\\"]*?)\" + whitespace + \"*\\\\]\", \"g\" ),                    // 697\n                                                                                                                     // 698\n\trpseudo = new RegExp( pseudos ),                                                                                    // 699\n\tridentifier = new RegExp( \"^\" + identifier + \"$\" ),                                                                 // 700\n                                                                                                                     // 701\n\tmatchExpr = {                                                                                                       // 702\n\t\t\"ID\": new RegExp( \"^#(\" + characterEncoding + \")\" ),                                                               // 703\n\t\t\"CLASS\": new RegExp( \"^\\\\.(\" + characterEncoding + \")\" ),                                                          // 704\n\t\t\"TAG\": new RegExp( \"^(\" + characterEncoding.replace( \"w\", \"w*\" ) + \")\" ),                                          // 705\n\t\t\"ATTR\": new RegExp( \"^\" + attributes ),                                                                            // 706\n\t\t\"PSEUDO\": new RegExp( \"^\" + pseudos ),                                                                             // 707\n\t\t\"CHILD\": new RegExp( \"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" + whitespace +                       // 708\n\t\t\t\"*(even|odd|(([+-]|)(\\\\d*)n|)\" + whitespace + \"*(?:([+-]|)\" + whitespace +                                        // 709\n\t\t\t\"*(\\\\d+)|))\" + whitespace + \"*\\\\)|)\", \"i\" ),                                                                      // 710\n\t\t\"bool\": new RegExp( \"^(?:\" + booleans + \")$\", \"i\" ),                                                               // 711\n\t\t// For use in libraries implementing .is()                                                                         // 712\n\t\t// We use this for POS matching in `select`                                                                        // 713\n\t\t\"needsContext\": new RegExp( \"^\" + whitespace + \"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" +                // 714\n\t\t\twhitespace + \"*((?:-\\\\d)?\\\\d*)\" + whitespace + \"*\\\\)|)(?=[^-]|$)\", \"i\" )                                          // 715\n\t},                                                                                                                  // 716\n                                                                                                                     // 717\n\trinputs = /^(?:input|select|textarea|button)$/i,                                                                    // 718\n\trheader = /^h\\d$/i,                                                                                                 // 719\n                                                                                                                     // 720\n\trnative = /^[^{]+\\{\\s*\\[native \\w/,                                                                                 // 721\n                                                                                                                     // 722\n\t// Easily-parseable/retrievable ID or TAG or CLASS selectors                                                        // 723\n\trquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,                                                                    // 724\n                                                                                                                     // 725\n\trsibling = /[+~]/,                                                                                                  // 726\n\trescape = /'|\\\\/g,                                                                                                  // 727\n                                                                                                                     // 728\n\t// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters                                           // 729\n\trunescape = new RegExp( \"\\\\\\\\([\\\\da-f]{1,6}\" + whitespace + \"?|(\" + whitespace + \")|.)\", \"ig\" ),                    // 730\n\tfunescape = function( _, escaped, escapedWhitespace ) {                                                             // 731\n\t\tvar high = \"0x\" + escaped - 0x10000;                                                                               // 732\n\t\t// NaN means non-codepoint                                                                                         // 733\n\t\t// Support: Firefox                                                                                                // 734\n\t\t// Workaround erroneous numeric interpretation of +\"0x\"                                                            // 735\n\t\treturn high !== high || escapedWhitespace ?                                                                        // 736\n\t\t\tescaped :                                                                                                         // 737\n\t\t\thigh < 0 ?                                                                                                        // 738\n\t\t\t\t// BMP codepoint                                                                                                 // 739\n\t\t\t\tString.fromCharCode( high + 0x10000 ) :                                                                          // 740\n\t\t\t\t// Supplemental Plane codepoint (surrogate pair)                                                                 // 741\n\t\t\t\tString.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );                                               // 742\n\t};                                                                                                                  // 743\n                                                                                                                     // 744\n// Optimize for push.apply( _, NodeList )                                                                            // 745\ntry {                                                                                                                // 746\n\tpush.apply(                                                                                                         // 747\n\t\t(arr = slice.call( preferredDoc.childNodes )),                                                                     // 748\n\t\tpreferredDoc.childNodes                                                                                            // 749\n\t);                                                                                                                  // 750\n\t// Support: Android<4.0                                                                                             // 751\n\t// Detect silently failing push.apply                                                                               // 752\n\tarr[ preferredDoc.childNodes.length ].nodeType;                                                                     // 753\n} catch ( e ) {                                                                                                      // 754\n\tpush = { apply: arr.length ?                                                                                        // 755\n                                                                                                                     // 756\n\t\t// Leverage slice if possible                                                                                      // 757\n\t\tfunction( target, els ) {                                                                                          // 758\n\t\t\tpush_native.apply( target, slice.call(els) );                                                                     // 759\n\t\t} :                                                                                                                // 760\n                                                                                                                     // 761\n\t\t// Support: IE<9                                                                                                   // 762\n\t\t// Otherwise append directly                                                                                       // 763\n\t\tfunction( target, els ) {                                                                                          // 764\n\t\t\tvar j = target.length,                                                                                            // 765\n\t\t\t\ti = 0;                                                                                                           // 766\n\t\t\t// Can't trust NodeList.length                                                                                    // 767\n\t\t\twhile ( (target[j++] = els[i++]) ) {}                                                                             // 768\n\t\t\ttarget.length = j - 1;                                                                                            // 769\n\t\t}                                                                                                                  // 770\n\t};                                                                                                                  // 771\n}                                                                                                                    // 772\n                                                                                                                     // 773\nfunction Sizzle( selector, context, results, seed ) {                                                                // 774\n\tvar match, elem, m, nodeType,                                                                                       // 775\n\t\t// QSA vars                                                                                                        // 776\n\t\ti, groups, old, nid, newContext, newSelector;                                                                      // 777\n                                                                                                                     // 778\n\tif ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {                                 // 779\n\t\tsetDocument( context );                                                                                            // 780\n\t}                                                                                                                   // 781\n                                                                                                                     // 782\n\tcontext = context || document;                                                                                      // 783\n\tresults = results || [];                                                                                            // 784\n                                                                                                                     // 785\n\tif ( !selector || typeof selector !== \"string\" ) {                                                                  // 786\n\t\treturn results;                                                                                                    // 787\n\t}                                                                                                                   // 788\n                                                                                                                     // 789\n\tif ( (nodeType = context.nodeType) !== 1 && nodeType !== 9 ) {                                                      // 790\n\t\treturn [];                                                                                                         // 791\n\t}                                                                                                                   // 792\n                                                                                                                     // 793\n\tif ( documentIsHTML && !seed ) {                                                                                    // 794\n                                                                                                                     // 795\n\t\t// Shortcuts                                                                                                       // 796\n\t\tif ( (match = rquickExpr.exec( selector )) ) {                                                                     // 797\n\t\t\t// Speed-up: Sizzle(\"#ID\")                                                                                        // 798\n\t\t\tif ( (m = match[1]) ) {                                                                                           // 799\n\t\t\t\tif ( nodeType === 9 ) {                                                                                          // 800\n\t\t\t\t\telem = context.getElementById( m );                                                                             // 801\n\t\t\t\t\t// Check parentNode to catch when Blackberry 4.6 returns                                                        // 802\n\t\t\t\t\t// nodes that are no longer in the document (jQuery #6963)                                                      // 803\n\t\t\t\t\tif ( elem && elem.parentNode ) {                                                                                // 804\n\t\t\t\t\t\t// Handle the case where IE, Opera, and Webkit return items                                                    // 805\n\t\t\t\t\t\t// by name instead of ID                                                                                       // 806\n\t\t\t\t\t\tif ( elem.id === m ) {                                                                                         // 807\n\t\t\t\t\t\t\tresults.push( elem );                                                                                         // 808\n\t\t\t\t\t\t\treturn results;                                                                                               // 809\n\t\t\t\t\t\t}                                                                                                              // 810\n\t\t\t\t\t} else {                                                                                                        // 811\n\t\t\t\t\t\treturn results;                                                                                                // 812\n\t\t\t\t\t}                                                                                                               // 813\n\t\t\t\t} else {                                                                                                         // 814\n\t\t\t\t\t// Context is not a document                                                                                    // 815\n\t\t\t\t\tif ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&                             // 816\n\t\t\t\t\t\tcontains( context, elem ) && elem.id === m ) {                                                                 // 817\n\t\t\t\t\t\tresults.push( elem );                                                                                          // 818\n\t\t\t\t\t\treturn results;                                                                                                // 819\n\t\t\t\t\t}                                                                                                               // 820\n\t\t\t\t}                                                                                                                // 821\n                                                                                                                     // 822\n\t\t\t// Speed-up: Sizzle(\"TAG\")                                                                                        // 823\n\t\t\t} else if ( match[2] ) {                                                                                          // 824\n\t\t\t\tpush.apply( results, context.getElementsByTagName( selector ) );                                                 // 825\n\t\t\t\treturn results;                                                                                                  // 826\n                                                                                                                     // 827\n\t\t\t// Speed-up: Sizzle(\".CLASS\")                                                                                     // 828\n\t\t\t} else if ( (m = match[3]) && support.getElementsByClassName && context.getElementsByClassName ) {                // 829\n\t\t\t\tpush.apply( results, context.getElementsByClassName( m ) );                                                      // 830\n\t\t\t\treturn results;                                                                                                  // 831\n\t\t\t}                                                                                                                 // 832\n\t\t}                                                                                                                  // 833\n                                                                                                                     // 834\n\t\t// QSA path                                                                                                        // 835\n\t\tif ( support.qsa && (!rbuggyQSA || !rbuggyQSA.test( selector )) ) {                                                // 836\n\t\t\tnid = old = expando;                                                                                              // 837\n\t\t\tnewContext = context;                                                                                             // 838\n\t\t\tnewSelector = nodeType === 9 && selector;                                                                         // 839\n                                                                                                                     // 840\n\t\t\t// qSA works strangely on Element-rooted queries                                                                  // 841\n\t\t\t// We can work around this by specifying an extra ID on the root                                                  // 842\n\t\t\t// and working up from there (Thanks to Andrew Dupont for the technique)                                          // 843\n\t\t\t// IE 8 doesn't work on object elements                                                                           // 844\n\t\t\tif ( nodeType === 1 && context.nodeName.toLowerCase() !== \"object\" ) {                                            // 845\n\t\t\t\tgroups = tokenize( selector );                                                                                   // 846\n                                                                                                                     // 847\n\t\t\t\tif ( (old = context.getAttribute(\"id\")) ) {                                                                      // 848\n\t\t\t\t\tnid = old.replace( rescape, \"\\\\$&\" );                                                                           // 849\n\t\t\t\t} else {                                                                                                         // 850\n\t\t\t\t\tcontext.setAttribute( \"id\", nid );                                                                              // 851\n\t\t\t\t}                                                                                                                // 852\n\t\t\t\tnid = \"[id='\" + nid + \"'] \";                                                                                     // 853\n                                                                                                                     // 854\n\t\t\t\ti = groups.length;                                                                                               // 855\n\t\t\t\twhile ( i-- ) {                                                                                                  // 856\n\t\t\t\t\tgroups[i] = nid + toSelector( groups[i] );                                                                      // 857\n\t\t\t\t}                                                                                                                // 858\n\t\t\t\tnewContext = rsibling.test( selector ) && testContext( context.parentNode ) || context;                          // 859\n\t\t\t\tnewSelector = groups.join(\",\");                                                                                  // 860\n\t\t\t}                                                                                                                 // 861\n                                                                                                                     // 862\n\t\t\tif ( newSelector ) {                                                                                              // 863\n\t\t\t\ttry {                                                                                                            // 864\n\t\t\t\t\tpush.apply( results,                                                                                            // 865\n\t\t\t\t\t\tnewContext.querySelectorAll( newSelector )                                                                     // 866\n\t\t\t\t\t);                                                                                                              // 867\n\t\t\t\t\treturn results;                                                                                                 // 868\n\t\t\t\t} catch(qsaError) {                                                                                              // 869\n\t\t\t\t} finally {                                                                                                      // 870\n\t\t\t\t\tif ( !old ) {                                                                                                   // 871\n\t\t\t\t\t\tcontext.removeAttribute(\"id\");                                                                                 // 872\n\t\t\t\t\t}                                                                                                               // 873\n\t\t\t\t}                                                                                                                // 874\n\t\t\t}                                                                                                                 // 875\n\t\t}                                                                                                                  // 876\n\t}                                                                                                                   // 877\n                                                                                                                     // 878\n\t// All others                                                                                                       // 879\n\treturn select( selector.replace( rtrim, \"$1\" ), context, results, seed );                                           // 880\n}                                                                                                                    // 881\n                                                                                                                     // 882\n/**                                                                                                                  // 883\n * Create key-value caches of limited size                                                                           // 884\n * @returns {Function(string, Object)} Returns the Object data after storing it on itself with                       // 885\n *\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)                      // 886\n *\tdeleting the oldest entry                                                                                         // 887\n */                                                                                                                  // 888\nfunction createCache() {                                                                                             // 889\n\tvar keys = [];                                                                                                      // 890\n                                                                                                                     // 891\n\tfunction cache( key, value ) {                                                                                      // 892\n\t\t// Use (key + \" \") to avoid collision with native prototype properties (see Issue #157)                            // 893\n\t\tif ( keys.push( key + \" \" ) > Expr.cacheLength ) {                                                                 // 894\n\t\t\t// Only keep the most recent entries                                                                              // 895\n\t\t\tdelete cache[ keys.shift() ];                                                                                     // 896\n\t\t}                                                                                                                  // 897\n\t\treturn (cache[ key + \" \" ] = value);                                                                               // 898\n\t}                                                                                                                   // 899\n\treturn cache;                                                                                                       // 900\n}                                                                                                                    // 901\n                                                                                                                     // 902\n/**                                                                                                                  // 903\n * Mark a function for special use by Sizzle                                                                         // 904\n * @param {Function} fn The function to mark                                                                         // 905\n */                                                                                                                  // 906\nfunction markFunction( fn ) {                                                                                        // 907\n\tfn[ expando ] = true;                                                                                               // 908\n\treturn fn;                                                                                                          // 909\n}                                                                                                                    // 910\n                                                                                                                     // 911\n/**                                                                                                                  // 912\n * Support testing using an element                                                                                  // 913\n * @param {Function} fn Passed the created div and expects a boolean result                                          // 914\n */                                                                                                                  // 915\nfunction assert( fn ) {                                                                                              // 916\n\tvar div = document.createElement(\"div\");                                                                            // 917\n                                                                                                                     // 918\n\ttry {                                                                                                               // 919\n\t\treturn !!fn( div );                                                                                                // 920\n\t} catch (e) {                                                                                                       // 921\n\t\treturn false;                                                                                                      // 922\n\t} finally {                                                                                                         // 923\n\t\t// Remove from its parent by default                                                                               // 924\n\t\tif ( div.parentNode ) {                                                                                            // 925\n\t\t\tdiv.parentNode.removeChild( div );                                                                                // 926\n\t\t}                                                                                                                  // 927\n\t\t// release memory in IE                                                                                            // 928\n\t\tdiv = null;                                                                                                        // 929\n\t}                                                                                                                   // 930\n}                                                                                                                    // 931\n                                                                                                                     // 932\n/**                                                                                                                  // 933\n * Adds the same handler for all of the specified attrs                                                              // 934\n * @param {String} attrs Pipe-separated list of attributes                                                           // 935\n * @param {Function} handler The method that will be applied                                                         // 936\n */                                                                                                                  // 937\nfunction addHandle( attrs, handler ) {                                                                               // 938\n\tvar arr = attrs.split(\"|\"),                                                                                         // 939\n\t\ti = attrs.length;                                                                                                  // 940\n                                                                                                                     // 941\n\twhile ( i-- ) {                                                                                                     // 942\n\t\tExpr.attrHandle[ arr[i] ] = handler;                                                                               // 943\n\t}                                                                                                                   // 944\n}                                                                                                                    // 945\n                                                                                                                     // 946\n/**                                                                                                                  // 947\n * Checks document order of two siblings                                                                             // 948\n * @param {Element} a                                                                                                // 949\n * @param {Element} b                                                                                                // 950\n * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b                              // 951\n */                                                                                                                  // 952\nfunction siblingCheck( a, b ) {                                                                                      // 953\n\tvar cur = b && a,                                                                                                   // 954\n\t\tdiff = cur && a.nodeType === 1 && b.nodeType === 1 &&                                                              // 955\n\t\t\t( ~b.sourceIndex || MAX_NEGATIVE ) -                                                                              // 956\n\t\t\t( ~a.sourceIndex || MAX_NEGATIVE );                                                                               // 957\n                                                                                                                     // 958\n\t// Use IE sourceIndex if available on both nodes                                                                    // 959\n\tif ( diff ) {                                                                                                       // 960\n\t\treturn diff;                                                                                                       // 961\n\t}                                                                                                                   // 962\n                                                                                                                     // 963\n\t// Check if b follows a                                                                                             // 964\n\tif ( cur ) {                                                                                                        // 965\n\t\twhile ( (cur = cur.nextSibling) ) {                                                                                // 966\n\t\t\tif ( cur === b ) {                                                                                                // 967\n\t\t\t\treturn -1;                                                                                                       // 968\n\t\t\t}                                                                                                                 // 969\n\t\t}                                                                                                                  // 970\n\t}                                                                                                                   // 971\n                                                                                                                     // 972\n\treturn a ? 1 : -1;                                                                                                  // 973\n}                                                                                                                    // 974\n                                                                                                                     // 975\n/**                                                                                                                  // 976\n * Returns a function to use in pseudos for input types                                                              // 977\n * @param {String} type                                                                                              // 978\n */                                                                                                                  // 979\nfunction createInputPseudo( type ) {                                                                                 // 980\n\treturn function( elem ) {                                                                                           // 981\n\t\tvar name = elem.nodeName.toLowerCase();                                                                            // 982\n\t\treturn name === \"input\" && elem.type === type;                                                                     // 983\n\t};                                                                                                                  // 984\n}                                                                                                                    // 985\n                                                                                                                     // 986\n/**                                                                                                                  // 987\n * Returns a function to use in pseudos for buttons                                                                  // 988\n * @param {String} type                                                                                              // 989\n */                                                                                                                  // 990\nfunction createButtonPseudo( type ) {                                                                                // 991\n\treturn function( elem ) {                                                                                           // 992\n\t\tvar name = elem.nodeName.toLowerCase();                                                                            // 993\n\t\treturn (name === \"input\" || name === \"button\") && elem.type === type;                                              // 994\n\t};                                                                                                                  // 995\n}                                                                                                                    // 996\n                                                                                                                     // 997\n/**                                                                                                                  // 998\n * Returns a function to use in pseudos for positionals                                                              // 999\n * @param {Function} fn                                                                                              // 1000\n */                                                                                                                  // 1001\nfunction createPositionalPseudo( fn ) {                                                                              // 1002\n\treturn markFunction(function( argument ) {                                                                          // 1003\n\t\targument = +argument;                                                                                              // 1004\n\t\treturn markFunction(function( seed, matches ) {                                                                    // 1005\n\t\t\tvar j,                                                                                                            // 1006\n\t\t\t\tmatchIndexes = fn( [], seed.length, argument ),                                                                  // 1007\n\t\t\t\ti = matchIndexes.length;                                                                                         // 1008\n                                                                                                                     // 1009\n\t\t\t// Match elements found at the specified indexes                                                                  // 1010\n\t\t\twhile ( i-- ) {                                                                                                   // 1011\n\t\t\t\tif ( seed[ (j = matchIndexes[i]) ] ) {                                                                           // 1012\n\t\t\t\t\tseed[j] = !(matches[j] = seed[j]);                                                                              // 1013\n\t\t\t\t}                                                                                                                // 1014\n\t\t\t}                                                                                                                 // 1015\n\t\t});                                                                                                                // 1016\n\t});                                                                                                                 // 1017\n}                                                                                                                    // 1018\n                                                                                                                     // 1019\n/**                                                                                                                  // 1020\n * Checks a node for validity as a Sizzle context                                                                    // 1021\n * @param {Element|Object=} context                                                                                  // 1022\n * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value                           // 1023\n */                                                                                                                  // 1024\nfunction testContext( context ) {                                                                                    // 1025\n\treturn context && typeof context.getElementsByTagName !== strundefined && context;                                  // 1026\n}                                                                                                                    // 1027\n                                                                                                                     // 1028\n// Expose support vars for convenience                                                                               // 1029\nsupport = Sizzle.support = {};                                                                                       // 1030\n                                                                                                                     // 1031\n/**                                                                                                                  // 1032\n * Detects XML nodes                                                                                                 // 1033\n * @param {Element|Object} elem An element or a document                                                             // 1034\n * @returns {Boolean} True iff elem is a non-HTML XML node                                                           // 1035\n */                                                                                                                  // 1036\nisXML = Sizzle.isXML = function( elem ) {                                                                            // 1037\n\t// documentElement is verified for cases where it doesn't yet exist                                                 // 1038\n\t// (such as loading iframes in IE - #4833)                                                                          // 1039\n\tvar documentElement = elem && (elem.ownerDocument || elem).documentElement;                                         // 1040\n\treturn documentElement ? documentElement.nodeName !== \"HTML\" : false;                                               // 1041\n};                                                                                                                   // 1042\n                                                                                                                     // 1043\n/**                                                                                                                  // 1044\n * Sets document-related variables once based on the current document                                                // 1045\n * @param {Element|Object} [doc] An element or document object to use to set the document                            // 1046\n * @returns {Object} Returns the current document                                                                    // 1047\n */                                                                                                                  // 1048\nsetDocument = Sizzle.setDocument = function( node ) {                                                                // 1049\n\tvar hasCompare,                                                                                                     // 1050\n\t\tdoc = node ? node.ownerDocument || node : preferredDoc,                                                            // 1051\n\t\tparent = doc.defaultView;                                                                                          // 1052\n                                                                                                                     // 1053\n\t// If no document and documentElement is available, return                                                          // 1054\n\tif ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {                                             // 1055\n\t\treturn document;                                                                                                   // 1056\n\t}                                                                                                                   // 1057\n                                                                                                                     // 1058\n\t// Set our document                                                                                                 // 1059\n\tdocument = doc;                                                                                                     // 1060\n\tdocElem = doc.documentElement;                                                                                      // 1061\n                                                                                                                     // 1062\n\t// Support tests                                                                                                    // 1063\n\tdocumentIsHTML = !isXML( doc );                                                                                     // 1064\n                                                                                                                     // 1065\n\t// Support: IE>8                                                                                                    // 1066\n\t// If iframe document is assigned to \"document\" variable and if iframe has been reloaded,                           // 1067\n\t// IE will throw \"permission denied\" error when accessing \"document\" variable, see jQuery #13936                    // 1068\n\t// IE6-8 do not support the defaultView property so parent will be undefined                                        // 1069\n\tif ( parent && parent !== parent.top ) {                                                                            // 1070\n\t\t// IE11 does not have attachEvent, so all must suffer                                                              // 1071\n\t\tif ( parent.addEventListener ) {                                                                                   // 1072\n\t\t\tparent.addEventListener( \"unload\", function() {                                                                   // 1073\n\t\t\t\tsetDocument();                                                                                                   // 1074\n\t\t\t}, false );                                                                                                       // 1075\n\t\t} else if ( parent.attachEvent ) {                                                                                 // 1076\n\t\t\tparent.attachEvent( \"onunload\", function() {                                                                      // 1077\n\t\t\t\tsetDocument();                                                                                                   // 1078\n\t\t\t});                                                                                                               // 1079\n\t\t}                                                                                                                  // 1080\n\t}                                                                                                                   // 1081\n                                                                                                                     // 1082\n\t/* Attributes                                                                                                       // 1083\n\t---------------------------------------------------------------------- */                                           // 1084\n                                                                                                                     // 1085\n\t// Support: IE<8                                                                                                    // 1086\n\t// Verify that getAttribute really returns attributes and not properties (excepting IE8 booleans)                   // 1087\n\tsupport.attributes = assert(function( div ) {                                                                       // 1088\n\t\tdiv.className = \"i\";                                                                                               // 1089\n\t\treturn !div.getAttribute(\"className\");                                                                             // 1090\n\t});                                                                                                                 // 1091\n                                                                                                                     // 1092\n\t/* getElement(s)By*                                                                                                 // 1093\n\t---------------------------------------------------------------------- */                                           // 1094\n                                                                                                                     // 1095\n\t// Check if getElementsByTagName(\"*\") returns only elements                                                         // 1096\n\tsupport.getElementsByTagName = assert(function( div ) {                                                             // 1097\n\t\tdiv.appendChild( doc.createComment(\"\") );                                                                          // 1098\n\t\treturn !div.getElementsByTagName(\"*\").length;                                                                      // 1099\n\t});                                                                                                                 // 1100\n                                                                                                                     // 1101\n\t// Check if getElementsByClassName can be trusted                                                                   // 1102\n\tsupport.getElementsByClassName = rnative.test( doc.getElementsByClassName ) && assert(function( div ) {             // 1103\n\t\tdiv.innerHTML = \"<div class='a'></div><div class='a i'></div>\";                                                    // 1104\n                                                                                                                     // 1105\n\t\t// Support: Safari<4                                                                                               // 1106\n\t\t// Catch class over-caching                                                                                        // 1107\n\t\tdiv.firstChild.className = \"i\";                                                                                    // 1108\n\t\t// Support: Opera<10                                                                                               // 1109\n\t\t// Catch gEBCN failure to find non-leading classes                                                                 // 1110\n\t\treturn div.getElementsByClassName(\"i\").length === 2;                                                               // 1111\n\t});                                                                                                                 // 1112\n                                                                                                                     // 1113\n\t// Support: IE<10                                                                                                   // 1114\n\t// Check if getElementById returns elements by name                                                                 // 1115\n\t// The broken getElementById methods don't pick up programatically-set names,                                       // 1116\n\t// so use a roundabout getElementsByName test                                                                       // 1117\n\tsupport.getById = assert(function( div ) {                                                                          // 1118\n\t\tdocElem.appendChild( div ).id = expando;                                                                           // 1119\n\t\treturn !doc.getElementsByName || !doc.getElementsByName( expando ).length;                                         // 1120\n\t});                                                                                                                 // 1121\n                                                                                                                     // 1122\n\t// ID find and filter                                                                                               // 1123\n\tif ( support.getById ) {                                                                                            // 1124\n\t\tExpr.find[\"ID\"] = function( id, context ) {                                                                        // 1125\n\t\t\tif ( typeof context.getElementById !== strundefined && documentIsHTML ) {                                         // 1126\n\t\t\t\tvar m = context.getElementById( id );                                                                            // 1127\n\t\t\t\t// Check parentNode to catch when Blackberry 4.6 returns                                                         // 1128\n\t\t\t\t// nodes that are no longer in the document #6963                                                                // 1129\n\t\t\t\treturn m && m.parentNode ? [m] : [];                                                                             // 1130\n\t\t\t}                                                                                                                 // 1131\n\t\t};                                                                                                                 // 1132\n\t\tExpr.filter[\"ID\"] = function( id ) {                                                                               // 1133\n\t\t\tvar attrId = id.replace( runescape, funescape );                                                                  // 1134\n\t\t\treturn function( elem ) {                                                                                         // 1135\n\t\t\t\treturn elem.getAttribute(\"id\") === attrId;                                                                       // 1136\n\t\t\t};                                                                                                                // 1137\n\t\t};                                                                                                                 // 1138\n\t} else {                                                                                                            // 1139\n\t\t// Support: IE6/7                                                                                                  // 1140\n\t\t// getElementById is not reliable as a find shortcut                                                               // 1141\n\t\tdelete Expr.find[\"ID\"];                                                                                            // 1142\n                                                                                                                     // 1143\n\t\tExpr.filter[\"ID\"] =  function( id ) {                                                                              // 1144\n\t\t\tvar attrId = id.replace( runescape, funescape );                                                                  // 1145\n\t\t\treturn function( elem ) {                                                                                         // 1146\n\t\t\t\tvar node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode(\"id\");                         // 1147\n\t\t\t\treturn node && node.value === attrId;                                                                            // 1148\n\t\t\t};                                                                                                                // 1149\n\t\t};                                                                                                                 // 1150\n\t}                                                                                                                   // 1151\n                                                                                                                     // 1152\n\t// Tag                                                                                                              // 1153\n\tExpr.find[\"TAG\"] = support.getElementsByTagName ?                                                                   // 1154\n\t\tfunction( tag, context ) {                                                                                         // 1155\n\t\t\tif ( typeof context.getElementsByTagName !== strundefined ) {                                                     // 1156\n\t\t\t\treturn context.getElementsByTagName( tag );                                                                      // 1157\n\t\t\t}                                                                                                                 // 1158\n\t\t} :                                                                                                                // 1159\n\t\tfunction( tag, context ) {                                                                                         // 1160\n\t\t\tvar elem,                                                                                                         // 1161\n\t\t\t\ttmp = [],                                                                                                        // 1162\n\t\t\t\ti = 0,                                                                                                           // 1163\n\t\t\t\tresults = context.getElementsByTagName( tag );                                                                   // 1164\n                                                                                                                     // 1165\n\t\t\t// Filter out possible comments                                                                                   // 1166\n\t\t\tif ( tag === \"*\" ) {                                                                                              // 1167\n\t\t\t\twhile ( (elem = results[i++]) ) {                                                                                // 1168\n\t\t\t\t\tif ( elem.nodeType === 1 ) {                                                                                    // 1169\n\t\t\t\t\t\ttmp.push( elem );                                                                                              // 1170\n\t\t\t\t\t}                                                                                                               // 1171\n\t\t\t\t}                                                                                                                // 1172\n                                                                                                                     // 1173\n\t\t\t\treturn tmp;                                                                                                      // 1174\n\t\t\t}                                                                                                                 // 1175\n\t\t\treturn results;                                                                                                   // 1176\n\t\t};                                                                                                                 // 1177\n                                                                                                                     // 1178\n\t// Class                                                                                                            // 1179\n\tExpr.find[\"CLASS\"] = support.getElementsByClassName && function( className, context ) {                             // 1180\n\t\tif ( typeof context.getElementsByClassName !== strundefined && documentIsHTML ) {                                  // 1181\n\t\t\treturn context.getElementsByClassName( className );                                                               // 1182\n\t\t}                                                                                                                  // 1183\n\t};                                                                                                                  // 1184\n                                                                                                                     // 1185\n\t/* QSA/matchesSelector                                                                                              // 1186\n\t---------------------------------------------------------------------- */                                           // 1187\n                                                                                                                     // 1188\n\t// QSA and matchesSelector support                                                                                  // 1189\n                                                                                                                     // 1190\n\t// matchesSelector(:active) reports false when true (IE9/Opera 11.5)                                                // 1191\n\trbuggyMatches = [];                                                                                                 // 1192\n                                                                                                                     // 1193\n\t// qSa(:focus) reports false when true (Chrome 21)                                                                  // 1194\n\t// We allow this because of a bug in IE8/9 that throws an error                                                     // 1195\n\t// whenever `document.activeElement` is accessed on an iframe                                                       // 1196\n\t// So, we allow :focus to pass through QSA all the time to avoid the IE error                                       // 1197\n\t// See http://bugs.jquery.com/ticket/13378                                                                          // 1198\n\trbuggyQSA = [];                                                                                                     // 1199\n                                                                                                                     // 1200\n\tif ( (support.qsa = rnative.test( doc.querySelectorAll )) ) {                                                       // 1201\n\t\t// Build QSA regex                                                                                                 // 1202\n\t\t// Regex strategy adopted from Diego Perini                                                                        // 1203\n\t\tassert(function( div ) {                                                                                           // 1204\n\t\t\t// Select is set to empty string on purpose                                                                       // 1205\n\t\t\t// This is to test IE's treatment of not explicitly                                                               // 1206\n\t\t\t// setting a boolean content attribute,                                                                           // 1207\n\t\t\t// since its presence should be enough                                                                            // 1208\n\t\t\t// http://bugs.jquery.com/ticket/12359                                                                            // 1209\n\t\t\tdiv.innerHTML = \"<select t=''><option selected=''></option></select>\";                                            // 1210\n                                                                                                                     // 1211\n\t\t\t// Support: IE8, Opera 10-12                                                                                      // 1212\n\t\t\t// Nothing should be selected when empty strings follow ^= or $= or *=                                            // 1213\n\t\t\tif ( div.querySelectorAll(\"[t^='']\").length ) {                                                                   // 1214\n\t\t\t\trbuggyQSA.push( \"[*^$]=\" + whitespace + \"*(?:''|\\\"\\\")\" );                                                        // 1215\n\t\t\t}                                                                                                                 // 1216\n                                                                                                                     // 1217\n\t\t\t// Support: IE8                                                                                                   // 1218\n\t\t\t// Boolean attributes and \"value\" are not treated correctly                                                       // 1219\n\t\t\tif ( !div.querySelectorAll(\"[selected]\").length ) {                                                               // 1220\n\t\t\t\trbuggyQSA.push( \"\\\\[\" + whitespace + \"*(?:value|\" + booleans + \")\" );                                            // 1221\n\t\t\t}                                                                                                                 // 1222\n                                                                                                                     // 1223\n\t\t\t// Webkit/Opera - :checked should return selected option elements                                                 // 1224\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked                                                 // 1225\n\t\t\t// IE8 throws error here and will not see later tests                                                             // 1226\n\t\t\tif ( !div.querySelectorAll(\":checked\").length ) {                                                                 // 1227\n\t\t\t\trbuggyQSA.push(\":checked\");                                                                                      // 1228\n\t\t\t}                                                                                                                 // 1229\n\t\t});                                                                                                                // 1230\n                                                                                                                     // 1231\n\t\tassert(function( div ) {                                                                                           // 1232\n\t\t\t// Support: Windows 8 Native Apps                                                                                 // 1233\n\t\t\t// The type and name attributes are restricted during .innerHTML assignment                                       // 1234\n\t\t\tvar input = doc.createElement(\"input\");                                                                           // 1235\n\t\t\tinput.setAttribute( \"type\", \"hidden\" );                                                                           // 1236\n\t\t\tdiv.appendChild( input ).setAttribute( \"name\", \"D\" );                                                             // 1237\n                                                                                                                     // 1238\n\t\t\t// Support: IE8                                                                                                   // 1239\n\t\t\t// Enforce case-sensitivity of name attribute                                                                     // 1240\n\t\t\tif ( div.querySelectorAll(\"[name=d]\").length ) {                                                                  // 1241\n\t\t\t\trbuggyQSA.push( \"name\" + whitespace + \"*[*^$|!~]?=\" );                                                           // 1242\n\t\t\t}                                                                                                                 // 1243\n                                                                                                                     // 1244\n\t\t\t// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)                            // 1245\n\t\t\t// IE8 throws error here and will not see later tests                                                             // 1246\n\t\t\tif ( !div.querySelectorAll(\":enabled\").length ) {                                                                 // 1247\n\t\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );                                                                       // 1248\n\t\t\t}                                                                                                                 // 1249\n                                                                                                                     // 1250\n\t\t\t// Opera 10-11 does not throw on post-comma invalid pseudos                                                       // 1251\n\t\t\tdiv.querySelectorAll(\"*,:x\");                                                                                     // 1252\n\t\t\trbuggyQSA.push(\",.*:\");                                                                                           // 1253\n\t\t});                                                                                                                // 1254\n\t}                                                                                                                   // 1255\n                                                                                                                     // 1256\n\tif ( (support.matchesSelector = rnative.test( (matches = docElem.webkitMatchesSelector ||                           // 1257\n\t\tdocElem.mozMatchesSelector ||                                                                                      // 1258\n\t\tdocElem.oMatchesSelector ||                                                                                        // 1259\n\t\tdocElem.msMatchesSelector) )) ) {                                                                                  // 1260\n                                                                                                                     // 1261\n\t\tassert(function( div ) {                                                                                           // 1262\n\t\t\t// Check to see if it's possible to do matchesSelector                                                            // 1263\n\t\t\t// on a disconnected node (IE 9)                                                                                  // 1264\n\t\t\tsupport.disconnectedMatch = matches.call( div, \"div\" );                                                           // 1265\n                                                                                                                     // 1266\n\t\t\t// This should fail with an exception                                                                             // 1267\n\t\t\t// Gecko does not error, returns false instead                                                                    // 1268\n\t\t\tmatches.call( div, \"[s!='']:x\" );                                                                                 // 1269\n\t\t\trbuggyMatches.push( \"!=\", pseudos );                                                                              // 1270\n\t\t});                                                                                                                // 1271\n\t}                                                                                                                   // 1272\n                                                                                                                     // 1273\n\trbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join(\"|\") );                                                  // 1274\n\trbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join(\"|\") );                                      // 1275\n                                                                                                                     // 1276\n\t/* Contains                                                                                                         // 1277\n\t---------------------------------------------------------------------- */                                           // 1278\n\thasCompare = rnative.test( docElem.compareDocumentPosition );                                                       // 1279\n                                                                                                                     // 1280\n\t// Element contains another                                                                                         // 1281\n\t// Purposefully does not implement inclusive descendent                                                             // 1282\n\t// As in, an element does not contain itself                                                                        // 1283\n\tcontains = hasCompare || rnative.test( docElem.contains ) ?                                                         // 1284\n\t\tfunction( a, b ) {                                                                                                 // 1285\n\t\t\tvar adown = a.nodeType === 9 ? a.documentElement : a,                                                             // 1286\n\t\t\t\tbup = b && b.parentNode;                                                                                         // 1287\n\t\t\treturn a === bup || !!( bup && bup.nodeType === 1 && (                                                            // 1288\n\t\t\t\tadown.contains ?                                                                                                 // 1289\n\t\t\t\t\tadown.contains( bup ) :                                                                                         // 1290\n\t\t\t\t\ta.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16                                              // 1291\n\t\t\t));                                                                                                               // 1292\n\t\t} :                                                                                                                // 1293\n\t\tfunction( a, b ) {                                                                                                 // 1294\n\t\t\tif ( b ) {                                                                                                        // 1295\n\t\t\t\twhile ( (b = b.parentNode) ) {                                                                                   // 1296\n\t\t\t\t\tif ( b === a ) {                                                                                                // 1297\n\t\t\t\t\t\treturn true;                                                                                                   // 1298\n\t\t\t\t\t}                                                                                                               // 1299\n\t\t\t\t}                                                                                                                // 1300\n\t\t\t}                                                                                                                 // 1301\n\t\t\treturn false;                                                                                                     // 1302\n\t\t};                                                                                                                 // 1303\n                                                                                                                     // 1304\n\t/* Sorting                                                                                                          // 1305\n\t---------------------------------------------------------------------- */                                           // 1306\n                                                                                                                     // 1307\n\t// Document order sorting                                                                                           // 1308\n\tsortOrder = hasCompare ?                                                                                            // 1309\n\tfunction( a, b ) {                                                                                                  // 1310\n                                                                                                                     // 1311\n\t\t// Flag for duplicate removal                                                                                      // 1312\n\t\tif ( a === b ) {                                                                                                   // 1313\n\t\t\thasDuplicate = true;                                                                                              // 1314\n\t\t\treturn 0;                                                                                                         // 1315\n\t\t}                                                                                                                  // 1316\n                                                                                                                     // 1317\n\t\t// Sort on method existence if only one input has compareDocumentPosition                                          // 1318\n\t\tvar compare = !a.compareDocumentPosition - !b.compareDocumentPosition;                                             // 1319\n\t\tif ( compare ) {                                                                                                   // 1320\n\t\t\treturn compare;                                                                                                   // 1321\n\t\t}                                                                                                                  // 1322\n                                                                                                                     // 1323\n\t\t// Calculate position if both inputs belong to the same document                                                   // 1324\n\t\tcompare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?                                                  // 1325\n\t\t\ta.compareDocumentPosition( b ) :                                                                                  // 1326\n                                                                                                                     // 1327\n\t\t\t// Otherwise we know they are disconnected                                                                        // 1328\n\t\t\t1;                                                                                                                // 1329\n                                                                                                                     // 1330\n\t\t// Disconnected nodes                                                                                              // 1331\n\t\tif ( compare & 1 ||                                                                                                // 1332\n\t\t\t(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {                                         // 1333\n                                                                                                                     // 1334\n\t\t\t// Choose the first element that is related to our preferred document                                             // 1335\n\t\t\tif ( a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {                               // 1336\n\t\t\t\treturn -1;                                                                                                       // 1337\n\t\t\t}                                                                                                                 // 1338\n\t\t\tif ( b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {                               // 1339\n\t\t\t\treturn 1;                                                                                                        // 1340\n\t\t\t}                                                                                                                 // 1341\n                                                                                                                     // 1342\n\t\t\t// Maintain original order                                                                                        // 1343\n\t\t\treturn sortInput ?                                                                                                // 1344\n\t\t\t\t( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :                                                // 1345\n\t\t\t\t0;                                                                                                               // 1346\n\t\t}                                                                                                                  // 1347\n                                                                                                                     // 1348\n\t\treturn compare & 4 ? -1 : 1;                                                                                       // 1349\n\t} :                                                                                                                 // 1350\n\tfunction( a, b ) {                                                                                                  // 1351\n\t\t// Exit early if the nodes are identical                                                                           // 1352\n\t\tif ( a === b ) {                                                                                                   // 1353\n\t\t\thasDuplicate = true;                                                                                              // 1354\n\t\t\treturn 0;                                                                                                         // 1355\n\t\t}                                                                                                                  // 1356\n                                                                                                                     // 1357\n\t\tvar cur,                                                                                                           // 1358\n\t\t\ti = 0,                                                                                                            // 1359\n\t\t\taup = a.parentNode,                                                                                               // 1360\n\t\t\tbup = b.parentNode,                                                                                               // 1361\n\t\t\tap = [ a ],                                                                                                       // 1362\n\t\t\tbp = [ b ];                                                                                                       // 1363\n                                                                                                                     // 1364\n\t\t// Parentless nodes are either documents or disconnected                                                           // 1365\n\t\tif ( !aup || !bup ) {                                                                                              // 1366\n\t\t\treturn a === doc ? -1 :                                                                                           // 1367\n\t\t\t\tb === doc ? 1 :                                                                                                  // 1368\n\t\t\t\taup ? -1 :                                                                                                       // 1369\n\t\t\t\tbup ? 1 :                                                                                                        // 1370\n\t\t\t\tsortInput ?                                                                                                      // 1371\n\t\t\t\t( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :                                                // 1372\n\t\t\t\t0;                                                                                                               // 1373\n                                                                                                                     // 1374\n\t\t// If the nodes are siblings, we can do a quick check                                                              // 1375\n\t\t} else if ( aup === bup ) {                                                                                        // 1376\n\t\t\treturn siblingCheck( a, b );                                                                                      // 1377\n\t\t}                                                                                                                  // 1378\n                                                                                                                     // 1379\n\t\t// Otherwise we need full lists of their ancestors for comparison                                                  // 1380\n\t\tcur = a;                                                                                                           // 1381\n\t\twhile ( (cur = cur.parentNode) ) {                                                                                 // 1382\n\t\t\tap.unshift( cur );                                                                                                // 1383\n\t\t}                                                                                                                  // 1384\n\t\tcur = b;                                                                                                           // 1385\n\t\twhile ( (cur = cur.parentNode) ) {                                                                                 // 1386\n\t\t\tbp.unshift( cur );                                                                                                // 1387\n\t\t}                                                                                                                  // 1388\n                                                                                                                     // 1389\n\t\t// Walk down the tree looking for a discrepancy                                                                    // 1390\n\t\twhile ( ap[i] === bp[i] ) {                                                                                        // 1391\n\t\t\ti++;                                                                                                              // 1392\n\t\t}                                                                                                                  // 1393\n                                                                                                                     // 1394\n\t\treturn i ?                                                                                                         // 1395\n\t\t\t// Do a sibling check if the nodes have a common ancestor                                                         // 1396\n\t\t\tsiblingCheck( ap[i], bp[i] ) :                                                                                    // 1397\n                                                                                                                     // 1398\n\t\t\t// Otherwise nodes in our document sort first                                                                     // 1399\n\t\t\tap[i] === preferredDoc ? -1 :                                                                                     // 1400\n\t\t\tbp[i] === preferredDoc ? 1 :                                                                                      // 1401\n\t\t\t0;                                                                                                                // 1402\n\t};                                                                                                                  // 1403\n                                                                                                                     // 1404\n\treturn doc;                                                                                                         // 1405\n};                                                                                                                   // 1406\n                                                                                                                     // 1407\nSizzle.matches = function( expr, elements ) {                                                                        // 1408\n\treturn Sizzle( expr, null, null, elements );                                                                        // 1409\n};                                                                                                                   // 1410\n                                                                                                                     // 1411\nSizzle.matchesSelector = function( elem, expr ) {                                                                    // 1412\n\t// Set document vars if needed                                                                                      // 1413\n\tif ( ( elem.ownerDocument || elem ) !== document ) {                                                                // 1414\n\t\tsetDocument( elem );                                                                                               // 1415\n\t}                                                                                                                   // 1416\n                                                                                                                     // 1417\n\t// Make sure that attribute selectors are quoted                                                                    // 1418\n\texpr = expr.replace( rattributeQuotes, \"='$1']\" );                                                                  // 1419\n                                                                                                                     // 1420\n\tif ( support.matchesSelector && documentIsHTML &&                                                                   // 1421\n\t\t( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&                                                               // 1422\n\t\t( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {                                                                  // 1423\n                                                                                                                     // 1424\n\t\ttry {                                                                                                              // 1425\n\t\t\tvar ret = matches.call( elem, expr );                                                                             // 1426\n                                                                                                                     // 1427\n\t\t\t// IE 9's matchesSelector returns false on disconnected nodes                                                     // 1428\n\t\t\tif ( ret || support.disconnectedMatch ||                                                                          // 1429\n\t\t\t\t\t// As well, disconnected nodes are said to be in a document                                                     // 1430\n\t\t\t\t\t// fragment in IE 9                                                                                             // 1431\n\t\t\t\t\telem.document && elem.document.nodeType !== 11 ) {                                                              // 1432\n\t\t\t\treturn ret;                                                                                                      // 1433\n\t\t\t}                                                                                                                 // 1434\n\t\t} catch(e) {}                                                                                                      // 1435\n\t}                                                                                                                   // 1436\n                                                                                                                     // 1437\n\treturn Sizzle( expr, document, null, [elem] ).length > 0;                                                           // 1438\n};                                                                                                                   // 1439\n                                                                                                                     // 1440\nSizzle.contains = function( context, elem ) {                                                                        // 1441\n\t// Set document vars if needed                                                                                      // 1442\n\tif ( ( context.ownerDocument || context ) !== document ) {                                                          // 1443\n\t\tsetDocument( context );                                                                                            // 1444\n\t}                                                                                                                   // 1445\n\treturn contains( context, elem );                                                                                   // 1446\n};                                                                                                                   // 1447\n                                                                                                                     // 1448\nSizzle.attr = function( elem, name ) {                                                                               // 1449\n\t// Set document vars if needed                                                                                      // 1450\n\tif ( ( elem.ownerDocument || elem ) !== document ) {                                                                // 1451\n\t\tsetDocument( elem );                                                                                               // 1452\n\t}                                                                                                                   // 1453\n                                                                                                                     // 1454\n\tvar fn = Expr.attrHandle[ name.toLowerCase() ],                                                                     // 1455\n\t\t// Don't get fooled by Object.prototype properties (jQuery #13807)                                                 // 1456\n\t\tval = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?                                                   // 1457\n\t\t\tfn( elem, name, !documentIsHTML ) :                                                                               // 1458\n\t\t\tundefined;                                                                                                        // 1459\n                                                                                                                     // 1460\n\treturn val !== undefined ?                                                                                          // 1461\n\t\tval :                                                                                                              // 1462\n\t\tsupport.attributes || !documentIsHTML ?                                                                            // 1463\n\t\t\telem.getAttribute( name ) :                                                                                       // 1464\n\t\t\t(val = elem.getAttributeNode(name)) && val.specified ?                                                            // 1465\n\t\t\t\tval.value :                                                                                                      // 1466\n\t\t\t\tnull;                                                                                                            // 1467\n};                                                                                                                   // 1468\n                                                                                                                     // 1469\nSizzle.error = function( msg ) {                                                                                     // 1470\n\tthrow new Error( \"Syntax error, unrecognized expression: \" + msg );                                                 // 1471\n};                                                                                                                   // 1472\n                                                                                                                     // 1473\n/**                                                                                                                  // 1474\n * Document sorting and removing duplicates                                                                          // 1475\n * @param {ArrayLike} results                                                                                        // 1476\n */                                                                                                                  // 1477\nSizzle.uniqueSort = function( results ) {                                                                            // 1478\n\tvar elem,                                                                                                           // 1479\n\t\tduplicates = [],                                                                                                   // 1480\n\t\tj = 0,                                                                                                             // 1481\n\t\ti = 0;                                                                                                             // 1482\n                                                                                                                     // 1483\n\t// Unless we *know* we can detect duplicates, assume their presence                                                 // 1484\n\thasDuplicate = !support.detectDuplicates;                                                                           // 1485\n\tsortInput = !support.sortStable && results.slice( 0 );                                                              // 1486\n\tresults.sort( sortOrder );                                                                                          // 1487\n                                                                                                                     // 1488\n\tif ( hasDuplicate ) {                                                                                               // 1489\n\t\twhile ( (elem = results[i++]) ) {                                                                                  // 1490\n\t\t\tif ( elem === results[ i ] ) {                                                                                    // 1491\n\t\t\t\tj = duplicates.push( i );                                                                                        // 1492\n\t\t\t}                                                                                                                 // 1493\n\t\t}                                                                                                                  // 1494\n\t\twhile ( j-- ) {                                                                                                    // 1495\n\t\t\tresults.splice( duplicates[ j ], 1 );                                                                             // 1496\n\t\t}                                                                                                                  // 1497\n\t}                                                                                                                   // 1498\n                                                                                                                     // 1499\n\t// Clear input after sorting to release objects                                                                     // 1500\n\t// See https://github.com/jquery/sizzle/pull/225                                                                    // 1501\n\tsortInput = null;                                                                                                   // 1502\n                                                                                                                     // 1503\n\treturn results;                                                                                                     // 1504\n};                                                                                                                   // 1505\n                                                                                                                     // 1506\n/**                                                                                                                  // 1507\n * Utility function for retrieving the text value of an array of DOM nodes                                           // 1508\n * @param {Array|Element} elem                                                                                       // 1509\n */                                                                                                                  // 1510\ngetText = Sizzle.getText = function( elem ) {                                                                        // 1511\n\tvar node,                                                                                                           // 1512\n\t\tret = \"\",                                                                                                          // 1513\n\t\ti = 0,                                                                                                             // 1514\n\t\tnodeType = elem.nodeType;                                                                                          // 1515\n                                                                                                                     // 1516\n\tif ( !nodeType ) {                                                                                                  // 1517\n\t\t// If no nodeType, this is expected to be an array                                                                 // 1518\n\t\twhile ( (node = elem[i++]) ) {                                                                                     // 1519\n\t\t\t// Do not traverse comment nodes                                                                                  // 1520\n\t\t\tret += getText( node );                                                                                           // 1521\n\t\t}                                                                                                                  // 1522\n\t} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {                                                 // 1523\n\t\t// Use textContent for elements                                                                                    // 1524\n\t\t// innerText usage removed for consistency of new lines (jQuery #11153)                                            // 1525\n\t\tif ( typeof elem.textContent === \"string\" ) {                                                                      // 1526\n\t\t\treturn elem.textContent;                                                                                          // 1527\n\t\t} else {                                                                                                           // 1528\n\t\t\t// Traverse its children                                                                                          // 1529\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {                                                   // 1530\n\t\t\t\tret += getText( elem );                                                                                          // 1531\n\t\t\t}                                                                                                                 // 1532\n\t\t}                                                                                                                  // 1533\n\t} else if ( nodeType === 3 || nodeType === 4 ) {                                                                    // 1534\n\t\treturn elem.nodeValue;                                                                                             // 1535\n\t}                                                                                                                   // 1536\n\t// Do not include comment or processing instruction nodes                                                           // 1537\n                                                                                                                     // 1538\n\treturn ret;                                                                                                         // 1539\n};                                                                                                                   // 1540\n                                                                                                                     // 1541\nExpr = Sizzle.selectors = {                                                                                          // 1542\n                                                                                                                     // 1543\n\t// Can be adjusted by the user                                                                                      // 1544\n\tcacheLength: 50,                                                                                                    // 1545\n                                                                                                                     // 1546\n\tcreatePseudo: markFunction,                                                                                         // 1547\n                                                                                                                     // 1548\n\tmatch: matchExpr,                                                                                                   // 1549\n                                                                                                                     // 1550\n\tattrHandle: {},                                                                                                     // 1551\n                                                                                                                     // 1552\n\tfind: {},                                                                                                           // 1553\n                                                                                                                     // 1554\n\trelative: {                                                                                                         // 1555\n\t\t\">\": { dir: \"parentNode\", first: true },                                                                           // 1556\n\t\t\" \": { dir: \"parentNode\" },                                                                                        // 1557\n\t\t\"+\": { dir: \"previousSibling\", first: true },                                                                      // 1558\n\t\t\"~\": { dir: \"previousSibling\" }                                                                                    // 1559\n\t},                                                                                                                  // 1560\n                                                                                                                     // 1561\n\tpreFilter: {                                                                                                        // 1562\n\t\t\"ATTR\": function( match ) {                                                                                        // 1563\n\t\t\tmatch[1] = match[1].replace( runescape, funescape );                                                              // 1564\n                                                                                                                     // 1565\n\t\t\t// Move the given value to match[3] whether quoted or unquoted                                                    // 1566\n\t\t\tmatch[3] = ( match[4] || match[5] || \"\" ).replace( runescape, funescape );                                        // 1567\n                                                                                                                     // 1568\n\t\t\tif ( match[2] === \"~=\" ) {                                                                                        // 1569\n\t\t\t\tmatch[3] = \" \" + match[3] + \" \";                                                                                 // 1570\n\t\t\t}                                                                                                                 // 1571\n                                                                                                                     // 1572\n\t\t\treturn match.slice( 0, 4 );                                                                                       // 1573\n\t\t},                                                                                                                 // 1574\n                                                                                                                     // 1575\n\t\t\"CHILD\": function( match ) {                                                                                       // 1576\n\t\t\t/* matches from matchExpr[\"CHILD\"]                                                                                // 1577\n\t\t\t\t1 type (only|nth|...)                                                                                            // 1578\n\t\t\t\t2 what (child|of-type)                                                                                           // 1579\n\t\t\t\t3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)                                                                     // 1580\n\t\t\t\t4 xn-component of xn+y argument ([+-]?\\d*n|)                                                                     // 1581\n\t\t\t\t5 sign of xn-component                                                                                           // 1582\n\t\t\t\t6 x of xn-component                                                                                              // 1583\n\t\t\t\t7 sign of y-component                                                                                            // 1584\n\t\t\t\t8 y of y-component                                                                                               // 1585\n\t\t\t*/                                                                                                                // 1586\n\t\t\tmatch[1] = match[1].toLowerCase();                                                                                // 1587\n                                                                                                                     // 1588\n\t\t\tif ( match[1].slice( 0, 3 ) === \"nth\" ) {                                                                         // 1589\n\t\t\t\t// nth-* requires argument                                                                                       // 1590\n\t\t\t\tif ( !match[3] ) {                                                                                               // 1591\n\t\t\t\t\tSizzle.error( match[0] );                                                                                       // 1592\n\t\t\t\t}                                                                                                                // 1593\n                                                                                                                     // 1594\n\t\t\t\t// numeric x and y parameters for Expr.filter.CHILD                                                              // 1595\n\t\t\t\t// remember that false/true cast respectively to 0/1                                                             // 1596\n\t\t\t\tmatch[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === \"even\" || match[3] === \"odd\" ) );       // 1597\n\t\t\t\tmatch[5] = +( ( match[7] + match[8] ) || match[3] === \"odd\" );                                                   // 1598\n                                                                                                                     // 1599\n\t\t\t// other types prohibit arguments                                                                                 // 1600\n\t\t\t} else if ( match[3] ) {                                                                                          // 1601\n\t\t\t\tSizzle.error( match[0] );                                                                                        // 1602\n\t\t\t}                                                                                                                 // 1603\n                                                                                                                     // 1604\n\t\t\treturn match;                                                                                                     // 1605\n\t\t},                                                                                                                 // 1606\n                                                                                                                     // 1607\n\t\t\"PSEUDO\": function( match ) {                                                                                      // 1608\n\t\t\tvar excess,                                                                                                       // 1609\n\t\t\t\tunquoted = !match[5] && match[2];                                                                                // 1610\n                                                                                                                     // 1611\n\t\t\tif ( matchExpr[\"CHILD\"].test( match[0] ) ) {                                                                      // 1612\n\t\t\t\treturn null;                                                                                                     // 1613\n\t\t\t}                                                                                                                 // 1614\n                                                                                                                     // 1615\n\t\t\t// Accept quoted arguments as-is                                                                                  // 1616\n\t\t\tif ( match[3] && match[4] !== undefined ) {                                                                       // 1617\n\t\t\t\tmatch[2] = match[4];                                                                                             // 1618\n                                                                                                                     // 1619\n\t\t\t// Strip excess characters from unquoted arguments                                                                // 1620\n\t\t\t} else if ( unquoted && rpseudo.test( unquoted ) &&                                                               // 1621\n\t\t\t\t// Get excess from tokenize (recursively)                                                                        // 1622\n\t\t\t\t(excess = tokenize( unquoted, true )) &&                                                                         // 1623\n\t\t\t\t// advance to the next closing parenthesis                                                                       // 1624\n\t\t\t\t(excess = unquoted.indexOf( \")\", unquoted.length - excess ) - unquoted.length) ) {                               // 1625\n                                                                                                                     // 1626\n\t\t\t\t// excess is a negative index                                                                                    // 1627\n\t\t\t\tmatch[0] = match[0].slice( 0, excess );                                                                          // 1628\n\t\t\t\tmatch[2] = unquoted.slice( 0, excess );                                                                          // 1629\n\t\t\t}                                                                                                                 // 1630\n                                                                                                                     // 1631\n\t\t\t// Return only captures needed by the pseudo filter method (type and argument)                                    // 1632\n\t\t\treturn match.slice( 0, 3 );                                                                                       // 1633\n\t\t}                                                                                                                  // 1634\n\t},                                                                                                                  // 1635\n                                                                                                                     // 1636\n\tfilter: {                                                                                                           // 1637\n                                                                                                                     // 1638\n\t\t\"TAG\": function( nodeNameSelector ) {                                                                              // 1639\n\t\t\tvar nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();                                    // 1640\n\t\t\treturn nodeNameSelector === \"*\" ?                                                                                 // 1641\n\t\t\t\tfunction() { return true; } :                                                                                    // 1642\n\t\t\t\tfunction( elem ) {                                                                                               // 1643\n\t\t\t\t\treturn elem.nodeName && elem.nodeName.toLowerCase() === nodeName;                                               // 1644\n\t\t\t\t};                                                                                                               // 1645\n\t\t},                                                                                                                 // 1646\n                                                                                                                     // 1647\n\t\t\"CLASS\": function( className ) {                                                                                   // 1648\n\t\t\tvar pattern = classCache[ className + \" \" ];                                                                      // 1649\n                                                                                                                     // 1650\n\t\t\treturn pattern ||                                                                                                 // 1651\n\t\t\t\t(pattern = new RegExp( \"(^|\" + whitespace + \")\" + className + \"(\" + whitespace + \"|$)\" )) &&                     // 1652\n\t\t\t\tclassCache( className, function( elem ) {                                                                        // 1653\n\t\t\t\t\treturn pattern.test( typeof elem.className === \"string\" && elem.className || typeof elem.getAttribute !== strundefined && elem.getAttribute(\"class\") || \"\" );\n\t\t\t\t});                                                                                                              // 1655\n\t\t},                                                                                                                 // 1656\n                                                                                                                     // 1657\n\t\t\"ATTR\": function( name, operator, check ) {                                                                        // 1658\n\t\t\treturn function( elem ) {                                                                                         // 1659\n\t\t\t\tvar result = Sizzle.attr( elem, name );                                                                          // 1660\n                                                                                                                     // 1661\n\t\t\t\tif ( result == null ) {                                                                                          // 1662\n\t\t\t\t\treturn operator === \"!=\";                                                                                       // 1663\n\t\t\t\t}                                                                                                                // 1664\n\t\t\t\tif ( !operator ) {                                                                                               // 1665\n\t\t\t\t\treturn true;                                                                                                    // 1666\n\t\t\t\t}                                                                                                                // 1667\n                                                                                                                     // 1668\n\t\t\t\tresult += \"\";                                                                                                    // 1669\n                                                                                                                     // 1670\n\t\t\t\treturn operator === \"=\" ? result === check :                                                                     // 1671\n\t\t\t\t\toperator === \"!=\" ? result !== check :                                                                          // 1672\n\t\t\t\t\toperator === \"^=\" ? check && result.indexOf( check ) === 0 :                                                    // 1673\n\t\t\t\t\toperator === \"*=\" ? check && result.indexOf( check ) > -1 :                                                     // 1674\n\t\t\t\t\toperator === \"$=\" ? check && result.slice( -check.length ) === check :                                          // 1675\n\t\t\t\t\toperator === \"~=\" ? ( \" \" + result + \" \" ).indexOf( check ) > -1 :                                              // 1676\n\t\t\t\t\toperator === \"|=\" ? result === check || result.slice( 0, check.length + 1 ) === check + \"-\" :                   // 1677\n\t\t\t\t\tfalse;                                                                                                          // 1678\n\t\t\t};                                                                                                                // 1679\n\t\t},                                                                                                                 // 1680\n                                                                                                                     // 1681\n\t\t\"CHILD\": function( type, what, argument, first, last ) {                                                           // 1682\n\t\t\tvar simple = type.slice( 0, 3 ) !== \"nth\",                                                                        // 1683\n\t\t\t\tforward = type.slice( -4 ) !== \"last\",                                                                           // 1684\n\t\t\t\tofType = what === \"of-type\";                                                                                     // 1685\n                                                                                                                     // 1686\n\t\t\treturn first === 1 && last === 0 ?                                                                                // 1687\n                                                                                                                     // 1688\n\t\t\t\t// Shortcut for :nth-*(n)                                                                                        // 1689\n\t\t\t\tfunction( elem ) {                                                                                               // 1690\n\t\t\t\t\treturn !!elem.parentNode;                                                                                       // 1691\n\t\t\t\t} :                                                                                                              // 1692\n                                                                                                                     // 1693\n\t\t\t\tfunction( elem, context, xml ) {                                                                                 // 1694\n\t\t\t\t\tvar cache, outerCache, node, diff, nodeIndex, start,                                                            // 1695\n\t\t\t\t\t\tdir = simple !== forward ? \"nextSibling\" : \"previousSibling\",                                                  // 1696\n\t\t\t\t\t\tparent = elem.parentNode,                                                                                      // 1697\n\t\t\t\t\t\tname = ofType && elem.nodeName.toLowerCase(),                                                                  // 1698\n\t\t\t\t\t\tuseCache = !xml && !ofType;                                                                                    // 1699\n                                                                                                                     // 1700\n\t\t\t\t\tif ( parent ) {                                                                                                 // 1701\n                                                                                                                     // 1702\n\t\t\t\t\t\t// :(first|last|only)-(child|of-type)                                                                          // 1703\n\t\t\t\t\t\tif ( simple ) {                                                                                                // 1704\n\t\t\t\t\t\t\twhile ( dir ) {                                                                                               // 1705\n\t\t\t\t\t\t\t\tnode = elem;                                                                                                 // 1706\n\t\t\t\t\t\t\t\twhile ( (node = node[ dir ]) ) {                                                                             // 1707\n\t\t\t\t\t\t\t\t\tif ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {                                // 1708\n\t\t\t\t\t\t\t\t\t\treturn false;                                                                                              // 1709\n\t\t\t\t\t\t\t\t\t}                                                                                                           // 1710\n\t\t\t\t\t\t\t\t}                                                                                                            // 1711\n\t\t\t\t\t\t\t\t// Reverse direction for :only-* (if we haven't yet done so)                                                 // 1712\n\t\t\t\t\t\t\t\tstart = dir = type === \"only\" && !start && \"nextSibling\";                                                    // 1713\n\t\t\t\t\t\t\t}                                                                                                             // 1714\n\t\t\t\t\t\t\treturn true;                                                                                                  // 1715\n\t\t\t\t\t\t}                                                                                                              // 1716\n                                                                                                                     // 1717\n\t\t\t\t\t\tstart = [ forward ? parent.firstChild : parent.lastChild ];                                                    // 1718\n                                                                                                                     // 1719\n\t\t\t\t\t\t// non-xml :nth-child(...) stores cache data on `parent`                                                       // 1720\n\t\t\t\t\t\tif ( forward && useCache ) {                                                                                   // 1721\n\t\t\t\t\t\t\t// Seek `elem` from a previously-cached index                                                                 // 1722\n\t\t\t\t\t\t\touterCache = parent[ expando ] || (parent[ expando ] = {});                                                   // 1723\n\t\t\t\t\t\t\tcache = outerCache[ type ] || [];                                                                             // 1724\n\t\t\t\t\t\t\tnodeIndex = cache[0] === dirruns && cache[1];                                                                 // 1725\n\t\t\t\t\t\t\tdiff = cache[0] === dirruns && cache[2];                                                                      // 1726\n\t\t\t\t\t\t\tnode = nodeIndex && parent.childNodes[ nodeIndex ];                                                           // 1727\n                                                                                                                     // 1728\n\t\t\t\t\t\t\twhile ( (node = ++nodeIndex && node && node[ dir ] ||                                                         // 1729\n                                                                                                                     // 1730\n\t\t\t\t\t\t\t\t// Fallback to seeking `elem` from the start                                                                 // 1731\n\t\t\t\t\t\t\t\t(diff = nodeIndex = 0) || start.pop()) ) {                                                                   // 1732\n                                                                                                                     // 1733\n\t\t\t\t\t\t\t\t// When found, cache indexes on `parent` and break                                                           // 1734\n\t\t\t\t\t\t\t\tif ( node.nodeType === 1 && ++diff && node === elem ) {                                                      // 1735\n\t\t\t\t\t\t\t\t\touterCache[ type ] = [ dirruns, nodeIndex, diff ];                                                          // 1736\n\t\t\t\t\t\t\t\t\tbreak;                                                                                                      // 1737\n\t\t\t\t\t\t\t\t}                                                                                                            // 1738\n\t\t\t\t\t\t\t}                                                                                                             // 1739\n                                                                                                                     // 1740\n\t\t\t\t\t\t// Use previously-cached element index if available                                                            // 1741\n\t\t\t\t\t\t} else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {\n\t\t\t\t\t\t\tdiff = cache[1];                                                                                              // 1743\n                                                                                                                     // 1744\n\t\t\t\t\t\t// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)                                    // 1745\n\t\t\t\t\t\t} else {                                                                                                       // 1746\n\t\t\t\t\t\t\t// Use the same loop as above to seek `elem` from the start                                                   // 1747\n\t\t\t\t\t\t\twhile ( (node = ++nodeIndex && node && node[ dir ] ||                                                         // 1748\n\t\t\t\t\t\t\t\t(diff = nodeIndex = 0) || start.pop()) ) {                                                                   // 1749\n                                                                                                                     // 1750\n\t\t\t\t\t\t\t\tif ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {                   // 1751\n\t\t\t\t\t\t\t\t\t// Cache the index of each encountered element                                                              // 1752\n\t\t\t\t\t\t\t\t\tif ( useCache ) {                                                                                           // 1753\n\t\t\t\t\t\t\t\t\t\t(node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];                                   // 1754\n\t\t\t\t\t\t\t\t\t}                                                                                                           // 1755\n                                                                                                                     // 1756\n\t\t\t\t\t\t\t\t\tif ( node === elem ) {                                                                                      // 1757\n\t\t\t\t\t\t\t\t\t\tbreak;                                                                                                     // 1758\n\t\t\t\t\t\t\t\t\t}                                                                                                           // 1759\n\t\t\t\t\t\t\t\t}                                                                                                            // 1760\n\t\t\t\t\t\t\t}                                                                                                             // 1761\n\t\t\t\t\t\t}                                                                                                              // 1762\n                                                                                                                     // 1763\n\t\t\t\t\t\t// Incorporate the offset, then check against cycle size                                                       // 1764\n\t\t\t\t\t\tdiff -= last;                                                                                                  // 1765\n\t\t\t\t\t\treturn diff === first || ( diff % first === 0 && diff / first >= 0 );                                          // 1766\n\t\t\t\t\t}                                                                                                               // 1767\n\t\t\t\t};                                                                                                               // 1768\n\t\t},                                                                                                                 // 1769\n                                                                                                                     // 1770\n\t\t\"PSEUDO\": function( pseudo, argument ) {                                                                           // 1771\n\t\t\t// pseudo-class names are case-insensitive                                                                        // 1772\n\t\t\t// http://www.w3.org/TR/selectors/#pseudo-classes                                                                 // 1773\n\t\t\t// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters                         // 1774\n\t\t\t// Remember that setFilters inherits from pseudos                                                                 // 1775\n\t\t\tvar args,                                                                                                         // 1776\n\t\t\t\tfn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||                                        // 1777\n\t\t\t\t\tSizzle.error( \"unsupported pseudo: \" + pseudo );                                                                // 1778\n                                                                                                                     // 1779\n\t\t\t// The user may use createPseudo to indicate that                                                                 // 1780\n\t\t\t// arguments are needed to create the filter function                                                             // 1781\n\t\t\t// just as Sizzle does                                                                                            // 1782\n\t\t\tif ( fn[ expando ] ) {                                                                                            // 1783\n\t\t\t\treturn fn( argument );                                                                                           // 1784\n\t\t\t}                                                                                                                 // 1785\n                                                                                                                     // 1786\n\t\t\t// But maintain support for old signatures                                                                        // 1787\n\t\t\tif ( fn.length > 1 ) {                                                                                            // 1788\n\t\t\t\targs = [ pseudo, pseudo, \"\", argument ];                                                                         // 1789\n\t\t\t\treturn Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?                                                  // 1790\n\t\t\t\t\tmarkFunction(function( seed, matches ) {                                                                        // 1791\n\t\t\t\t\t\tvar idx,                                                                                                       // 1792\n\t\t\t\t\t\t\tmatched = fn( seed, argument ),                                                                               // 1793\n\t\t\t\t\t\t\ti = matched.length;                                                                                           // 1794\n\t\t\t\t\t\twhile ( i-- ) {                                                                                                // 1795\n\t\t\t\t\t\t\tidx = indexOf.call( seed, matched[i] );                                                                       // 1796\n\t\t\t\t\t\t\tseed[ idx ] = !( matches[ idx ] = matched[i] );                                                               // 1797\n\t\t\t\t\t\t}                                                                                                              // 1798\n\t\t\t\t\t}) :                                                                                                            // 1799\n\t\t\t\t\tfunction( elem ) {                                                                                              // 1800\n\t\t\t\t\t\treturn fn( elem, 0, args );                                                                                    // 1801\n\t\t\t\t\t};                                                                                                              // 1802\n\t\t\t}                                                                                                                 // 1803\n                                                                                                                     // 1804\n\t\t\treturn fn;                                                                                                        // 1805\n\t\t}                                                                                                                  // 1806\n\t},                                                                                                                  // 1807\n                                                                                                                     // 1808\n\tpseudos: {                                                                                                          // 1809\n\t\t// Potentially complex pseudos                                                                                     // 1810\n\t\t\"not\": markFunction(function( selector ) {                                                                         // 1811\n\t\t\t// Trim the selector passed to compile                                                                            // 1812\n\t\t\t// to avoid treating leading and trailing                                                                         // 1813\n\t\t\t// spaces as combinators                                                                                          // 1814\n\t\t\tvar input = [],                                                                                                   // 1815\n\t\t\t\tresults = [],                                                                                                    // 1816\n\t\t\t\tmatcher = compile( selector.replace( rtrim, \"$1\" ) );                                                            // 1817\n                                                                                                                     // 1818\n\t\t\treturn matcher[ expando ] ?                                                                                       // 1819\n\t\t\t\tmarkFunction(function( seed, matches, context, xml ) {                                                           // 1820\n\t\t\t\t\tvar elem,                                                                                                       // 1821\n\t\t\t\t\t\tunmatched = matcher( seed, null, xml, [] ),                                                                    // 1822\n\t\t\t\t\t\ti = seed.length;                                                                                               // 1823\n                                                                                                                     // 1824\n\t\t\t\t\t// Match elements unmatched by `matcher`                                                                        // 1825\n\t\t\t\t\twhile ( i-- ) {                                                                                                 // 1826\n\t\t\t\t\t\tif ( (elem = unmatched[i]) ) {                                                                                 // 1827\n\t\t\t\t\t\t\tseed[i] = !(matches[i] = elem);                                                                               // 1828\n\t\t\t\t\t\t}                                                                                                              // 1829\n\t\t\t\t\t}                                                                                                               // 1830\n\t\t\t\t}) :                                                                                                             // 1831\n\t\t\t\tfunction( elem, context, xml ) {                                                                                 // 1832\n\t\t\t\t\tinput[0] = elem;                                                                                                // 1833\n\t\t\t\t\tmatcher( input, null, xml, results );                                                                           // 1834\n\t\t\t\t\treturn !results.pop();                                                                                          // 1835\n\t\t\t\t};                                                                                                               // 1836\n\t\t}),                                                                                                                // 1837\n                                                                                                                     // 1838\n\t\t\"has\": markFunction(function( selector ) {                                                                         // 1839\n\t\t\treturn function( elem ) {                                                                                         // 1840\n\t\t\t\treturn Sizzle( selector, elem ).length > 0;                                                                      // 1841\n\t\t\t};                                                                                                                // 1842\n\t\t}),                                                                                                                // 1843\n                                                                                                                     // 1844\n\t\t\"contains\": markFunction(function( text ) {                                                                        // 1845\n\t\t\treturn function( elem ) {                                                                                         // 1846\n\t\t\t\treturn ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;                           // 1847\n\t\t\t};                                                                                                                // 1848\n\t\t}),                                                                                                                // 1849\n                                                                                                                     // 1850\n\t\t// \"Whether an element is represented by a :lang() selector                                                        // 1851\n\t\t// is based solely on the element's language value                                                                 // 1852\n\t\t// being equal to the identifier C,                                                                                // 1853\n\t\t// or beginning with the identifier C immediately followed by \"-\".                                                 // 1854\n\t\t// The matching of C against the element's language value is performed case-insensitively.                         // 1855\n\t\t// The identifier C does not have to be a valid language name.\"                                                    // 1856\n\t\t// http://www.w3.org/TR/selectors/#lang-pseudo                                                                     // 1857\n\t\t\"lang\": markFunction( function( lang ) {                                                                           // 1858\n\t\t\t// lang value must be a valid identifier                                                                          // 1859\n\t\t\tif ( !ridentifier.test(lang || \"\") ) {                                                                            // 1860\n\t\t\t\tSizzle.error( \"unsupported lang: \" + lang );                                                                     // 1861\n\t\t\t}                                                                                                                 // 1862\n\t\t\tlang = lang.replace( runescape, funescape ).toLowerCase();                                                        // 1863\n\t\t\treturn function( elem ) {                                                                                         // 1864\n\t\t\t\tvar elemLang;                                                                                                    // 1865\n\t\t\t\tdo {                                                                                                             // 1866\n\t\t\t\t\tif ( (elemLang = documentIsHTML ?                                                                               // 1867\n\t\t\t\t\t\telem.lang :                                                                                                    // 1868\n\t\t\t\t\t\telem.getAttribute(\"xml:lang\") || elem.getAttribute(\"lang\")) ) {                                                // 1869\n                                                                                                                     // 1870\n\t\t\t\t\t\telemLang = elemLang.toLowerCase();                                                                             // 1871\n\t\t\t\t\t\treturn elemLang === lang || elemLang.indexOf( lang + \"-\" ) === 0;                                              // 1872\n\t\t\t\t\t}                                                                                                               // 1873\n\t\t\t\t} while ( (elem = elem.parentNode) && elem.nodeType === 1 );                                                     // 1874\n\t\t\t\treturn false;                                                                                                    // 1875\n\t\t\t};                                                                                                                // 1876\n\t\t}),                                                                                                                // 1877\n                                                                                                                     // 1878\n\t\t// Miscellaneous                                                                                                   // 1879\n\t\t\"target\": function( elem ) {                                                                                       // 1880\n\t\t\tvar hash = window.location && window.location.hash;                                                               // 1881\n\t\t\treturn hash && hash.slice( 1 ) === elem.id;                                                                       // 1882\n\t\t},                                                                                                                 // 1883\n                                                                                                                     // 1884\n\t\t\"root\": function( elem ) {                                                                                         // 1885\n\t\t\treturn elem === docElem;                                                                                          // 1886\n\t\t},                                                                                                                 // 1887\n                                                                                                                     // 1888\n\t\t\"focus\": function( elem ) {                                                                                        // 1889\n\t\t\treturn elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);\n\t\t},                                                                                                                 // 1891\n                                                                                                                     // 1892\n\t\t// Boolean properties                                                                                              // 1893\n\t\t\"enabled\": function( elem ) {                                                                                      // 1894\n\t\t\treturn elem.disabled === false;                                                                                   // 1895\n\t\t},                                                                                                                 // 1896\n                                                                                                                     // 1897\n\t\t\"disabled\": function( elem ) {                                                                                     // 1898\n\t\t\treturn elem.disabled === true;                                                                                    // 1899\n\t\t},                                                                                                                 // 1900\n                                                                                                                     // 1901\n\t\t\"checked\": function( elem ) {                                                                                      // 1902\n\t\t\t// In CSS3, :checked should return both checked and selected elements                                             // 1903\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked                                                 // 1904\n\t\t\tvar nodeName = elem.nodeName.toLowerCase();                                                                       // 1905\n\t\t\treturn (nodeName === \"input\" && !!elem.checked) || (nodeName === \"option\" && !!elem.selected);                    // 1906\n\t\t},                                                                                                                 // 1907\n                                                                                                                     // 1908\n\t\t\"selected\": function( elem ) {                                                                                     // 1909\n\t\t\t// Accessing this property makes selected-by-default                                                              // 1910\n\t\t\t// options in Safari work properly                                                                                // 1911\n\t\t\tif ( elem.parentNode ) {                                                                                          // 1912\n\t\t\t\telem.parentNode.selectedIndex;                                                                                   // 1913\n\t\t\t}                                                                                                                 // 1914\n                                                                                                                     // 1915\n\t\t\treturn elem.selected === true;                                                                                    // 1916\n\t\t},                                                                                                                 // 1917\n                                                                                                                     // 1918\n\t\t// Contents                                                                                                        // 1919\n\t\t\"empty\": function( elem ) {                                                                                        // 1920\n\t\t\t// http://www.w3.org/TR/selectors/#empty-pseudo                                                                   // 1921\n\t\t\t// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),                          // 1922\n\t\t\t//   but not by others (comment: 8; processing instruction: 7; etc.)                                              // 1923\n\t\t\t// nodeType < 6 works because attributes (2) do not appear as children                                            // 1924\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {                                                   // 1925\n\t\t\t\tif ( elem.nodeType < 6 ) {                                                                                       // 1926\n\t\t\t\t\treturn false;                                                                                                   // 1927\n\t\t\t\t}                                                                                                                // 1928\n\t\t\t}                                                                                                                 // 1929\n\t\t\treturn true;                                                                                                      // 1930\n\t\t},                                                                                                                 // 1931\n                                                                                                                     // 1932\n\t\t\"parent\": function( elem ) {                                                                                       // 1933\n\t\t\treturn !Expr.pseudos[\"empty\"]( elem );                                                                            // 1934\n\t\t},                                                                                                                 // 1935\n                                                                                                                     // 1936\n\t\t// Element/input types                                                                                             // 1937\n\t\t\"header\": function( elem ) {                                                                                       // 1938\n\t\t\treturn rheader.test( elem.nodeName );                                                                             // 1939\n\t\t},                                                                                                                 // 1940\n                                                                                                                     // 1941\n\t\t\"input\": function( elem ) {                                                                                        // 1942\n\t\t\treturn rinputs.test( elem.nodeName );                                                                             // 1943\n\t\t},                                                                                                                 // 1944\n                                                                                                                     // 1945\n\t\t\"button\": function( elem ) {                                                                                       // 1946\n\t\t\tvar name = elem.nodeName.toLowerCase();                                                                           // 1947\n\t\t\treturn name === \"input\" && elem.type === \"button\" || name === \"button\";                                           // 1948\n\t\t},                                                                                                                 // 1949\n                                                                                                                     // 1950\n\t\t\"text\": function( elem ) {                                                                                         // 1951\n\t\t\tvar attr;                                                                                                         // 1952\n\t\t\treturn elem.nodeName.toLowerCase() === \"input\" &&                                                                 // 1953\n\t\t\t\telem.type === \"text\" &&                                                                                          // 1954\n                                                                                                                     // 1955\n\t\t\t\t// Support: IE<8                                                                                                 // 1956\n\t\t\t\t// New HTML5 attribute values (e.g., \"search\") appear with elem.type === \"text\"                                  // 1957\n\t\t\t\t( (attr = elem.getAttribute(\"type\")) == null || attr.toLowerCase() === \"text\" );                                 // 1958\n\t\t},                                                                                                                 // 1959\n                                                                                                                     // 1960\n\t\t// Position-in-collection                                                                                          // 1961\n\t\t\"first\": createPositionalPseudo(function() {                                                                       // 1962\n\t\t\treturn [ 0 ];                                                                                                     // 1963\n\t\t}),                                                                                                                // 1964\n                                                                                                                     // 1965\n\t\t\"last\": createPositionalPseudo(function( matchIndexes, length ) {                                                  // 1966\n\t\t\treturn [ length - 1 ];                                                                                            // 1967\n\t\t}),                                                                                                                // 1968\n                                                                                                                     // 1969\n\t\t\"eq\": createPositionalPseudo(function( matchIndexes, length, argument ) {                                          // 1970\n\t\t\treturn [ argument < 0 ? argument + length : argument ];                                                           // 1971\n\t\t}),                                                                                                                // 1972\n                                                                                                                     // 1973\n\t\t\"even\": createPositionalPseudo(function( matchIndexes, length ) {                                                  // 1974\n\t\t\tvar i = 0;                                                                                                        // 1975\n\t\t\tfor ( ; i < length; i += 2 ) {                                                                                    // 1976\n\t\t\t\tmatchIndexes.push( i );                                                                                          // 1977\n\t\t\t}                                                                                                                 // 1978\n\t\t\treturn matchIndexes;                                                                                              // 1979\n\t\t}),                                                                                                                // 1980\n                                                                                                                     // 1981\n\t\t\"odd\": createPositionalPseudo(function( matchIndexes, length ) {                                                   // 1982\n\t\t\tvar i = 1;                                                                                                        // 1983\n\t\t\tfor ( ; i < length; i += 2 ) {                                                                                    // 1984\n\t\t\t\tmatchIndexes.push( i );                                                                                          // 1985\n\t\t\t}                                                                                                                 // 1986\n\t\t\treturn matchIndexes;                                                                                              // 1987\n\t\t}),                                                                                                                // 1988\n                                                                                                                     // 1989\n\t\t\"lt\": createPositionalPseudo(function( matchIndexes, length, argument ) {                                          // 1990\n\t\t\tvar i = argument < 0 ? argument + length : argument;                                                              // 1991\n\t\t\tfor ( ; --i >= 0; ) {                                                                                             // 1992\n\t\t\t\tmatchIndexes.push( i );                                                                                          // 1993\n\t\t\t}                                                                                                                 // 1994\n\t\t\treturn matchIndexes;                                                                                              // 1995\n\t\t}),                                                                                                                // 1996\n                                                                                                                     // 1997\n\t\t\"gt\": createPositionalPseudo(function( matchIndexes, length, argument ) {                                          // 1998\n\t\t\tvar i = argument < 0 ? argument + length : argument;                                                              // 1999\n\t\t\tfor ( ; ++i < length; ) {                                                                                         // 2000\n\t\t\t\tmatchIndexes.push( i );                                                                                          // 2001\n\t\t\t}                                                                                                                 // 2002\n\t\t\treturn matchIndexes;                                                                                              // 2003\n\t\t})                                                                                                                 // 2004\n\t}                                                                                                                   // 2005\n};                                                                                                                   // 2006\n                                                                                                                     // 2007\nExpr.pseudos[\"nth\"] = Expr.pseudos[\"eq\"];                                                                            // 2008\n                                                                                                                     // 2009\n// Add button/input type pseudos                                                                                     // 2010\nfor ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {                              // 2011\n\tExpr.pseudos[ i ] = createInputPseudo( i );                                                                         // 2012\n}                                                                                                                    // 2013\nfor ( i in { submit: true, reset: true } ) {                                                                         // 2014\n\tExpr.pseudos[ i ] = createButtonPseudo( i );                                                                        // 2015\n}                                                                                                                    // 2016\n                                                                                                                     // 2017\n// Easy API for creating new setFilters                                                                              // 2018\nfunction setFilters() {}                                                                                             // 2019\nsetFilters.prototype = Expr.filters = Expr.pseudos;                                                                  // 2020\nExpr.setFilters = new setFilters();                                                                                  // 2021\n                                                                                                                     // 2022\nfunction tokenize( selector, parseOnly ) {                                                                           // 2023\n\tvar matched, match, tokens, type,                                                                                   // 2024\n\t\tsoFar, groups, preFilters,                                                                                         // 2025\n\t\tcached = tokenCache[ selector + \" \" ];                                                                             // 2026\n                                                                                                                     // 2027\n\tif ( cached ) {                                                                                                     // 2028\n\t\treturn parseOnly ? 0 : cached.slice( 0 );                                                                          // 2029\n\t}                                                                                                                   // 2030\n                                                                                                                     // 2031\n\tsoFar = selector;                                                                                                   // 2032\n\tgroups = [];                                                                                                        // 2033\n\tpreFilters = Expr.preFilter;                                                                                        // 2034\n                                                                                                                     // 2035\n\twhile ( soFar ) {                                                                                                   // 2036\n                                                                                                                     // 2037\n\t\t// Comma and first run                                                                                             // 2038\n\t\tif ( !matched || (match = rcomma.exec( soFar )) ) {                                                                // 2039\n\t\t\tif ( match ) {                                                                                                    // 2040\n\t\t\t\t// Don't consume trailing commas as valid                                                                        // 2041\n\t\t\t\tsoFar = soFar.slice( match[0].length ) || soFar;                                                                 // 2042\n\t\t\t}                                                                                                                 // 2043\n\t\t\tgroups.push( (tokens = []) );                                                                                     // 2044\n\t\t}                                                                                                                  // 2045\n                                                                                                                     // 2046\n\t\tmatched = false;                                                                                                   // 2047\n                                                                                                                     // 2048\n\t\t// Combinators                                                                                                     // 2049\n\t\tif ( (match = rcombinators.exec( soFar )) ) {                                                                      // 2050\n\t\t\tmatched = match.shift();                                                                                          // 2051\n\t\t\ttokens.push({                                                                                                     // 2052\n\t\t\t\tvalue: matched,                                                                                                  // 2053\n\t\t\t\t// Cast descendant combinators to space                                                                          // 2054\n\t\t\t\ttype: match[0].replace( rtrim, \" \" )                                                                             // 2055\n\t\t\t});                                                                                                               // 2056\n\t\t\tsoFar = soFar.slice( matched.length );                                                                            // 2057\n\t\t}                                                                                                                  // 2058\n                                                                                                                     // 2059\n\t\t// Filters                                                                                                         // 2060\n\t\tfor ( type in Expr.filter ) {                                                                                      // 2061\n\t\t\tif ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||                                         // 2062\n\t\t\t\t(match = preFilters[ type ]( match ))) ) {                                                                       // 2063\n\t\t\t\tmatched = match.shift();                                                                                         // 2064\n\t\t\t\ttokens.push({                                                                                                    // 2065\n\t\t\t\t\tvalue: matched,                                                                                                 // 2066\n\t\t\t\t\ttype: type,                                                                                                     // 2067\n\t\t\t\t\tmatches: match                                                                                                  // 2068\n\t\t\t\t});                                                                                                              // 2069\n\t\t\t\tsoFar = soFar.slice( matched.length );                                                                           // 2070\n\t\t\t}                                                                                                                 // 2071\n\t\t}                                                                                                                  // 2072\n                                                                                                                     // 2073\n\t\tif ( !matched ) {                                                                                                  // 2074\n\t\t\tbreak;                                                                                                            // 2075\n\t\t}                                                                                                                  // 2076\n\t}                                                                                                                   // 2077\n                                                                                                                     // 2078\n\t// Return the length of the invalid excess                                                                          // 2079\n\t// if we're just parsing                                                                                            // 2080\n\t// Otherwise, throw an error or return tokens                                                                       // 2081\n\treturn parseOnly ?                                                                                                  // 2082\n\t\tsoFar.length :                                                                                                     // 2083\n\t\tsoFar ?                                                                                                            // 2084\n\t\t\tSizzle.error( selector ) :                                                                                        // 2085\n\t\t\t// Cache the tokens                                                                                               // 2086\n\t\t\ttokenCache( selector, groups ).slice( 0 );                                                                        // 2087\n}                                                                                                                    // 2088\n                                                                                                                     // 2089\nfunction toSelector( tokens ) {                                                                                      // 2090\n\tvar i = 0,                                                                                                          // 2091\n\t\tlen = tokens.length,                                                                                               // 2092\n\t\tselector = \"\";                                                                                                     // 2093\n\tfor ( ; i < len; i++ ) {                                                                                            // 2094\n\t\tselector += tokens[i].value;                                                                                       // 2095\n\t}                                                                                                                   // 2096\n\treturn selector;                                                                                                    // 2097\n}                                                                                                                    // 2098\n                                                                                                                     // 2099\nfunction addCombinator( matcher, combinator, base ) {                                                                // 2100\n\tvar dir = combinator.dir,                                                                                           // 2101\n\t\tcheckNonElements = base && dir === \"parentNode\",                                                                   // 2102\n\t\tdoneName = done++;                                                                                                 // 2103\n                                                                                                                     // 2104\n\treturn combinator.first ?                                                                                           // 2105\n\t\t// Check against closest ancestor/preceding element                                                                // 2106\n\t\tfunction( elem, context, xml ) {                                                                                   // 2107\n\t\t\twhile ( (elem = elem[ dir ]) ) {                                                                                  // 2108\n\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {                                                                 // 2109\n\t\t\t\t\treturn matcher( elem, context, xml );                                                                           // 2110\n\t\t\t\t}                                                                                                                // 2111\n\t\t\t}                                                                                                                 // 2112\n\t\t} :                                                                                                                // 2113\n                                                                                                                     // 2114\n\t\t// Check against all ancestor/preceding elements                                                                   // 2115\n\t\tfunction( elem, context, xml ) {                                                                                   // 2116\n\t\t\tvar oldCache, outerCache,                                                                                         // 2117\n\t\t\t\tnewCache = [ dirruns, doneName ];                                                                                // 2118\n                                                                                                                     // 2119\n\t\t\t// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching                               // 2120\n\t\t\tif ( xml ) {                                                                                                      // 2121\n\t\t\t\twhile ( (elem = elem[ dir ]) ) {                                                                                 // 2122\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {                                                                // 2123\n\t\t\t\t\t\tif ( matcher( elem, context, xml ) ) {                                                                         // 2124\n\t\t\t\t\t\t\treturn true;                                                                                                  // 2125\n\t\t\t\t\t\t}                                                                                                              // 2126\n\t\t\t\t\t}                                                                                                               // 2127\n\t\t\t\t}                                                                                                                // 2128\n\t\t\t} else {                                                                                                          // 2129\n\t\t\t\twhile ( (elem = elem[ dir ]) ) {                                                                                 // 2130\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {                                                                // 2131\n\t\t\t\t\t\touterCache = elem[ expando ] || (elem[ expando ] = {});                                                        // 2132\n\t\t\t\t\t\tif ( (oldCache = outerCache[ dir ]) &&                                                                         // 2133\n\t\t\t\t\t\t\toldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {                                                   // 2134\n                                                                                                                     // 2135\n\t\t\t\t\t\t\t// Assign to newCache so results back-propagate to previous elements                                          // 2136\n\t\t\t\t\t\t\treturn (newCache[ 2 ] = oldCache[ 2 ]);                                                                       // 2137\n\t\t\t\t\t\t} else {                                                                                                       // 2138\n\t\t\t\t\t\t\t// Reuse newcache so results back-propagate to previous elements                                              // 2139\n\t\t\t\t\t\t\touterCache[ dir ] = newCache;                                                                                 // 2140\n                                                                                                                     // 2141\n\t\t\t\t\t\t\t// A match means we're done; a fail means we have to keep checking                                            // 2142\n\t\t\t\t\t\t\tif ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {                                                      // 2143\n\t\t\t\t\t\t\t\treturn true;                                                                                                 // 2144\n\t\t\t\t\t\t\t}                                                                                                             // 2145\n\t\t\t\t\t\t}                                                                                                              // 2146\n\t\t\t\t\t}                                                                                                               // 2147\n\t\t\t\t}                                                                                                                // 2148\n\t\t\t}                                                                                                                 // 2149\n\t\t};                                                                                                                 // 2150\n}                                                                                                                    // 2151\n                                                                                                                     // 2152\nfunction elementMatcher( matchers ) {                                                                                // 2153\n\treturn matchers.length > 1 ?                                                                                        // 2154\n\t\tfunction( elem, context, xml ) {                                                                                   // 2155\n\t\t\tvar i = matchers.length;                                                                                          // 2156\n\t\t\twhile ( i-- ) {                                                                                                   // 2157\n\t\t\t\tif ( !matchers[i]( elem, context, xml ) ) {                                                                      // 2158\n\t\t\t\t\treturn false;                                                                                                   // 2159\n\t\t\t\t}                                                                                                                // 2160\n\t\t\t}                                                                                                                 // 2161\n\t\t\treturn true;                                                                                                      // 2162\n\t\t} :                                                                                                                // 2163\n\t\tmatchers[0];                                                                                                       // 2164\n}                                                                                                                    // 2165\n                                                                                                                     // 2166\nfunction condense( unmatched, map, filter, context, xml ) {                                                          // 2167\n\tvar elem,                                                                                                           // 2168\n\t\tnewUnmatched = [],                                                                                                 // 2169\n\t\ti = 0,                                                                                                             // 2170\n\t\tlen = unmatched.length,                                                                                            // 2171\n\t\tmapped = map != null;                                                                                              // 2172\n                                                                                                                     // 2173\n\tfor ( ; i < len; i++ ) {                                                                                            // 2174\n\t\tif ( (elem = unmatched[i]) ) {                                                                                     // 2175\n\t\t\tif ( !filter || filter( elem, context, xml ) ) {                                                                  // 2176\n\t\t\t\tnewUnmatched.push( elem );                                                                                       // 2177\n\t\t\t\tif ( mapped ) {                                                                                                  // 2178\n\t\t\t\t\tmap.push( i );                                                                                                  // 2179\n\t\t\t\t}                                                                                                                // 2180\n\t\t\t}                                                                                                                 // 2181\n\t\t}                                                                                                                  // 2182\n\t}                                                                                                                   // 2183\n                                                                                                                     // 2184\n\treturn newUnmatched;                                                                                                // 2185\n}                                                                                                                    // 2186\n                                                                                                                     // 2187\nfunction setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {                          // 2188\n\tif ( postFilter && !postFilter[ expando ] ) {                                                                       // 2189\n\t\tpostFilter = setMatcher( postFilter );                                                                             // 2190\n\t}                                                                                                                   // 2191\n\tif ( postFinder && !postFinder[ expando ] ) {                                                                       // 2192\n\t\tpostFinder = setMatcher( postFinder, postSelector );                                                               // 2193\n\t}                                                                                                                   // 2194\n\treturn markFunction(function( seed, results, context, xml ) {                                                       // 2195\n\t\tvar temp, i, elem,                                                                                                 // 2196\n\t\t\tpreMap = [],                                                                                                      // 2197\n\t\t\tpostMap = [],                                                                                                     // 2198\n\t\t\tpreexisting = results.length,                                                                                     // 2199\n                                                                                                                     // 2200\n\t\t\t// Get initial elements from seed or context                                                                      // 2201\n\t\t\telems = seed || multipleContexts( selector || \"*\", context.nodeType ? [ context ] : context, [] ),                // 2202\n                                                                                                                     // 2203\n\t\t\t// Prefilter to get matcher input, preserving a map for seed-results synchronization                              // 2204\n\t\t\tmatcherIn = preFilter && ( seed || !selector ) ?                                                                  // 2205\n\t\t\t\tcondense( elems, preMap, preFilter, context, xml ) :                                                             // 2206\n\t\t\t\telems,                                                                                                           // 2207\n                                                                                                                     // 2208\n\t\t\tmatcherOut = matcher ?                                                                                            // 2209\n\t\t\t\t// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,                     // 2210\n\t\t\t\tpostFinder || ( seed ? preFilter : preexisting || postFilter ) ?                                                 // 2211\n                                                                                                                     // 2212\n\t\t\t\t\t// ...intermediate processing is necessary                                                                      // 2213\n\t\t\t\t\t[] :                                                                                                            // 2214\n                                                                                                                     // 2215\n\t\t\t\t\t// ...otherwise use results directly                                                                            // 2216\n\t\t\t\t\tresults :                                                                                                       // 2217\n\t\t\t\tmatcherIn;                                                                                                       // 2218\n                                                                                                                     // 2219\n\t\t// Find primary matches                                                                                            // 2220\n\t\tif ( matcher ) {                                                                                                   // 2221\n\t\t\tmatcher( matcherIn, matcherOut, context, xml );                                                                   // 2222\n\t\t}                                                                                                                  // 2223\n                                                                                                                     // 2224\n\t\t// Apply postFilter                                                                                                // 2225\n\t\tif ( postFilter ) {                                                                                                // 2226\n\t\t\ttemp = condense( matcherOut, postMap );                                                                           // 2227\n\t\t\tpostFilter( temp, [], context, xml );                                                                             // 2228\n                                                                                                                     // 2229\n\t\t\t// Un-match failing elements by moving them back to matcherIn                                                     // 2230\n\t\t\ti = temp.length;                                                                                                  // 2231\n\t\t\twhile ( i-- ) {                                                                                                   // 2232\n\t\t\t\tif ( (elem = temp[i]) ) {                                                                                        // 2233\n\t\t\t\t\tmatcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);                                                   // 2234\n\t\t\t\t}                                                                                                                // 2235\n\t\t\t}                                                                                                                 // 2236\n\t\t}                                                                                                                  // 2237\n                                                                                                                     // 2238\n\t\tif ( seed ) {                                                                                                      // 2239\n\t\t\tif ( postFinder || preFilter ) {                                                                                  // 2240\n\t\t\t\tif ( postFinder ) {                                                                                              // 2241\n\t\t\t\t\t// Get the final matcherOut by condensing this intermediate into postFinder contexts                            // 2242\n\t\t\t\t\ttemp = [];                                                                                                      // 2243\n\t\t\t\t\ti = matcherOut.length;                                                                                          // 2244\n\t\t\t\t\twhile ( i-- ) {                                                                                                 // 2245\n\t\t\t\t\t\tif ( (elem = matcherOut[i]) ) {                                                                                // 2246\n\t\t\t\t\t\t\t// Restore matcherIn since elem is not yet a final match                                                      // 2247\n\t\t\t\t\t\t\ttemp.push( (matcherIn[i] = elem) );                                                                           // 2248\n\t\t\t\t\t\t}                                                                                                              // 2249\n\t\t\t\t\t}                                                                                                               // 2250\n\t\t\t\t\tpostFinder( null, (matcherOut = []), temp, xml );                                                               // 2251\n\t\t\t\t}                                                                                                                // 2252\n                                                                                                                     // 2253\n\t\t\t\t// Move matched elements from seed to results to keep them synchronized                                          // 2254\n\t\t\t\ti = matcherOut.length;                                                                                           // 2255\n\t\t\t\twhile ( i-- ) {                                                                                                  // 2256\n\t\t\t\t\tif ( (elem = matcherOut[i]) &&                                                                                  // 2257\n\t\t\t\t\t\t(temp = postFinder ? indexOf.call( seed, elem ) : preMap[i]) > -1 ) {                                          // 2258\n                                                                                                                     // 2259\n\t\t\t\t\t\tseed[temp] = !(results[temp] = elem);                                                                          // 2260\n\t\t\t\t\t}                                                                                                               // 2261\n\t\t\t\t}                                                                                                                // 2262\n\t\t\t}                                                                                                                 // 2263\n                                                                                                                     // 2264\n\t\t// Add elements to results, through postFinder if defined                                                          // 2265\n\t\t} else {                                                                                                           // 2266\n\t\t\tmatcherOut = condense(                                                                                            // 2267\n\t\t\t\tmatcherOut === results ?                                                                                         // 2268\n\t\t\t\t\tmatcherOut.splice( preexisting, matcherOut.length ) :                                                           // 2269\n\t\t\t\t\tmatcherOut                                                                                                      // 2270\n\t\t\t);                                                                                                                // 2271\n\t\t\tif ( postFinder ) {                                                                                               // 2272\n\t\t\t\tpostFinder( null, results, matcherOut, xml );                                                                    // 2273\n\t\t\t} else {                                                                                                          // 2274\n\t\t\t\tpush.apply( results, matcherOut );                                                                               // 2275\n\t\t\t}                                                                                                                 // 2276\n\t\t}                                                                                                                  // 2277\n\t});                                                                                                                 // 2278\n}                                                                                                                    // 2279\n                                                                                                                     // 2280\nfunction matcherFromTokens( tokens ) {                                                                               // 2281\n\tvar checkContext, matcher, j,                                                                                       // 2282\n\t\tlen = tokens.length,                                                                                               // 2283\n\t\tleadingRelative = Expr.relative[ tokens[0].type ],                                                                 // 2284\n\t\timplicitRelative = leadingRelative || Expr.relative[\" \"],                                                          // 2285\n\t\ti = leadingRelative ? 1 : 0,                                                                                       // 2286\n                                                                                                                     // 2287\n\t\t// The foundational matcher ensures that elements are reachable from top-level context(s)                          // 2288\n\t\tmatchContext = addCombinator( function( elem ) {                                                                   // 2289\n\t\t\treturn elem === checkContext;                                                                                     // 2290\n\t\t}, implicitRelative, true ),                                                                                       // 2291\n\t\tmatchAnyContext = addCombinator( function( elem ) {                                                                // 2292\n\t\t\treturn indexOf.call( checkContext, elem ) > -1;                                                                   // 2293\n\t\t}, implicitRelative, true ),                                                                                       // 2294\n\t\tmatchers = [ function( elem, context, xml ) {                                                                      // 2295\n\t\t\treturn ( !leadingRelative && ( xml || context !== outermostContext ) ) || (                                       // 2296\n\t\t\t\t(checkContext = context).nodeType ?                                                                              // 2297\n\t\t\t\t\tmatchContext( elem, context, xml ) :                                                                            // 2298\n\t\t\t\t\tmatchAnyContext( elem, context, xml ) );                                                                        // 2299\n\t\t} ];                                                                                                               // 2300\n                                                                                                                     // 2301\n\tfor ( ; i < len; i++ ) {                                                                                            // 2302\n\t\tif ( (matcher = Expr.relative[ tokens[i].type ]) ) {                                                               // 2303\n\t\t\tmatchers = [ addCombinator(elementMatcher( matchers ), matcher) ];                                                // 2304\n\t\t} else {                                                                                                           // 2305\n\t\t\tmatcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );                                         // 2306\n                                                                                                                     // 2307\n\t\t\t// Return special upon seeing a positional matcher                                                                // 2308\n\t\t\tif ( matcher[ expando ] ) {                                                                                       // 2309\n\t\t\t\t// Find the next relative operator (if any) for proper handling                                                  // 2310\n\t\t\t\tj = ++i;                                                                                                         // 2311\n\t\t\t\tfor ( ; j < len; j++ ) {                                                                                         // 2312\n\t\t\t\t\tif ( Expr.relative[ tokens[j].type ] ) {                                                                        // 2313\n\t\t\t\t\t\tbreak;                                                                                                         // 2314\n\t\t\t\t\t}                                                                                                               // 2315\n\t\t\t\t}                                                                                                                // 2316\n\t\t\t\treturn setMatcher(                                                                                               // 2317\n\t\t\t\t\ti > 1 && elementMatcher( matchers ),                                                                            // 2318\n\t\t\t\t\ti > 1 && toSelector(                                                                                            // 2319\n\t\t\t\t\t\t// If the preceding token was a descendant combinator, insert an implicit any-element `*`                      // 2320\n\t\t\t\t\t\ttokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === \" \" ? \"*\" : \"\" })                            // 2321\n\t\t\t\t\t).replace( rtrim, \"$1\" ),                                                                                       // 2322\n\t\t\t\t\tmatcher,                                                                                                        // 2323\n\t\t\t\t\ti < j && matcherFromTokens( tokens.slice( i, j ) ),                                                             // 2324\n\t\t\t\t\tj < len && matcherFromTokens( (tokens = tokens.slice( j )) ),                                                   // 2325\n\t\t\t\t\tj < len && toSelector( tokens )                                                                                 // 2326\n\t\t\t\t);                                                                                                               // 2327\n\t\t\t}                                                                                                                 // 2328\n\t\t\tmatchers.push( matcher );                                                                                         // 2329\n\t\t}                                                                                                                  // 2330\n\t}                                                                                                                   // 2331\n                                                                                                                     // 2332\n\treturn elementMatcher( matchers );                                                                                  // 2333\n}                                                                                                                    // 2334\n                                                                                                                     // 2335\nfunction matcherFromGroupMatchers( elementMatchers, setMatchers ) {                                                  // 2336\n\tvar bySet = setMatchers.length > 0,                                                                                 // 2337\n\t\tbyElement = elementMatchers.length > 0,                                                                            // 2338\n\t\tsuperMatcher = function( seed, context, xml, results, outermost ) {                                                // 2339\n\t\t\tvar elem, j, matcher,                                                                                             // 2340\n\t\t\t\tmatchedCount = 0,                                                                                                // 2341\n\t\t\t\ti = \"0\",                                                                                                         // 2342\n\t\t\t\tunmatched = seed && [],                                                                                          // 2343\n\t\t\t\tsetMatched = [],                                                                                                 // 2344\n\t\t\t\tcontextBackup = outermostContext,                                                                                // 2345\n\t\t\t\t// We must always have either seed elements or outermost context                                                 // 2346\n\t\t\t\telems = seed || byElement && Expr.find[\"TAG\"]( \"*\", outermost ),                                                 // 2347\n\t\t\t\t// Use integer dirruns iff this is the outermost matcher                                                         // 2348\n\t\t\t\tdirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),                                   // 2349\n\t\t\t\tlen = elems.length;                                                                                              // 2350\n                                                                                                                     // 2351\n\t\t\tif ( outermost ) {                                                                                                // 2352\n\t\t\t\toutermostContext = context !== document && context;                                                              // 2353\n\t\t\t}                                                                                                                 // 2354\n                                                                                                                     // 2355\n\t\t\t// Add elements passing elementMatchers directly to results                                                       // 2356\n\t\t\t// Keep `i` a string if there are no elements so `matchedCount` will be \"00\" below                                // 2357\n\t\t\t// Support: IE<9, Safari                                                                                          // 2358\n\t\t\t// Tolerate NodeList properties (IE: \"length\"; Safari: <number>) matching elements by id                          // 2359\n\t\t\tfor ( ; i !== len && (elem = elems[i]) != null; i++ ) {                                                           // 2360\n\t\t\t\tif ( byElement && elem ) {                                                                                       // 2361\n\t\t\t\t\tj = 0;                                                                                                          // 2362\n\t\t\t\t\twhile ( (matcher = elementMatchers[j++]) ) {                                                                    // 2363\n\t\t\t\t\t\tif ( matcher( elem, context, xml ) ) {                                                                         // 2364\n\t\t\t\t\t\t\tresults.push( elem );                                                                                         // 2365\n\t\t\t\t\t\t\tbreak;                                                                                                        // 2366\n\t\t\t\t\t\t}                                                                                                              // 2367\n\t\t\t\t\t}                                                                                                               // 2368\n\t\t\t\t\tif ( outermost ) {                                                                                              // 2369\n\t\t\t\t\t\tdirruns = dirrunsUnique;                                                                                       // 2370\n\t\t\t\t\t}                                                                                                               // 2371\n\t\t\t\t}                                                                                                                // 2372\n                                                                                                                     // 2373\n\t\t\t\t// Track unmatched elements for set filters                                                                      // 2374\n\t\t\t\tif ( bySet ) {                                                                                                   // 2375\n\t\t\t\t\t// They will have gone through all possible matchers                                                            // 2376\n\t\t\t\t\tif ( (elem = !matcher && elem) ) {                                                                              // 2377\n\t\t\t\t\t\tmatchedCount--;                                                                                                // 2378\n\t\t\t\t\t}                                                                                                               // 2379\n                                                                                                                     // 2380\n\t\t\t\t\t// Lengthen the array for every element, matched or not                                                         // 2381\n\t\t\t\t\tif ( seed ) {                                                                                                   // 2382\n\t\t\t\t\t\tunmatched.push( elem );                                                                                        // 2383\n\t\t\t\t\t}                                                                                                               // 2384\n\t\t\t\t}                                                                                                                // 2385\n\t\t\t}                                                                                                                 // 2386\n                                                                                                                     // 2387\n\t\t\t// Apply set filters to unmatched elements                                                                        // 2388\n\t\t\tmatchedCount += i;                                                                                                // 2389\n\t\t\tif ( bySet && i !== matchedCount ) {                                                                              // 2390\n\t\t\t\tj = 0;                                                                                                           // 2391\n\t\t\t\twhile ( (matcher = setMatchers[j++]) ) {                                                                         // 2392\n\t\t\t\t\tmatcher( unmatched, setMatched, context, xml );                                                                 // 2393\n\t\t\t\t}                                                                                                                // 2394\n                                                                                                                     // 2395\n\t\t\t\tif ( seed ) {                                                                                                    // 2396\n\t\t\t\t\t// Reintegrate element matches to eliminate the need for sorting                                                // 2397\n\t\t\t\t\tif ( matchedCount > 0 ) {                                                                                       // 2398\n\t\t\t\t\t\twhile ( i-- ) {                                                                                                // 2399\n\t\t\t\t\t\t\tif ( !(unmatched[i] || setMatched[i]) ) {                                                                     // 2400\n\t\t\t\t\t\t\t\tsetMatched[i] = pop.call( results );                                                                         // 2401\n\t\t\t\t\t\t\t}                                                                                                             // 2402\n\t\t\t\t\t\t}                                                                                                              // 2403\n\t\t\t\t\t}                                                                                                               // 2404\n                                                                                                                     // 2405\n\t\t\t\t\t// Discard index placeholder values to get only actual matches                                                  // 2406\n\t\t\t\t\tsetMatched = condense( setMatched );                                                                            // 2407\n\t\t\t\t}                                                                                                                // 2408\n                                                                                                                     // 2409\n\t\t\t\t// Add matches to results                                                                                        // 2410\n\t\t\t\tpush.apply( results, setMatched );                                                                               // 2411\n                                                                                                                     // 2412\n\t\t\t\t// Seedless set matches succeeding multiple successful matchers stipulate sorting                                // 2413\n\t\t\t\tif ( outermost && !seed && setMatched.length > 0 &&                                                              // 2414\n\t\t\t\t\t( matchedCount + setMatchers.length ) > 1 ) {                                                                   // 2415\n                                                                                                                     // 2416\n\t\t\t\t\tSizzle.uniqueSort( results );                                                                                   // 2417\n\t\t\t\t}                                                                                                                // 2418\n\t\t\t}                                                                                                                 // 2419\n                                                                                                                     // 2420\n\t\t\t// Override manipulation of globals by nested matchers                                                            // 2421\n\t\t\tif ( outermost ) {                                                                                                // 2422\n\t\t\t\tdirruns = dirrunsUnique;                                                                                         // 2423\n\t\t\t\toutermostContext = contextBackup;                                                                                // 2424\n\t\t\t}                                                                                                                 // 2425\n                                                                                                                     // 2426\n\t\t\treturn unmatched;                                                                                                 // 2427\n\t\t};                                                                                                                 // 2428\n                                                                                                                     // 2429\n\treturn bySet ?                                                                                                      // 2430\n\t\tmarkFunction( superMatcher ) :                                                                                     // 2431\n\t\tsuperMatcher;                                                                                                      // 2432\n}                                                                                                                    // 2433\n                                                                                                                     // 2434\ncompile = Sizzle.compile = function( selector, group /* Internal Use Only */ ) {                                     // 2435\n\tvar i,                                                                                                              // 2436\n\t\tsetMatchers = [],                                                                                                  // 2437\n\t\telementMatchers = [],                                                                                              // 2438\n\t\tcached = compilerCache[ selector + \" \" ];                                                                          // 2439\n                                                                                                                     // 2440\n\tif ( !cached ) {                                                                                                    // 2441\n\t\t// Generate a function of recursive functions that can be used to check each element                               // 2442\n\t\tif ( !group ) {                                                                                                    // 2443\n\t\t\tgroup = tokenize( selector );                                                                                     // 2444\n\t\t}                                                                                                                  // 2445\n\t\ti = group.length;                                                                                                  // 2446\n\t\twhile ( i-- ) {                                                                                                    // 2447\n\t\t\tcached = matcherFromTokens( group[i] );                                                                           // 2448\n\t\t\tif ( cached[ expando ] ) {                                                                                        // 2449\n\t\t\t\tsetMatchers.push( cached );                                                                                      // 2450\n\t\t\t} else {                                                                                                          // 2451\n\t\t\t\telementMatchers.push( cached );                                                                                  // 2452\n\t\t\t}                                                                                                                 // 2453\n\t\t}                                                                                                                  // 2454\n                                                                                                                     // 2455\n\t\t// Cache the compiled function                                                                                     // 2456\n\t\tcached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );                      // 2457\n\t}                                                                                                                   // 2458\n\treturn cached;                                                                                                      // 2459\n};                                                                                                                   // 2460\n                                                                                                                     // 2461\nfunction multipleContexts( selector, contexts, results ) {                                                           // 2462\n\tvar i = 0,                                                                                                          // 2463\n\t\tlen = contexts.length;                                                                                             // 2464\n\tfor ( ; i < len; i++ ) {                                                                                            // 2465\n\t\tSizzle( selector, contexts[i], results );                                                                          // 2466\n\t}                                                                                                                   // 2467\n\treturn results;                                                                                                     // 2468\n}                                                                                                                    // 2469\n                                                                                                                     // 2470\nfunction select( selector, context, results, seed ) {                                                                // 2471\n\tvar i, tokens, token, type, find,                                                                                   // 2472\n\t\tmatch = tokenize( selector );                                                                                      // 2473\n                                                                                                                     // 2474\n\tif ( !seed ) {                                                                                                      // 2475\n\t\t// Try to minimize operations if there is only one group                                                           // 2476\n\t\tif ( match.length === 1 ) {                                                                                        // 2477\n                                                                                                                     // 2478\n\t\t\t// Take a shortcut and set the context if the root selector is an ID                                              // 2479\n\t\t\ttokens = match[0] = match[0].slice( 0 );                                                                          // 2480\n\t\t\tif ( tokens.length > 2 && (token = tokens[0]).type === \"ID\" &&                                                    // 2481\n\t\t\t\t\tsupport.getById && context.nodeType === 9 && documentIsHTML &&                                                  // 2482\n\t\t\t\t\tExpr.relative[ tokens[1].type ] ) {                                                                             // 2483\n                                                                                                                     // 2484\n\t\t\t\tcontext = ( Expr.find[\"ID\"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];               // 2485\n\t\t\t\tif ( !context ) {                                                                                                // 2486\n\t\t\t\t\treturn results;                                                                                                 // 2487\n\t\t\t\t}                                                                                                                // 2488\n\t\t\t\tselector = selector.slice( tokens.shift().value.length );                                                        // 2489\n\t\t\t}                                                                                                                 // 2490\n                                                                                                                     // 2491\n\t\t\t// Fetch a seed set for right-to-left matching                                                                    // 2492\n\t\t\ti = matchExpr[\"needsContext\"].test( selector ) ? 0 : tokens.length;                                               // 2493\n\t\t\twhile ( i-- ) {                                                                                                   // 2494\n\t\t\t\ttoken = tokens[i];                                                                                               // 2495\n                                                                                                                     // 2496\n\t\t\t\t// Abort if we hit a combinator                                                                                  // 2497\n\t\t\t\tif ( Expr.relative[ (type = token.type) ] ) {                                                                    // 2498\n\t\t\t\t\tbreak;                                                                                                          // 2499\n\t\t\t\t}                                                                                                                // 2500\n\t\t\t\tif ( (find = Expr.find[ type ]) ) {                                                                              // 2501\n\t\t\t\t\t// Search, expanding context for leading sibling combinators                                                    // 2502\n\t\t\t\t\tif ( (seed = find(                                                                                              // 2503\n\t\t\t\t\t\ttoken.matches[0].replace( runescape, funescape ),                                                              // 2504\n\t\t\t\t\t\trsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context                                // 2505\n\t\t\t\t\t)) ) {                                                                                                          // 2506\n                                                                                                                     // 2507\n\t\t\t\t\t\t// If seed is empty or no tokens remain, we can return early                                                   // 2508\n\t\t\t\t\t\ttokens.splice( i, 1 );                                                                                         // 2509\n\t\t\t\t\t\tselector = seed.length && toSelector( tokens );                                                                // 2510\n\t\t\t\t\t\tif ( !selector ) {                                                                                             // 2511\n\t\t\t\t\t\t\tpush.apply( results, seed );                                                                                  // 2512\n\t\t\t\t\t\t\treturn results;                                                                                               // 2513\n\t\t\t\t\t\t}                                                                                                              // 2514\n                                                                                                                     // 2515\n\t\t\t\t\t\tbreak;                                                                                                         // 2516\n\t\t\t\t\t}                                                                                                               // 2517\n\t\t\t\t}                                                                                                                // 2518\n\t\t\t}                                                                                                                 // 2519\n\t\t}                                                                                                                  // 2520\n\t}                                                                                                                   // 2521\n                                                                                                                     // 2522\n\t// Compile and execute a filtering function                                                                         // 2523\n\t// Provide `match` to avoid retokenization if we modified the selector above                                        // 2524\n\tcompile( selector, match )(                                                                                         // 2525\n\t\tseed,                                                                                                              // 2526\n\t\tcontext,                                                                                                           // 2527\n\t\t!documentIsHTML,                                                                                                   // 2528\n\t\tresults,                                                                                                           // 2529\n\t\trsibling.test( selector ) && testContext( context.parentNode ) || context                                          // 2530\n\t);                                                                                                                  // 2531\n\treturn results;                                                                                                     // 2532\n}                                                                                                                    // 2533\n                                                                                                                     // 2534\n// One-time assignments                                                                                              // 2535\n                                                                                                                     // 2536\n// Sort stability                                                                                                    // 2537\nsupport.sortStable = expando.split(\"\").sort( sortOrder ).join(\"\") === expando;                                       // 2538\n                                                                                                                     // 2539\n// Support: Chrome<14                                                                                                // 2540\n// Always assume duplicates if they aren't passed to the comparison function                                         // 2541\nsupport.detectDuplicates = !!hasDuplicate;                                                                           // 2542\n                                                                                                                     // 2543\n// Initialize against the default document                                                                           // 2544\nsetDocument();                                                                                                       // 2545\n                                                                                                                     // 2546\n// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)                                              // 2547\n// Detached nodes confoundingly follow *each other*                                                                  // 2548\nsupport.sortDetached = assert(function( div1 ) {                                                                     // 2549\n\t// Should return 1, but returns 4 (following)                                                                       // 2550\n\treturn div1.compareDocumentPosition( document.createElement(\"div\") ) & 1;                                           // 2551\n});                                                                                                                  // 2552\n                                                                                                                     // 2553\n// Support: IE<8                                                                                                     // 2554\n// Prevent attribute/property \"interpolation\"                                                                        // 2555\n// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx                                                  // 2556\nif ( !assert(function( div ) {                                                                                       // 2557\n\tdiv.innerHTML = \"<a href='#'></a>\";                                                                                 // 2558\n\treturn div.firstChild.getAttribute(\"href\") === \"#\" ;                                                                // 2559\n}) ) {                                                                                                               // 2560\n\taddHandle( \"type|href|height|width\", function( elem, name, isXML ) {                                                // 2561\n\t\tif ( !isXML ) {                                                                                                    // 2562\n\t\t\treturn elem.getAttribute( name, name.toLowerCase() === \"type\" ? 1 : 2 );                                          // 2563\n\t\t}                                                                                                                  // 2564\n\t});                                                                                                                 // 2565\n}                                                                                                                    // 2566\n                                                                                                                     // 2567\n// Support: IE<9                                                                                                     // 2568\n// Use defaultValue in place of getAttribute(\"value\")                                                                // 2569\nif ( !support.attributes || !assert(function( div ) {                                                                // 2570\n\tdiv.innerHTML = \"<input/>\";                                                                                         // 2571\n\tdiv.firstChild.setAttribute( \"value\", \"\" );                                                                         // 2572\n\treturn div.firstChild.getAttribute( \"value\" ) === \"\";                                                               // 2573\n}) ) {                                                                                                               // 2574\n\taddHandle( \"value\", function( elem, name, isXML ) {                                                                 // 2575\n\t\tif ( !isXML && elem.nodeName.toLowerCase() === \"input\" ) {                                                         // 2576\n\t\t\treturn elem.defaultValue;                                                                                         // 2577\n\t\t}                                                                                                                  // 2578\n\t});                                                                                                                 // 2579\n}                                                                                                                    // 2580\n                                                                                                                     // 2581\n// Support: IE<9                                                                                                     // 2582\n// Use getAttributeNode to fetch booleans when getAttribute lies                                                     // 2583\nif ( !assert(function( div ) {                                                                                       // 2584\n\treturn div.getAttribute(\"disabled\") == null;                                                                        // 2585\n}) ) {                                                                                                               // 2586\n\taddHandle( booleans, function( elem, name, isXML ) {                                                                // 2587\n\t\tvar val;                                                                                                           // 2588\n\t\tif ( !isXML ) {                                                                                                    // 2589\n\t\t\treturn elem[ name ] === true ? name.toLowerCase() :                                                               // 2590\n\t\t\t\t\t(val = elem.getAttributeNode( name )) && val.specified ?                                                        // 2591\n\t\t\t\t\tval.value :                                                                                                     // 2592\n\t\t\t\tnull;                                                                                                            // 2593\n\t\t}                                                                                                                  // 2594\n\t});                                                                                                                 // 2595\n}                                                                                                                    // 2596\n                                                                                                                     // 2597\nreturn Sizzle;                                                                                                       // 2598\n                                                                                                                     // 2599\n})( window );                                                                                                        // 2600\n                                                                                                                     // 2601\n                                                                                                                     // 2602\n                                                                                                                     // 2603\njQuery.find = Sizzle;                                                                                                // 2604\njQuery.expr = Sizzle.selectors;                                                                                      // 2605\njQuery.expr[\":\"] = jQuery.expr.pseudos;                                                                              // 2606\njQuery.unique = Sizzle.uniqueSort;                                                                                   // 2607\njQuery.text = Sizzle.getText;                                                                                        // 2608\njQuery.isXMLDoc = Sizzle.isXML;                                                                                      // 2609\njQuery.contains = Sizzle.contains;                                                                                   // 2610\n                                                                                                                     // 2611\n                                                                                                                     // 2612\n                                                                                                                     // 2613\nvar rneedsContext = jQuery.expr.match.needsContext;                                                                  // 2614\n                                                                                                                     // 2615\nvar rsingleTag = (/^<(\\w+)\\s*\\/?>(?:<\\/\\1>|)$/);                                                                     // 2616\n                                                                                                                     // 2617\n                                                                                                                     // 2618\n                                                                                                                     // 2619\nvar risSimple = /^.[^:#\\[\\.,]*$/;                                                                                    // 2620\n                                                                                                                     // 2621\n// Implement the identical functionality for filter and not                                                          // 2622\nfunction winnow( elements, qualifier, not ) {                                                                        // 2623\n\tif ( jQuery.isFunction( qualifier ) ) {                                                                             // 2624\n\t\treturn jQuery.grep( elements, function( elem, i ) {                                                                // 2625\n\t\t\t/* jshint -W018 */                                                                                                // 2626\n\t\t\treturn !!qualifier.call( elem, i, elem ) !== not;                                                                 // 2627\n\t\t});                                                                                                                // 2628\n                                                                                                                     // 2629\n\t}                                                                                                                   // 2630\n                                                                                                                     // 2631\n\tif ( qualifier.nodeType ) {                                                                                         // 2632\n\t\treturn jQuery.grep( elements, function( elem ) {                                                                   // 2633\n\t\t\treturn ( elem === qualifier ) !== not;                                                                            // 2634\n\t\t});                                                                                                                // 2635\n                                                                                                                     // 2636\n\t}                                                                                                                   // 2637\n                                                                                                                     // 2638\n\tif ( typeof qualifier === \"string\" ) {                                                                              // 2639\n\t\tif ( risSimple.test( qualifier ) ) {                                                                               // 2640\n\t\t\treturn jQuery.filter( qualifier, elements, not );                                                                 // 2641\n\t\t}                                                                                                                  // 2642\n                                                                                                                     // 2643\n\t\tqualifier = jQuery.filter( qualifier, elements );                                                                  // 2644\n\t}                                                                                                                   // 2645\n                                                                                                                     // 2646\n\treturn jQuery.grep( elements, function( elem ) {                                                                    // 2647\n\t\treturn ( jQuery.inArray( elem, qualifier ) >= 0 ) !== not;                                                         // 2648\n\t});                                                                                                                 // 2649\n}                                                                                                                    // 2650\n                                                                                                                     // 2651\njQuery.filter = function( expr, elems, not ) {                                                                       // 2652\n\tvar elem = elems[ 0 ];                                                                                              // 2653\n                                                                                                                     // 2654\n\tif ( not ) {                                                                                                        // 2655\n\t\texpr = \":not(\" + expr + \")\";                                                                                       // 2656\n\t}                                                                                                                   // 2657\n                                                                                                                     // 2658\n\treturn elems.length === 1 && elem.nodeType === 1 ?                                                                  // 2659\n\t\tjQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :                                                        // 2660\n\t\tjQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {                                                  // 2661\n\t\t\treturn elem.nodeType === 1;                                                                                       // 2662\n\t\t}));                                                                                                               // 2663\n};                                                                                                                   // 2664\n                                                                                                                     // 2665\njQuery.fn.extend({                                                                                                   // 2666\n\tfind: function( selector ) {                                                                                        // 2667\n\t\tvar i,                                                                                                             // 2668\n\t\t\tret = [],                                                                                                         // 2669\n\t\t\tself = this,                                                                                                      // 2670\n\t\t\tlen = self.length;                                                                                                // 2671\n                                                                                                                     // 2672\n\t\tif ( typeof selector !== \"string\" ) {                                                                              // 2673\n\t\t\treturn this.pushStack( jQuery( selector ).filter(function() {                                                     // 2674\n\t\t\t\tfor ( i = 0; i < len; i++ ) {                                                                                    // 2675\n\t\t\t\t\tif ( jQuery.contains( self[ i ], this ) ) {                                                                     // 2676\n\t\t\t\t\t\treturn true;                                                                                                   // 2677\n\t\t\t\t\t}                                                                                                               // 2678\n\t\t\t\t}                                                                                                                // 2679\n\t\t\t}) );                                                                                                             // 2680\n\t\t}                                                                                                                  // 2681\n                                                                                                                     // 2682\n\t\tfor ( i = 0; i < len; i++ ) {                                                                                      // 2683\n\t\t\tjQuery.find( selector, self[ i ], ret );                                                                          // 2684\n\t\t}                                                                                                                  // 2685\n                                                                                                                     // 2686\n\t\t// Needed because $( selector, context ) becomes $( context ).find( selector )                                     // 2687\n\t\tret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );                                                      // 2688\n\t\tret.selector = this.selector ? this.selector + \" \" + selector : selector;                                          // 2689\n\t\treturn ret;                                                                                                        // 2690\n\t},                                                                                                                  // 2691\n\tfilter: function( selector ) {                                                                                      // 2692\n\t\treturn this.pushStack( winnow(this, selector || [], false) );                                                      // 2693\n\t},                                                                                                                  // 2694\n\tnot: function( selector ) {                                                                                         // 2695\n\t\treturn this.pushStack( winnow(this, selector || [], true) );                                                       // 2696\n\t},                                                                                                                  // 2697\n\tis: function( selector ) {                                                                                          // 2698\n\t\treturn !!winnow(                                                                                                   // 2699\n\t\t\tthis,                                                                                                             // 2700\n                                                                                                                     // 2701\n\t\t\t// If this is a positional/relative selector, check membership in the returned set                                // 2702\n\t\t\t// so $(\"p:first\").is(\"p:last\") won't return true for a doc with two \"p\".                                         // 2703\n\t\t\ttypeof selector === \"string\" && rneedsContext.test( selector ) ?                                                  // 2704\n\t\t\t\tjQuery( selector ) :                                                                                             // 2705\n\t\t\t\tselector || [],                                                                                                  // 2706\n\t\t\tfalse                                                                                                             // 2707\n\t\t).length;                                                                                                          // 2708\n\t}                                                                                                                   // 2709\n});                                                                                                                  // 2710\n                                                                                                                     // 2711\n                                                                                                                     // 2712\n// Initialize a jQuery object                                                                                        // 2713\n                                                                                                                     // 2714\n                                                                                                                     // 2715\n// A central reference to the root jQuery(document)                                                                  // 2716\nvar rootjQuery,                                                                                                      // 2717\n                                                                                                                     // 2718\n\t// Use the correct document accordingly with window argument (sandbox)                                              // 2719\n\tdocument = window.document,                                                                                         // 2720\n                                                                                                                     // 2721\n\t// A simple way to check for HTML strings                                                                           // 2722\n\t// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)                                                 // 2723\n\t// Strict HTML recognition (#11290: must start with <)                                                              // 2724\n\trquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]*))$/,                                                                 // 2725\n                                                                                                                     // 2726\n\tinit = jQuery.fn.init = function( selector, context ) {                                                             // 2727\n\t\tvar match, elem;                                                                                                   // 2728\n                                                                                                                     // 2729\n\t\t// HANDLE: $(\"\"), $(null), $(undefined), $(false)                                                                  // 2730\n\t\tif ( !selector ) {                                                                                                 // 2731\n\t\t\treturn this;                                                                                                      // 2732\n\t\t}                                                                                                                  // 2733\n                                                                                                                     // 2734\n\t\t// Handle HTML strings                                                                                             // 2735\n\t\tif ( typeof selector === \"string\" ) {                                                                              // 2736\n\t\t\tif ( selector.charAt(0) === \"<\" && selector.charAt( selector.length - 1 ) === \">\" && selector.length >= 3 ) {     // 2737\n\t\t\t\t// Assume that strings that start and end with <> are HTML and skip the regex check                              // 2738\n\t\t\t\tmatch = [ null, selector, null ];                                                                                // 2739\n                                                                                                                     // 2740\n\t\t\t} else {                                                                                                          // 2741\n\t\t\t\tmatch = rquickExpr.exec( selector );                                                                             // 2742\n\t\t\t}                                                                                                                 // 2743\n                                                                                                                     // 2744\n\t\t\t// Match html or make sure no context is specified for #id                                                        // 2745\n\t\t\tif ( match && (match[1] || !context) ) {                                                                          // 2746\n                                                                                                                     // 2747\n\t\t\t\t// HANDLE: $(html) -> $(array)                                                                                   // 2748\n\t\t\t\tif ( match[1] ) {                                                                                                // 2749\n\t\t\t\t\tcontext = context instanceof jQuery ? context[0] : context;                                                     // 2750\n                                                                                                                     // 2751\n\t\t\t\t\t// scripts is true for back-compat                                                                              // 2752\n\t\t\t\t\t// Intentionally let the error be thrown if parseHTML is not present                                            // 2753\n\t\t\t\t\tjQuery.merge( this, jQuery.parseHTML(                                                                           // 2754\n\t\t\t\t\t\tmatch[1],                                                                                                      // 2755\n\t\t\t\t\t\tcontext && context.nodeType ? context.ownerDocument || context : document,                                     // 2756\n\t\t\t\t\t\ttrue                                                                                                           // 2757\n\t\t\t\t\t) );                                                                                                            // 2758\n                                                                                                                     // 2759\n\t\t\t\t\t// HANDLE: $(html, props)                                                                                       // 2760\n\t\t\t\t\tif ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {                                         // 2761\n\t\t\t\t\t\tfor ( match in context ) {                                                                                     // 2762\n\t\t\t\t\t\t\t// Properties of context are called as methods if possible                                                    // 2763\n\t\t\t\t\t\t\tif ( jQuery.isFunction( this[ match ] ) ) {                                                                   // 2764\n\t\t\t\t\t\t\t\tthis[ match ]( context[ match ] );                                                                           // 2765\n                                                                                                                     // 2766\n\t\t\t\t\t\t\t// ...and otherwise set as attributes                                                                         // 2767\n\t\t\t\t\t\t\t} else {                                                                                                      // 2768\n\t\t\t\t\t\t\t\tthis.attr( match, context[ match ] );                                                                        // 2769\n\t\t\t\t\t\t\t}                                                                                                             // 2770\n\t\t\t\t\t\t}                                                                                                              // 2771\n\t\t\t\t\t}                                                                                                               // 2772\n                                                                                                                     // 2773\n\t\t\t\t\treturn this;                                                                                                    // 2774\n                                                                                                                     // 2775\n\t\t\t\t// HANDLE: $(#id)                                                                                                // 2776\n\t\t\t\t} else {                                                                                                         // 2777\n\t\t\t\t\telem = document.getElementById( match[2] );                                                                     // 2778\n                                                                                                                     // 2779\n\t\t\t\t\t// Check parentNode to catch when Blackberry 4.6 returns                                                        // 2780\n\t\t\t\t\t// nodes that are no longer in the document #6963                                                               // 2781\n\t\t\t\t\tif ( elem && elem.parentNode ) {                                                                                // 2782\n\t\t\t\t\t\t// Handle the case where IE and Opera return items                                                             // 2783\n\t\t\t\t\t\t// by name instead of ID                                                                                       // 2784\n\t\t\t\t\t\tif ( elem.id !== match[2] ) {                                                                                  // 2785\n\t\t\t\t\t\t\treturn rootjQuery.find( selector );                                                                           // 2786\n\t\t\t\t\t\t}                                                                                                              // 2787\n                                                                                                                     // 2788\n\t\t\t\t\t\t// Otherwise, we inject the element directly into the jQuery object                                            // 2789\n\t\t\t\t\t\tthis.length = 1;                                                                                               // 2790\n\t\t\t\t\t\tthis[0] = elem;                                                                                                // 2791\n\t\t\t\t\t}                                                                                                               // 2792\n                                                                                                                     // 2793\n\t\t\t\t\tthis.context = document;                                                                                        // 2794\n\t\t\t\t\tthis.selector = selector;                                                                                       // 2795\n\t\t\t\t\treturn this;                                                                                                    // 2796\n\t\t\t\t}                                                                                                                // 2797\n                                                                                                                     // 2798\n\t\t\t// HANDLE: $(expr, $(...))                                                                                        // 2799\n\t\t\t} else if ( !context || context.jquery ) {                                                                        // 2800\n\t\t\t\treturn ( context || rootjQuery ).find( selector );                                                               // 2801\n                                                                                                                     // 2802\n\t\t\t// HANDLE: $(expr, context)                                                                                       // 2803\n\t\t\t// (which is just equivalent to: $(context).find(expr)                                                            // 2804\n\t\t\t} else {                                                                                                          // 2805\n\t\t\t\treturn this.constructor( context ).find( selector );                                                             // 2806\n\t\t\t}                                                                                                                 // 2807\n                                                                                                                     // 2808\n\t\t// HANDLE: $(DOMElement)                                                                                           // 2809\n\t\t} else if ( selector.nodeType ) {                                                                                  // 2810\n\t\t\tthis.context = this[0] = selector;                                                                                // 2811\n\t\t\tthis.length = 1;                                                                                                  // 2812\n\t\t\treturn this;                                                                                                      // 2813\n                                                                                                                     // 2814\n\t\t// HANDLE: $(function)                                                                                             // 2815\n\t\t// Shortcut for document ready                                                                                     // 2816\n\t\t} else if ( jQuery.isFunction( selector ) ) {                                                                      // 2817\n\t\t\treturn typeof rootjQuery.ready !== \"undefined\" ?                                                                  // 2818\n\t\t\t\trootjQuery.ready( selector ) :                                                                                   // 2819\n\t\t\t\t// Execute immediately if ready is not present                                                                   // 2820\n\t\t\t\tselector( jQuery );                                                                                              // 2821\n\t\t}                                                                                                                  // 2822\n                                                                                                                     // 2823\n\t\tif ( selector.selector !== undefined ) {                                                                           // 2824\n\t\t\tthis.selector = selector.selector;                                                                                // 2825\n\t\t\tthis.context = selector.context;                                                                                  // 2826\n\t\t}                                                                                                                  // 2827\n                                                                                                                     // 2828\n\t\treturn jQuery.makeArray( selector, this );                                                                         // 2829\n\t};                                                                                                                  // 2830\n                                                                                                                     // 2831\n// Give the init function the jQuery prototype for later instantiation                                               // 2832\ninit.prototype = jQuery.fn;                                                                                          // 2833\n                                                                                                                     // 2834\n// Initialize central reference                                                                                      // 2835\nrootjQuery = jQuery( document );                                                                                     // 2836\n                                                                                                                     // 2837\n                                                                                                                     // 2838\nvar rparentsprev = /^(?:parents|prev(?:Until|All))/,                                                                 // 2839\n\t// methods guaranteed to produce a unique set when starting from a unique set                                       // 2840\n\tguaranteedUnique = {                                                                                                // 2841\n\t\tchildren: true,                                                                                                    // 2842\n\t\tcontents: true,                                                                                                    // 2843\n\t\tnext: true,                                                                                                        // 2844\n\t\tprev: true                                                                                                         // 2845\n\t};                                                                                                                  // 2846\n                                                                                                                     // 2847\njQuery.extend({                                                                                                      // 2848\n\tdir: function( elem, dir, until ) {                                                                                 // 2849\n\t\tvar matched = [],                                                                                                  // 2850\n\t\t\tcur = elem[ dir ];                                                                                                // 2851\n                                                                                                                     // 2852\n\t\twhile ( cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery( cur ).is( until )) ) { // 2853\n\t\t\tif ( cur.nodeType === 1 ) {                                                                                       // 2854\n\t\t\t\tmatched.push( cur );                                                                                             // 2855\n\t\t\t}                                                                                                                 // 2856\n\t\t\tcur = cur[dir];                                                                                                   // 2857\n\t\t}                                                                                                                  // 2858\n\t\treturn matched;                                                                                                    // 2859\n\t},                                                                                                                  // 2860\n                                                                                                                     // 2861\n\tsibling: function( n, elem ) {                                                                                      // 2862\n\t\tvar r = [];                                                                                                        // 2863\n                                                                                                                     // 2864\n\t\tfor ( ; n; n = n.nextSibling ) {                                                                                   // 2865\n\t\t\tif ( n.nodeType === 1 && n !== elem ) {                                                                           // 2866\n\t\t\t\tr.push( n );                                                                                                     // 2867\n\t\t\t}                                                                                                                 // 2868\n\t\t}                                                                                                                  // 2869\n                                                                                                                     // 2870\n\t\treturn r;                                                                                                          // 2871\n\t}                                                                                                                   // 2872\n});                                                                                                                  // 2873\n                                                                                                                     // 2874\njQuery.fn.extend({                                                                                                   // 2875\n\thas: function( target ) {                                                                                           // 2876\n\t\tvar i,                                                                                                             // 2877\n\t\t\ttargets = jQuery( target, this ),                                                                                 // 2878\n\t\t\tlen = targets.length;                                                                                             // 2879\n                                                                                                                     // 2880\n\t\treturn this.filter(function() {                                                                                    // 2881\n\t\t\tfor ( i = 0; i < len; i++ ) {                                                                                     // 2882\n\t\t\t\tif ( jQuery.contains( this, targets[i] ) ) {                                                                     // 2883\n\t\t\t\t\treturn true;                                                                                                    // 2884\n\t\t\t\t}                                                                                                                // 2885\n\t\t\t}                                                                                                                 // 2886\n\t\t});                                                                                                                // 2887\n\t},                                                                                                                  // 2888\n                                                                                                                     // 2889\n\tclosest: function( selectors, context ) {                                                                           // 2890\n\t\tvar cur,                                                                                                           // 2891\n\t\t\ti = 0,                                                                                                            // 2892\n\t\t\tl = this.length,                                                                                                  // 2893\n\t\t\tmatched = [],                                                                                                     // 2894\n\t\t\tpos = rneedsContext.test( selectors ) || typeof selectors !== \"string\" ?                                          // 2895\n\t\t\t\tjQuery( selectors, context || this.context ) :                                                                   // 2896\n\t\t\t\t0;                                                                                                               // 2897\n                                                                                                                     // 2898\n\t\tfor ( ; i < l; i++ ) {                                                                                             // 2899\n\t\t\tfor ( cur = this[i]; cur && cur !== context; cur = cur.parentNode ) {                                             // 2900\n\t\t\t\t// Always skip document fragments                                                                                // 2901\n\t\t\t\tif ( cur.nodeType < 11 && (pos ?                                                                                 // 2902\n\t\t\t\t\tpos.index(cur) > -1 :                                                                                           // 2903\n                                                                                                                     // 2904\n\t\t\t\t\t// Don't pass non-elements to Sizzle                                                                            // 2905\n\t\t\t\t\tcur.nodeType === 1 &&                                                                                           // 2906\n\t\t\t\t\t\tjQuery.find.matchesSelector(cur, selectors)) ) {                                                               // 2907\n                                                                                                                     // 2908\n\t\t\t\t\tmatched.push( cur );                                                                                            // 2909\n\t\t\t\t\tbreak;                                                                                                          // 2910\n\t\t\t\t}                                                                                                                // 2911\n\t\t\t}                                                                                                                 // 2912\n\t\t}                                                                                                                  // 2913\n                                                                                                                     // 2914\n\t\treturn this.pushStack( matched.length > 1 ? jQuery.unique( matched ) : matched );                                  // 2915\n\t},                                                                                                                  // 2916\n                                                                                                                     // 2917\n\t// Determine the position of an element within                                                                      // 2918\n\t// the matched set of elements                                                                                      // 2919\n\tindex: function( elem ) {                                                                                           // 2920\n                                                                                                                     // 2921\n\t\t// No argument, return index in parent                                                                             // 2922\n\t\tif ( !elem ) {                                                                                                     // 2923\n\t\t\treturn ( this[0] && this[0].parentNode ) ? this.first().prevAll().length : -1;                                    // 2924\n\t\t}                                                                                                                  // 2925\n                                                                                                                     // 2926\n\t\t// index in selector                                                                                               // 2927\n\t\tif ( typeof elem === \"string\" ) {                                                                                  // 2928\n\t\t\treturn jQuery.inArray( this[0], jQuery( elem ) );                                                                 // 2929\n\t\t}                                                                                                                  // 2930\n                                                                                                                     // 2931\n\t\t// Locate the position of the desired element                                                                      // 2932\n\t\treturn jQuery.inArray(                                                                                             // 2933\n\t\t\t// If it receives a jQuery object, the first element is used                                                      // 2934\n\t\t\telem.jquery ? elem[0] : elem, this );                                                                             // 2935\n\t},                                                                                                                  // 2936\n                                                                                                                     // 2937\n\tadd: function( selector, context ) {                                                                                // 2938\n\t\treturn this.pushStack(                                                                                             // 2939\n\t\t\tjQuery.unique(                                                                                                    // 2940\n\t\t\t\tjQuery.merge( this.get(), jQuery( selector, context ) )                                                          // 2941\n\t\t\t)                                                                                                                 // 2942\n\t\t);                                                                                                                 // 2943\n\t},                                                                                                                  // 2944\n                                                                                                                     // 2945\n\taddBack: function( selector ) {                                                                                     // 2946\n\t\treturn this.add( selector == null ?                                                                                // 2947\n\t\t\tthis.prevObject : this.prevObject.filter(selector)                                                                // 2948\n\t\t);                                                                                                                 // 2949\n\t}                                                                                                                   // 2950\n});                                                                                                                  // 2951\n                                                                                                                     // 2952\nfunction sibling( cur, dir ) {                                                                                       // 2953\n\tdo {                                                                                                                // 2954\n\t\tcur = cur[ dir ];                                                                                                  // 2955\n\t} while ( cur && cur.nodeType !== 1 );                                                                              // 2956\n                                                                                                                     // 2957\n\treturn cur;                                                                                                         // 2958\n}                                                                                                                    // 2959\n                                                                                                                     // 2960\njQuery.each({                                                                                                        // 2961\n\tparent: function( elem ) {                                                                                          // 2962\n\t\tvar parent = elem.parentNode;                                                                                      // 2963\n\t\treturn parent && parent.nodeType !== 11 ? parent : null;                                                           // 2964\n\t},                                                                                                                  // 2965\n\tparents: function( elem ) {                                                                                         // 2966\n\t\treturn jQuery.dir( elem, \"parentNode\" );                                                                           // 2967\n\t},                                                                                                                  // 2968\n\tparentsUntil: function( elem, i, until ) {                                                                          // 2969\n\t\treturn jQuery.dir( elem, \"parentNode\", until );                                                                    // 2970\n\t},                                                                                                                  // 2971\n\tnext: function( elem ) {                                                                                            // 2972\n\t\treturn sibling( elem, \"nextSibling\" );                                                                             // 2973\n\t},                                                                                                                  // 2974\n\tprev: function( elem ) {                                                                                            // 2975\n\t\treturn sibling( elem, \"previousSibling\" );                                                                         // 2976\n\t},                                                                                                                  // 2977\n\tnextAll: function( elem ) {                                                                                         // 2978\n\t\treturn jQuery.dir( elem, \"nextSibling\" );                                                                          // 2979\n\t},                                                                                                                  // 2980\n\tprevAll: function( elem ) {                                                                                         // 2981\n\t\treturn jQuery.dir( elem, \"previousSibling\" );                                                                      // 2982\n\t},                                                                                                                  // 2983\n\tnextUntil: function( elem, i, until ) {                                                                             // 2984\n\t\treturn jQuery.dir( elem, \"nextSibling\", until );                                                                   // 2985\n\t},                                                                                                                  // 2986\n\tprevUntil: function( elem, i, until ) {                                                                             // 2987\n\t\treturn jQuery.dir( elem, \"previousSibling\", until );                                                               // 2988\n\t},                                                                                                                  // 2989\n\tsiblings: function( elem ) {                                                                                        // 2990\n\t\treturn jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );                                               // 2991\n\t},                                                                                                                  // 2992\n\tchildren: function( elem ) {                                                                                        // 2993\n\t\treturn jQuery.sibling( elem.firstChild );                                                                          // 2994\n\t},                                                                                                                  // 2995\n\tcontents: function( elem ) {                                                                                        // 2996\n\t\treturn jQuery.nodeName( elem, \"iframe\" ) ?                                                                         // 2997\n\t\t\telem.contentDocument || elem.contentWindow.document :                                                             // 2998\n\t\t\tjQuery.merge( [], elem.childNodes );                                                                              // 2999\n\t}                                                                                                                   // 3000\n}, function( name, fn ) {                                                                                            // 3001\n\tjQuery.fn[ name ] = function( until, selector ) {                                                                   // 3002\n\t\tvar ret = jQuery.map( this, fn, until );                                                                           // 3003\n                                                                                                                     // 3004\n\t\tif ( name.slice( -5 ) !== \"Until\" ) {                                                                              // 3005\n\t\t\tselector = until;                                                                                                 // 3006\n\t\t}                                                                                                                  // 3007\n                                                                                                                     // 3008\n\t\tif ( selector && typeof selector === \"string\" ) {                                                                  // 3009\n\t\t\tret = jQuery.filter( selector, ret );                                                                             // 3010\n\t\t}                                                                                                                  // 3011\n                                                                                                                     // 3012\n\t\tif ( this.length > 1 ) {                                                                                           // 3013\n\t\t\t// Remove duplicates                                                                                              // 3014\n\t\t\tif ( !guaranteedUnique[ name ] ) {                                                                                // 3015\n\t\t\t\tret = jQuery.unique( ret );                                                                                      // 3016\n\t\t\t}                                                                                                                 // 3017\n                                                                                                                     // 3018\n\t\t\t// Reverse order for parents* and prev-derivatives                                                                // 3019\n\t\t\tif ( rparentsprev.test( name ) ) {                                                                                // 3020\n\t\t\t\tret = ret.reverse();                                                                                             // 3021\n\t\t\t}                                                                                                                 // 3022\n\t\t}                                                                                                                  // 3023\n                                                                                                                     // 3024\n\t\treturn this.pushStack( ret );                                                                                      // 3025\n\t};                                                                                                                  // 3026\n});                                                                                                                  // 3027\nvar rnotwhite = (/\\S+/g);                                                                                            // 3028\n                                                                                                                     // 3029\n                                                                                                                     // 3030\n                                                                                                                     // 3031\n// String to Object options format cache                                                                             // 3032\nvar optionsCache = {};                                                                                               // 3033\n                                                                                                                     // 3034\n// Convert String-formatted options into Object-formatted ones and store in cache                                    // 3035\nfunction createOptions( options ) {                                                                                  // 3036\n\tvar object = optionsCache[ options ] = {};                                                                          // 3037\n\tjQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {                                                // 3038\n\t\tobject[ flag ] = true;                                                                                             // 3039\n\t});                                                                                                                 // 3040\n\treturn object;                                                                                                      // 3041\n}                                                                                                                    // 3042\n                                                                                                                     // 3043\n/*                                                                                                                   // 3044\n * Create a callback list using the following parameters:                                                            // 3045\n *                                                                                                                   // 3046\n *\toptions: an optional list of space-separated options that will change how                                         // 3047\n *\t\t\tthe callback list behaves or a more traditional option object                                                   // 3048\n *                                                                                                                   // 3049\n * By default a callback list will act like an event callback list and can be                                        // 3050\n * \"fired\" multiple times.                                                                                           // 3051\n *                                                                                                                   // 3052\n * Possible options:                                                                                                 // 3053\n *                                                                                                                   // 3054\n *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)                                    // 3055\n *                                                                                                                   // 3056\n *\tmemory:\t\t\twill keep track of previous values and will call any callback added                                     // 3057\n *\t\t\t\t\tafter the list has been fired right away with the latest \"memorized\"                                          // 3058\n *\t\t\t\t\tvalues (like a Deferred)                                                                                      // 3059\n *                                                                                                                   // 3060\n *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)                                // 3061\n *                                                                                                                   // 3062\n *\tstopOnFalse:\tinterrupt callings when a callback returns false                                                     // 3063\n *                                                                                                                   // 3064\n */                                                                                                                  // 3065\njQuery.Callbacks = function( options ) {                                                                             // 3066\n                                                                                                                     // 3067\n\t// Convert options from String-formatted to Object-formatted if needed                                              // 3068\n\t// (we check in cache first)                                                                                        // 3069\n\toptions = typeof options === \"string\" ?                                                                             // 3070\n\t\t( optionsCache[ options ] || createOptions( options ) ) :                                                          // 3071\n\t\tjQuery.extend( {}, options );                                                                                      // 3072\n                                                                                                                     // 3073\n\tvar // Flag to know if list is currently firing                                                                     // 3074\n\t\tfiring,                                                                                                            // 3075\n\t\t// Last fire value (for non-forgettable lists)                                                                     // 3076\n\t\tmemory,                                                                                                            // 3077\n\t\t// Flag to know if list was already fired                                                                          // 3078\n\t\tfired,                                                                                                             // 3079\n\t\t// End of the loop when firing                                                                                     // 3080\n\t\tfiringLength,                                                                                                      // 3081\n\t\t// Index of currently firing callback (modified by remove if needed)                                               // 3082\n\t\tfiringIndex,                                                                                                       // 3083\n\t\t// First callback to fire (used internally by add and fireWith)                                                    // 3084\n\t\tfiringStart,                                                                                                       // 3085\n\t\t// Actual callback list                                                                                            // 3086\n\t\tlist = [],                                                                                                         // 3087\n\t\t// Stack of fire calls for repeatable lists                                                                        // 3088\n\t\tstack = !options.once && [],                                                                                       // 3089\n\t\t// Fire callbacks                                                                                                  // 3090\n\t\tfire = function( data ) {                                                                                          // 3091\n\t\t\tmemory = options.memory && data;                                                                                  // 3092\n\t\t\tfired = true;                                                                                                     // 3093\n\t\t\tfiringIndex = firingStart || 0;                                                                                   // 3094\n\t\t\tfiringStart = 0;                                                                                                  // 3095\n\t\t\tfiringLength = list.length;                                                                                       // 3096\n\t\t\tfiring = true;                                                                                                    // 3097\n\t\t\tfor ( ; list && firingIndex < firingLength; firingIndex++ ) {                                                     // 3098\n\t\t\t\tif ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {                      // 3099\n\t\t\t\t\tmemory = false; // To prevent further calls using add                                                           // 3100\n\t\t\t\t\tbreak;                                                                                                          // 3101\n\t\t\t\t}                                                                                                                // 3102\n\t\t\t}                                                                                                                 // 3103\n\t\t\tfiring = false;                                                                                                   // 3104\n\t\t\tif ( list ) {                                                                                                     // 3105\n\t\t\t\tif ( stack ) {                                                                                                   // 3106\n\t\t\t\t\tif ( stack.length ) {                                                                                           // 3107\n\t\t\t\t\t\tfire( stack.shift() );                                                                                         // 3108\n\t\t\t\t\t}                                                                                                               // 3109\n\t\t\t\t} else if ( memory ) {                                                                                           // 3110\n\t\t\t\t\tlist = [];                                                                                                      // 3111\n\t\t\t\t} else {                                                                                                         // 3112\n\t\t\t\t\tself.disable();                                                                                                 // 3113\n\t\t\t\t}                                                                                                                // 3114\n\t\t\t}                                                                                                                 // 3115\n\t\t},                                                                                                                 // 3116\n\t\t// Actual Callbacks object                                                                                         // 3117\n\t\tself = {                                                                                                           // 3118\n\t\t\t// Add a callback or a collection of callbacks to the list                                                        // 3119\n\t\t\tadd: function() {                                                                                                 // 3120\n\t\t\t\tif ( list ) {                                                                                                    // 3121\n\t\t\t\t\t// First, we save the current length                                                                            // 3122\n\t\t\t\t\tvar start = list.length;                                                                                        // 3123\n\t\t\t\t\t(function add( args ) {                                                                                         // 3124\n\t\t\t\t\t\tjQuery.each( args, function( _, arg ) {                                                                        // 3125\n\t\t\t\t\t\t\tvar type = jQuery.type( arg );                                                                                // 3126\n\t\t\t\t\t\t\tif ( type === \"function\" ) {                                                                                  // 3127\n\t\t\t\t\t\t\t\tif ( !options.unique || !self.has( arg ) ) {                                                                 // 3128\n\t\t\t\t\t\t\t\t\tlist.push( arg );                                                                                           // 3129\n\t\t\t\t\t\t\t\t}                                                                                                            // 3130\n\t\t\t\t\t\t\t} else if ( arg && arg.length && type !== \"string\" ) {                                                        // 3131\n\t\t\t\t\t\t\t\t// Inspect recursively                                                                                       // 3132\n\t\t\t\t\t\t\t\tadd( arg );                                                                                                  // 3133\n\t\t\t\t\t\t\t}                                                                                                             // 3134\n\t\t\t\t\t\t});                                                                                                            // 3135\n\t\t\t\t\t})( arguments );                                                                                                // 3136\n\t\t\t\t\t// Do we need to add the callbacks to the                                                                       // 3137\n\t\t\t\t\t// current firing batch?                                                                                        // 3138\n\t\t\t\t\tif ( firing ) {                                                                                                 // 3139\n\t\t\t\t\t\tfiringLength = list.length;                                                                                    // 3140\n\t\t\t\t\t// With memory, if we're not firing then                                                                        // 3141\n\t\t\t\t\t// we should call right away                                                                                    // 3142\n\t\t\t\t\t} else if ( memory ) {                                                                                          // 3143\n\t\t\t\t\t\tfiringStart = start;                                                                                           // 3144\n\t\t\t\t\t\tfire( memory );                                                                                                // 3145\n\t\t\t\t\t}                                                                                                               // 3146\n\t\t\t\t}                                                                                                                // 3147\n\t\t\t\treturn this;                                                                                                     // 3148\n\t\t\t},                                                                                                                // 3149\n\t\t\t// Remove a callback from the list                                                                                // 3150\n\t\t\tremove: function() {                                                                                              // 3151\n\t\t\t\tif ( list ) {                                                                                                    // 3152\n\t\t\t\t\tjQuery.each( arguments, function( _, arg ) {                                                                    // 3153\n\t\t\t\t\t\tvar index;                                                                                                     // 3154\n\t\t\t\t\t\twhile ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {                                                // 3155\n\t\t\t\t\t\t\tlist.splice( index, 1 );                                                                                      // 3156\n\t\t\t\t\t\t\t// Handle firing indexes                                                                                      // 3157\n\t\t\t\t\t\t\tif ( firing ) {                                                                                               // 3158\n\t\t\t\t\t\t\t\tif ( index <= firingLength ) {                                                                               // 3159\n\t\t\t\t\t\t\t\t\tfiringLength--;                                                                                             // 3160\n\t\t\t\t\t\t\t\t}                                                                                                            // 3161\n\t\t\t\t\t\t\t\tif ( index <= firingIndex ) {                                                                                // 3162\n\t\t\t\t\t\t\t\t\tfiringIndex--;                                                                                              // 3163\n\t\t\t\t\t\t\t\t}                                                                                                            // 3164\n\t\t\t\t\t\t\t}                                                                                                             // 3165\n\t\t\t\t\t\t}                                                                                                              // 3166\n\t\t\t\t\t});                                                                                                             // 3167\n\t\t\t\t}                                                                                                                // 3168\n\t\t\t\treturn this;                                                                                                     // 3169\n\t\t\t},                                                                                                                // 3170\n\t\t\t// Check if a given callback is in the list.                                                                      // 3171\n\t\t\t// If no argument is given, return whether or not list has callbacks attached.                                    // 3172\n\t\t\thas: function( fn ) {                                                                                             // 3173\n\t\t\t\treturn fn ? jQuery.inArray( fn, list ) > -1 : !!( list && list.length );                                         // 3174\n\t\t\t},                                                                                                                // 3175\n\t\t\t// Remove all callbacks from the list                                                                             // 3176\n\t\t\tempty: function() {                                                                                               // 3177\n\t\t\t\tlist = [];                                                                                                       // 3178\n\t\t\t\tfiringLength = 0;                                                                                                // 3179\n\t\t\t\treturn this;                                                                                                     // 3180\n\t\t\t},                                                                                                                // 3181\n\t\t\t// Have the list do nothing anymore                                                                               // 3182\n\t\t\tdisable: function() {                                                                                             // 3183\n\t\t\t\tlist = stack = memory = undefined;                                                                               // 3184\n\t\t\t\treturn this;                                                                                                     // 3185\n\t\t\t},                                                                                                                // 3186\n\t\t\t// Is it disabled?                                                                                                // 3187\n\t\t\tdisabled: function() {                                                                                            // 3188\n\t\t\t\treturn !list;                                                                                                    // 3189\n\t\t\t},                                                                                                                // 3190\n\t\t\t// Lock the list in its current state                                                                             // 3191\n\t\t\tlock: function() {                                                                                                // 3192\n\t\t\t\tstack = undefined;                                                                                               // 3193\n\t\t\t\tif ( !memory ) {                                                                                                 // 3194\n\t\t\t\t\tself.disable();                                                                                                 // 3195\n\t\t\t\t}                                                                                                                // 3196\n\t\t\t\treturn this;                                                                                                     // 3197\n\t\t\t},                                                                                                                // 3198\n\t\t\t// Is it locked?                                                                                                  // 3199\n\t\t\tlocked: function() {                                                                                              // 3200\n\t\t\t\treturn !stack;                                                                                                   // 3201\n\t\t\t},                                                                                                                // 3202\n\t\t\t// Call all callbacks with the given context and arguments                                                        // 3203\n\t\t\tfireWith: function( context, args ) {                                                                             // 3204\n\t\t\t\tif ( list && ( !fired || stack ) ) {                                                                             // 3205\n\t\t\t\t\targs = args || [];                                                                                              // 3206\n\t\t\t\t\targs = [ context, args.slice ? args.slice() : args ];                                                           // 3207\n\t\t\t\t\tif ( firing ) {                                                                                                 // 3208\n\t\t\t\t\t\tstack.push( args );                                                                                            // 3209\n\t\t\t\t\t} else {                                                                                                        // 3210\n\t\t\t\t\t\tfire( args );                                                                                                  // 3211\n\t\t\t\t\t}                                                                                                               // 3212\n\t\t\t\t}                                                                                                                // 3213\n\t\t\t\treturn this;                                                                                                     // 3214\n\t\t\t},                                                                                                                // 3215\n\t\t\t// Call all the callbacks with the given arguments                                                                // 3216\n\t\t\tfire: function() {                                                                                                // 3217\n\t\t\t\tself.fireWith( this, arguments );                                                                                // 3218\n\t\t\t\treturn this;                                                                                                     // 3219\n\t\t\t},                                                                                                                // 3220\n\t\t\t// To know if the callbacks have already been called at least once                                                // 3221\n\t\t\tfired: function() {                                                                                               // 3222\n\t\t\t\treturn !!fired;                                                                                                  // 3223\n\t\t\t}                                                                                                                 // 3224\n\t\t};                                                                                                                 // 3225\n                                                                                                                     // 3226\n\treturn self;                                                                                                        // 3227\n};                                                                                                                   // 3228\n                                                                                                                     // 3229\n                                                                                                                     // 3230\njQuery.extend({                                                                                                      // 3231\n                                                                                                                     // 3232\n\tDeferred: function( func ) {                                                                                        // 3233\n\t\tvar tuples = [                                                                                                     // 3234\n\t\t\t\t// action, add listener, listener list, final state                                                              // 3235\n\t\t\t\t[ \"resolve\", \"done\", jQuery.Callbacks(\"once memory\"), \"resolved\" ],                                              // 3236\n\t\t\t\t[ \"reject\", \"fail\", jQuery.Callbacks(\"once memory\"), \"rejected\" ],                                               // 3237\n\t\t\t\t[ \"notify\", \"progress\", jQuery.Callbacks(\"memory\") ]                                                             // 3238\n\t\t\t],                                                                                                                // 3239\n\t\t\tstate = \"pending\",                                                                                                // 3240\n\t\t\tpromise = {                                                                                                       // 3241\n\t\t\t\tstate: function() {                                                                                              // 3242\n\t\t\t\t\treturn state;                                                                                                   // 3243\n\t\t\t\t},                                                                                                               // 3244\n\t\t\t\talways: function() {                                                                                             // 3245\n\t\t\t\t\tdeferred.done( arguments ).fail( arguments );                                                                   // 3246\n\t\t\t\t\treturn this;                                                                                                    // 3247\n\t\t\t\t},                                                                                                               // 3248\n\t\t\t\tthen: function( /* fnDone, fnFail, fnProgress */ ) {                                                             // 3249\n\t\t\t\t\tvar fns = arguments;                                                                                            // 3250\n\t\t\t\t\treturn jQuery.Deferred(function( newDefer ) {                                                                   // 3251\n\t\t\t\t\t\tjQuery.each( tuples, function( i, tuple ) {                                                                    // 3252\n\t\t\t\t\t\t\tvar fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];                                                           // 3253\n\t\t\t\t\t\t\t// deferred[ done | fail | progress ] for forwarding actions to newDefer                                      // 3254\n\t\t\t\t\t\t\tdeferred[ tuple[1] ](function() {                                                                             // 3255\n\t\t\t\t\t\t\t\tvar returned = fn && fn.apply( this, arguments );                                                            // 3256\n\t\t\t\t\t\t\t\tif ( returned && jQuery.isFunction( returned.promise ) ) {                                                   // 3257\n\t\t\t\t\t\t\t\t\treturned.promise()                                                                                          // 3258\n\t\t\t\t\t\t\t\t\t\t.done( newDefer.resolve )                                                                                  // 3259\n\t\t\t\t\t\t\t\t\t\t.fail( newDefer.reject )                                                                                   // 3260\n\t\t\t\t\t\t\t\t\t\t.progress( newDefer.notify );                                                                              // 3261\n\t\t\t\t\t\t\t\t} else {                                                                                                     // 3262\n\t\t\t\t\t\t\t\t\tnewDefer[ tuple[ 0 ] + \"With\" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );\n\t\t\t\t\t\t\t\t}                                                                                                            // 3264\n\t\t\t\t\t\t\t});                                                                                                           // 3265\n\t\t\t\t\t\t});                                                                                                            // 3266\n\t\t\t\t\t\tfns = null;                                                                                                    // 3267\n\t\t\t\t\t}).promise();                                                                                                   // 3268\n\t\t\t\t},                                                                                                               // 3269\n\t\t\t\t// Get a promise for this deferred                                                                               // 3270\n\t\t\t\t// If obj is provided, the promise aspect is added to the object                                                 // 3271\n\t\t\t\tpromise: function( obj ) {                                                                                       // 3272\n\t\t\t\t\treturn obj != null ? jQuery.extend( obj, promise ) : promise;                                                   // 3273\n\t\t\t\t}                                                                                                                // 3274\n\t\t\t},                                                                                                                // 3275\n\t\t\tdeferred = {};                                                                                                    // 3276\n                                                                                                                     // 3277\n\t\t// Keep pipe for back-compat                                                                                       // 3278\n\t\tpromise.pipe = promise.then;                                                                                       // 3279\n                                                                                                                     // 3280\n\t\t// Add list-specific methods                                                                                       // 3281\n\t\tjQuery.each( tuples, function( i, tuple ) {                                                                        // 3282\n\t\t\tvar list = tuple[ 2 ],                                                                                            // 3283\n\t\t\t\tstateString = tuple[ 3 ];                                                                                        // 3284\n                                                                                                                     // 3285\n\t\t\t// promise[ done | fail | progress ] = list.add                                                                   // 3286\n\t\t\tpromise[ tuple[1] ] = list.add;                                                                                   // 3287\n                                                                                                                     // 3288\n\t\t\t// Handle state                                                                                                   // 3289\n\t\t\tif ( stateString ) {                                                                                              // 3290\n\t\t\t\tlist.add(function() {                                                                                            // 3291\n\t\t\t\t\t// state = [ resolved | rejected ]                                                                              // 3292\n\t\t\t\t\tstate = stateString;                                                                                            // 3293\n                                                                                                                     // 3294\n\t\t\t\t// [ reject_list | resolve_list ].disable; progress_list.lock                                                    // 3295\n\t\t\t\t}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );                                                        // 3296\n\t\t\t}                                                                                                                 // 3297\n                                                                                                                     // 3298\n\t\t\t// deferred[ resolve | reject | notify ]                                                                          // 3299\n\t\t\tdeferred[ tuple[0] ] = function() {                                                                               // 3300\n\t\t\t\tdeferred[ tuple[0] + \"With\" ]( this === deferred ? promise : this, arguments );                                  // 3301\n\t\t\t\treturn this;                                                                                                     // 3302\n\t\t\t};                                                                                                                // 3303\n\t\t\tdeferred[ tuple[0] + \"With\" ] = list.fireWith;                                                                    // 3304\n\t\t});                                                                                                                // 3305\n                                                                                                                     // 3306\n\t\t// Make the deferred a promise                                                                                     // 3307\n\t\tpromise.promise( deferred );                                                                                       // 3308\n                                                                                                                     // 3309\n\t\t// Call given func if any                                                                                          // 3310\n\t\tif ( func ) {                                                                                                      // 3311\n\t\t\tfunc.call( deferred, deferred );                                                                                  // 3312\n\t\t}                                                                                                                  // 3313\n                                                                                                                     // 3314\n\t\t// All done!                                                                                                       // 3315\n\t\treturn deferred;                                                                                                   // 3316\n\t},                                                                                                                  // 3317\n                                                                                                                     // 3318\n\t// Deferred helper                                                                                                  // 3319\n\twhen: function( subordinate /* , ..., subordinateN */ ) {                                                           // 3320\n\t\tvar i = 0,                                                                                                         // 3321\n\t\t\tresolveValues = slice.call( arguments ),                                                                          // 3322\n\t\t\tlength = resolveValues.length,                                                                                    // 3323\n                                                                                                                     // 3324\n\t\t\t// the count of uncompleted subordinates                                                                          // 3325\n\t\t\tremaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,             // 3326\n                                                                                                                     // 3327\n\t\t\t// the master Deferred. If resolveValues consist of only a single Deferred, just use that.                        // 3328\n\t\t\tdeferred = remaining === 1 ? subordinate : jQuery.Deferred(),                                                     // 3329\n                                                                                                                     // 3330\n\t\t\t// Update function for both resolve and progress values                                                           // 3331\n\t\t\tupdateFunc = function( i, contexts, values ) {                                                                    // 3332\n\t\t\t\treturn function( value ) {                                                                                       // 3333\n\t\t\t\t\tcontexts[ i ] = this;                                                                                           // 3334\n\t\t\t\t\tvalues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;                                           // 3335\n\t\t\t\t\tif ( values === progressValues ) {                                                                              // 3336\n\t\t\t\t\t\tdeferred.notifyWith( contexts, values );                                                                       // 3337\n                                                                                                                     // 3338\n\t\t\t\t\t} else if ( !(--remaining) ) {                                                                                  // 3339\n\t\t\t\t\t\tdeferred.resolveWith( contexts, values );                                                                      // 3340\n\t\t\t\t\t}                                                                                                               // 3341\n\t\t\t\t};                                                                                                               // 3342\n\t\t\t},                                                                                                                // 3343\n                                                                                                                     // 3344\n\t\t\tprogressValues, progressContexts, resolveContexts;                                                                // 3345\n                                                                                                                     // 3346\n\t\t// add listeners to Deferred subordinates; treat others as resolved                                                // 3347\n\t\tif ( length > 1 ) {                                                                                                // 3348\n\t\t\tprogressValues = new Array( length );                                                                             // 3349\n\t\t\tprogressContexts = new Array( length );                                                                           // 3350\n\t\t\tresolveContexts = new Array( length );                                                                            // 3351\n\t\t\tfor ( ; i < length; i++ ) {                                                                                       // 3352\n\t\t\t\tif ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {                                   // 3353\n\t\t\t\t\tresolveValues[ i ].promise()                                                                                    // 3354\n\t\t\t\t\t\t.done( updateFunc( i, resolveContexts, resolveValues ) )                                                       // 3355\n\t\t\t\t\t\t.fail( deferred.reject )                                                                                       // 3356\n\t\t\t\t\t\t.progress( updateFunc( i, progressContexts, progressValues ) );                                                // 3357\n\t\t\t\t} else {                                                                                                         // 3358\n\t\t\t\t\t--remaining;                                                                                                    // 3359\n\t\t\t\t}                                                                                                                // 3360\n\t\t\t}                                                                                                                 // 3361\n\t\t}                                                                                                                  // 3362\n                                                                                                                     // 3363\n\t\t// if we're not waiting on anything, resolve the master                                                            // 3364\n\t\tif ( !remaining ) {                                                                                                // 3365\n\t\t\tdeferred.resolveWith( resolveContexts, resolveValues );                                                           // 3366\n\t\t}                                                                                                                  // 3367\n                                                                                                                     // 3368\n\t\treturn deferred.promise();                                                                                         // 3369\n\t}                                                                                                                   // 3370\n});                                                                                                                  // 3371\n                                                                                                                     // 3372\n                                                                                                                     // 3373\n// The deferred used on DOM ready                                                                                    // 3374\nvar readyList;                                                                                                       // 3375\n                                                                                                                     // 3376\njQuery.fn.ready = function( fn ) {                                                                                   // 3377\n\t// Add the callback                                                                                                 // 3378\n\tjQuery.ready.promise().done( fn );                                                                                  // 3379\n                                                                                                                     // 3380\n\treturn this;                                                                                                        // 3381\n};                                                                                                                   // 3382\n                                                                                                                     // 3383\njQuery.extend({                                                                                                      // 3384\n\t// Is the DOM ready to be used? Set to true once it occurs.                                                         // 3385\n\tisReady: false,                                                                                                     // 3386\n                                                                                                                     // 3387\n\t// A counter to track how many items to wait for before                                                             // 3388\n\t// the ready event fires. See #6781                                                                                 // 3389\n\treadyWait: 1,                                                                                                       // 3390\n                                                                                                                     // 3391\n\t// Hold (or release) the ready event                                                                                // 3392\n\tholdReady: function( hold ) {                                                                                       // 3393\n\t\tif ( hold ) {                                                                                                      // 3394\n\t\t\tjQuery.readyWait++;                                                                                               // 3395\n\t\t} else {                                                                                                           // 3396\n\t\t\tjQuery.ready( true );                                                                                             // 3397\n\t\t}                                                                                                                  // 3398\n\t},                                                                                                                  // 3399\n                                                                                                                     // 3400\n\t// Handle when the DOM is ready                                                                                     // 3401\n\tready: function( wait ) {                                                                                           // 3402\n                                                                                                                     // 3403\n\t\t// Abort if there are pending holds or we're already ready                                                         // 3404\n\t\tif ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {                                                       // 3405\n\t\t\treturn;                                                                                                           // 3406\n\t\t}                                                                                                                  // 3407\n                                                                                                                     // 3408\n\t\t// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).                           // 3409\n\t\tif ( !document.body ) {                                                                                            // 3410\n\t\t\treturn setTimeout( jQuery.ready );                                                                                // 3411\n\t\t}                                                                                                                  // 3412\n                                                                                                                     // 3413\n\t\t// Remember that the DOM is ready                                                                                  // 3414\n\t\tjQuery.isReady = true;                                                                                             // 3415\n                                                                                                                     // 3416\n\t\t// If a normal DOM Ready event fired, decrement, and wait if need be                                               // 3417\n\t\tif ( wait !== true && --jQuery.readyWait > 0 ) {                                                                   // 3418\n\t\t\treturn;                                                                                                           // 3419\n\t\t}                                                                                                                  // 3420\n                                                                                                                     // 3421\n\t\t// If there are functions bound, to execute                                                                        // 3422\n\t\treadyList.resolveWith( document, [ jQuery ] );                                                                     // 3423\n                                                                                                                     // 3424\n\t\t// Trigger any bound ready events                                                                                  // 3425\n\t\tif ( jQuery.fn.trigger ) {                                                                                         // 3426\n\t\t\tjQuery( document ).trigger(\"ready\").off(\"ready\");                                                                 // 3427\n\t\t}                                                                                                                  // 3428\n\t}                                                                                                                   // 3429\n});                                                                                                                  // 3430\n                                                                                                                     // 3431\n/**                                                                                                                  // 3432\n * Clean-up method for dom ready events                                                                              // 3433\n */                                                                                                                  // 3434\nfunction detach() {                                                                                                  // 3435\n\tif ( document.addEventListener ) {                                                                                  // 3436\n\t\tdocument.removeEventListener( \"DOMContentLoaded\", completed, false );                                              // 3437\n\t\twindow.removeEventListener( \"load\", completed, false );                                                            // 3438\n                                                                                                                     // 3439\n\t} else {                                                                                                            // 3440\n\t\tdocument.detachEvent( \"onreadystatechange\", completed );                                                           // 3441\n\t\twindow.detachEvent( \"onload\", completed );                                                                         // 3442\n\t}                                                                                                                   // 3443\n}                                                                                                                    // 3444\n                                                                                                                     // 3445\n/**                                                                                                                  // 3446\n * The ready event handler and self cleanup method                                                                   // 3447\n */                                                                                                                  // 3448\nfunction completed() {                                                                                               // 3449\n\t// readyState === \"complete\" is good enough for us to call the dom ready in oldIE                                   // 3450\n\tif ( document.addEventListener || event.type === \"load\" || document.readyState === \"complete\" ) {                   // 3451\n\t\tdetach();                                                                                                          // 3452\n\t\tjQuery.ready();                                                                                                    // 3453\n\t}                                                                                                                   // 3454\n}                                                                                                                    // 3455\n                                                                                                                     // 3456\njQuery.ready.promise = function( obj ) {                                                                             // 3457\n\tif ( !readyList ) {                                                                                                 // 3458\n                                                                                                                     // 3459\n\t\treadyList = jQuery.Deferred();                                                                                     // 3460\n                                                                                                                     // 3461\n\t\t// Catch cases where $(document).ready() is called after the browser event has already occurred.                   // 3462\n\t\t// we once tried to use readyState \"interactive\" here, but it caused issues like the one                           // 3463\n\t\t// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15                                       // 3464\n\t\tif ( document.readyState === \"complete\" ) {                                                                        // 3465\n\t\t\t// Handle it asynchronously to allow scripts the opportunity to delay ready                                       // 3466\n\t\t\tsetTimeout( jQuery.ready );                                                                                       // 3467\n                                                                                                                     // 3468\n\t\t// Standards-based browsers support DOMContentLoaded                                                               // 3469\n\t\t} else if ( document.addEventListener ) {                                                                          // 3470\n\t\t\t// Use the handy event callback                                                                                   // 3471\n\t\t\tdocument.addEventListener( \"DOMContentLoaded\", completed, false );                                                // 3472\n                                                                                                                     // 3473\n\t\t\t// A fallback to window.onload, that will always work                                                             // 3474\n\t\t\twindow.addEventListener( \"load\", completed, false );                                                              // 3475\n                                                                                                                     // 3476\n\t\t// If IE event model is used                                                                                       // 3477\n\t\t} else {                                                                                                           // 3478\n\t\t\t// Ensure firing before onload, maybe late but safe also for iframes                                              // 3479\n\t\t\tdocument.attachEvent( \"onreadystatechange\", completed );                                                          // 3480\n                                                                                                                     // 3481\n\t\t\t// A fallback to window.onload, that will always work                                                             // 3482\n\t\t\twindow.attachEvent( \"onload\", completed );                                                                        // 3483\n                                                                                                                     // 3484\n\t\t\t// If IE and not a frame                                                                                          // 3485\n\t\t\t// continually check to see if the document is ready                                                              // 3486\n\t\t\tvar top = false;                                                                                                  // 3487\n                                                                                                                     // 3488\n\t\t\ttry {                                                                                                             // 3489\n\t\t\t\ttop = window.frameElement == null && document.documentElement;                                                   // 3490\n\t\t\t} catch(e) {}                                                                                                     // 3491\n                                                                                                                     // 3492\n\t\t\tif ( top && top.doScroll ) {                                                                                      // 3493\n\t\t\t\t(function doScrollCheck() {                                                                                      // 3494\n\t\t\t\t\tif ( !jQuery.isReady ) {                                                                                        // 3495\n                                                                                                                     // 3496\n\t\t\t\t\t\ttry {                                                                                                          // 3497\n\t\t\t\t\t\t\t// Use the trick by Diego Perini                                                                              // 3498\n\t\t\t\t\t\t\t// http://javascript.nwbox.com/IEContentLoaded/                                                               // 3499\n\t\t\t\t\t\t\ttop.doScroll(\"left\");                                                                                         // 3500\n\t\t\t\t\t\t} catch(e) {                                                                                                   // 3501\n\t\t\t\t\t\t\treturn setTimeout( doScrollCheck, 50 );                                                                       // 3502\n\t\t\t\t\t\t}                                                                                                              // 3503\n                                                                                                                     // 3504\n\t\t\t\t\t\t// detach all dom ready events                                                                                 // 3505\n\t\t\t\t\t\tdetach();                                                                                                      // 3506\n                                                                                                                     // 3507\n\t\t\t\t\t\t// and execute any waiting functions                                                                           // 3508\n\t\t\t\t\t\tjQuery.ready();                                                                                                // 3509\n\t\t\t\t\t}                                                                                                               // 3510\n\t\t\t\t})();                                                                                                            // 3511\n\t\t\t}                                                                                                                 // 3512\n\t\t}                                                                                                                  // 3513\n\t}                                                                                                                   // 3514\n\treturn readyList.promise( obj );                                                                                    // 3515\n};                                                                                                                   // 3516\n                                                                                                                     // 3517\n                                                                                                                     // 3518\nvar strundefined = typeof undefined;                                                                                 // 3519\n                                                                                                                     // 3520\n                                                                                                                     // 3521\n                                                                                                                     // 3522\n// Support: IE<9                                                                                                     // 3523\n// Iteration over object's inherited properties before its own                                                       // 3524\nvar i;                                                                                                               // 3525\nfor ( i in jQuery( support ) ) {                                                                                     // 3526\n\tbreak;                                                                                                              // 3527\n}                                                                                                                    // 3528\nsupport.ownLast = i !== \"0\";                                                                                         // 3529\n                                                                                                                     // 3530\n// Note: most support tests are defined in their respective modules.                                                 // 3531\n// false until the test is run                                                                                       // 3532\nsupport.inlineBlockNeedsLayout = false;                                                                              // 3533\n                                                                                                                     // 3534\njQuery(function() {                                                                                                  // 3535\n\t// We need to execute this one support test ASAP because we need to know                                            // 3536\n\t// if body.style.zoom needs to be set.                                                                              // 3537\n                                                                                                                     // 3538\n\tvar container, div,                                                                                                 // 3539\n\t\tbody = document.getElementsByTagName(\"body\")[0];                                                                   // 3540\n                                                                                                                     // 3541\n\tif ( !body ) {                                                                                                      // 3542\n\t\t// Return for frameset docs that don't have a body                                                                 // 3543\n\t\treturn;                                                                                                            // 3544\n\t}                                                                                                                   // 3545\n                                                                                                                     // 3546\n\t// Setup                                                                                                            // 3547\n\tcontainer = document.createElement( \"div\" );                                                                        // 3548\n\tcontainer.style.cssText = \"border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px\";          // 3549\n                                                                                                                     // 3550\n\tdiv = document.createElement( \"div\" );                                                                              // 3551\n\tbody.appendChild( container ).appendChild( div );                                                                   // 3552\n                                                                                                                     // 3553\n\tif ( typeof div.style.zoom !== strundefined ) {                                                                     // 3554\n\t\t// Support: IE<8                                                                                                   // 3555\n\t\t// Check if natively block-level elements act like inline-block                                                    // 3556\n\t\t// elements when setting their display to 'inline' and giving                                                      // 3557\n\t\t// them layout                                                                                                     // 3558\n\t\tdiv.style.cssText = \"border:0;margin:0;width:1px;padding:1px;display:inline;zoom:1\";                               // 3559\n                                                                                                                     // 3560\n\t\tif ( (support.inlineBlockNeedsLayout = ( div.offsetWidth === 3 )) ) {                                              // 3561\n\t\t\t// Prevent IE 6 from affecting layout for positioned elements #11048                                              // 3562\n\t\t\t// Prevent IE from shrinking the body in IE 7 mode #12869                                                         // 3563\n\t\t\t// Support: IE<8                                                                                                  // 3564\n\t\t\tbody.style.zoom = 1;                                                                                              // 3565\n\t\t}                                                                                                                  // 3566\n\t}                                                                                                                   // 3567\n                                                                                                                     // 3568\n\tbody.removeChild( container );                                                                                      // 3569\n                                                                                                                     // 3570\n\t// Null elements to avoid leaks in IE                                                                               // 3571\n\tcontainer = div = null;                                                                                             // 3572\n});                                                                                                                  // 3573\n                                                                                                                     // 3574\n                                                                                                                     // 3575\n                                                                                                                     // 3576\n                                                                                                                     // 3577\n(function() {                                                                                                        // 3578\n\tvar div = document.createElement( \"div\" );                                                                          // 3579\n                                                                                                                     // 3580\n\t// Execute the test only if not already executed in another module.                                                 // 3581\n\tif (support.deleteExpando == null) {                                                                                // 3582\n\t\t// Support: IE<9                                                                                                   // 3583\n\t\tsupport.deleteExpando = true;                                                                                      // 3584\n\t\ttry {                                                                                                              // 3585\n\t\t\tdelete div.test;                                                                                                  // 3586\n\t\t} catch( e ) {                                                                                                     // 3587\n\t\t\tsupport.deleteExpando = false;                                                                                    // 3588\n\t\t}                                                                                                                  // 3589\n\t}                                                                                                                   // 3590\n                                                                                                                     // 3591\n\t// Null elements to avoid leaks in IE.                                                                              // 3592\n\tdiv = null;                                                                                                         // 3593\n})();                                                                                                                // 3594\n                                                                                                                     // 3595\n                                                                                                                     // 3596\n/**                                                                                                                  // 3597\n * Determines whether an object can have data                                                                        // 3598\n */                                                                                                                  // 3599\njQuery.acceptData = function( elem ) {                                                                               // 3600\n\tvar noData = jQuery.noData[ (elem.nodeName + \" \").toLowerCase() ],                                                  // 3601\n\t\tnodeType = +elem.nodeType || 1;                                                                                    // 3602\n                                                                                                                     // 3603\n\t// Do not set data on non-element DOM nodes because it will not be cleared (#8335).                                 // 3604\n\treturn nodeType !== 1 && nodeType !== 9 ?                                                                           // 3605\n\t\tfalse :                                                                                                            // 3606\n                                                                                                                     // 3607\n\t\t// Nodes accept data unless otherwise specified; rejection can be conditional                                      // 3608\n\t\t!noData || noData !== true && elem.getAttribute(\"classid\") === noData;                                             // 3609\n};                                                                                                                   // 3610\n                                                                                                                     // 3611\n                                                                                                                     // 3612\nvar rbrace = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,                                                                        // 3613\n\trmultiDash = /([A-Z])/g;                                                                                            // 3614\n                                                                                                                     // 3615\nfunction dataAttr( elem, key, data ) {                                                                               // 3616\n\t// If nothing was found internally, try to fetch any                                                                // 3617\n\t// data from the HTML5 data-* attribute                                                                             // 3618\n\tif ( data === undefined && elem.nodeType === 1 ) {                                                                  // 3619\n                                                                                                                     // 3620\n\t\tvar name = \"data-\" + key.replace( rmultiDash, \"-$1\" ).toLowerCase();                                               // 3621\n                                                                                                                     // 3622\n\t\tdata = elem.getAttribute( name );                                                                                  // 3623\n                                                                                                                     // 3624\n\t\tif ( typeof data === \"string\" ) {                                                                                  // 3625\n\t\t\ttry {                                                                                                             // 3626\n\t\t\t\tdata = data === \"true\" ? true :                                                                                  // 3627\n\t\t\t\t\tdata === \"false\" ? false :                                                                                      // 3628\n\t\t\t\t\tdata === \"null\" ? null :                                                                                        // 3629\n\t\t\t\t\t// Only convert to a number if it doesn't change the string                                                     // 3630\n\t\t\t\t\t+data + \"\" === data ? +data :                                                                                   // 3631\n\t\t\t\t\trbrace.test( data ) ? jQuery.parseJSON( data ) :                                                                // 3632\n\t\t\t\t\tdata;                                                                                                           // 3633\n\t\t\t} catch( e ) {}                                                                                                   // 3634\n                                                                                                                     // 3635\n\t\t\t// Make sure we set the data so it isn't changed later                                                            // 3636\n\t\t\tjQuery.data( elem, key, data );                                                                                   // 3637\n                                                                                                                     // 3638\n\t\t} else {                                                                                                           // 3639\n\t\t\tdata = undefined;                                                                                                 // 3640\n\t\t}                                                                                                                  // 3641\n\t}                                                                                                                   // 3642\n                                                                                                                     // 3643\n\treturn data;                                                                                                        // 3644\n}                                                                                                                    // 3645\n                                                                                                                     // 3646\n// checks a cache object for emptiness                                                                               // 3647\nfunction isEmptyDataObject( obj ) {                                                                                  // 3648\n\tvar name;                                                                                                           // 3649\n\tfor ( name in obj ) {                                                                                               // 3650\n                                                                                                                     // 3651\n\t\t// if the public data object is empty, the private is still empty                                                  // 3652\n\t\tif ( name === \"data\" && jQuery.isEmptyObject( obj[name] ) ) {                                                      // 3653\n\t\t\tcontinue;                                                                                                         // 3654\n\t\t}                                                                                                                  // 3655\n\t\tif ( name !== \"toJSON\" ) {                                                                                         // 3656\n\t\t\treturn false;                                                                                                     // 3657\n\t\t}                                                                                                                  // 3658\n\t}                                                                                                                   // 3659\n                                                                                                                     // 3660\n\treturn true;                                                                                                        // 3661\n}                                                                                                                    // 3662\n                                                                                                                     // 3663\nfunction internalData( elem, name, data, pvt /* Internal Use Only */ ) {                                             // 3664\n\tif ( !jQuery.acceptData( elem ) ) {                                                                                 // 3665\n\t\treturn;                                                                                                            // 3666\n\t}                                                                                                                   // 3667\n                                                                                                                     // 3668\n\tvar ret, thisCache,                                                                                                 // 3669\n\t\tinternalKey = jQuery.expando,                                                                                      // 3670\n                                                                                                                     // 3671\n\t\t// We have to handle DOM nodes and JS objects differently because IE6-7                                            // 3672\n\t\t// can't GC object references properly across the DOM-JS boundary                                                  // 3673\n\t\tisNode = elem.nodeType,                                                                                            // 3674\n                                                                                                                     // 3675\n\t\t// Only DOM nodes need the global jQuery cache; JS object data is                                                  // 3676\n\t\t// attached directly to the object so GC can occur automatically                                                   // 3677\n\t\tcache = isNode ? jQuery.cache : elem,                                                                              // 3678\n                                                                                                                     // 3679\n\t\t// Only defining an ID for JS objects if its cache already exists allows                                           // 3680\n\t\t// the code to shortcut on the same path as a DOM node with no cache                                               // 3681\n\t\tid = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey;                                            // 3682\n                                                                                                                     // 3683\n\t// Avoid doing any more work than we need to when trying to get data on an                                          // 3684\n\t// object that has no data at all                                                                                   // 3685\n\tif ( (!id || !cache[id] || (!pvt && !cache[id].data)) && data === undefined && typeof name === \"string\" ) {         // 3686\n\t\treturn;                                                                                                            // 3687\n\t}                                                                                                                   // 3688\n                                                                                                                     // 3689\n\tif ( !id ) {                                                                                                        // 3690\n\t\t// Only DOM nodes need a new unique ID for each element since their data                                           // 3691\n\t\t// ends up in the global cache                                                                                     // 3692\n\t\tif ( isNode ) {                                                                                                    // 3693\n\t\t\tid = elem[ internalKey ] = deletedIds.pop() || jQuery.guid++;                                                     // 3694\n\t\t} else {                                                                                                           // 3695\n\t\t\tid = internalKey;                                                                                                 // 3696\n\t\t}                                                                                                                  // 3697\n\t}                                                                                                                   // 3698\n                                                                                                                     // 3699\n\tif ( !cache[ id ] ) {                                                                                               // 3700\n\t\t// Avoid exposing jQuery metadata on plain JS objects when the object                                              // 3701\n\t\t// is serialized using JSON.stringify                                                                              // 3702\n\t\tcache[ id ] = isNode ? {} : { toJSON: jQuery.noop };                                                               // 3703\n\t}                                                                                                                   // 3704\n                                                                                                                     // 3705\n\t// An object can be passed to jQuery.data instead of a key/value pair; this gets                                    // 3706\n\t// shallow copied over onto the existing cache                                                                      // 3707\n\tif ( typeof name === \"object\" || typeof name === \"function\" ) {                                                     // 3708\n\t\tif ( pvt ) {                                                                                                       // 3709\n\t\t\tcache[ id ] = jQuery.extend( cache[ id ], name );                                                                 // 3710\n\t\t} else {                                                                                                           // 3711\n\t\t\tcache[ id ].data = jQuery.extend( cache[ id ].data, name );                                                       // 3712\n\t\t}                                                                                                                  // 3713\n\t}                                                                                                                   // 3714\n                                                                                                                     // 3715\n\tthisCache = cache[ id ];                                                                                            // 3716\n                                                                                                                     // 3717\n\t// jQuery data() is stored in a separate object inside the object's internal data                                   // 3718\n\t// cache in order to avoid key collisions between internal data and user-defined                                    // 3719\n\t// data.                                                                                                            // 3720\n\tif ( !pvt ) {                                                                                                       // 3721\n\t\tif ( !thisCache.data ) {                                                                                           // 3722\n\t\t\tthisCache.data = {};                                                                                              // 3723\n\t\t}                                                                                                                  // 3724\n                                                                                                                     // 3725\n\t\tthisCache = thisCache.data;                                                                                        // 3726\n\t}                                                                                                                   // 3727\n                                                                                                                     // 3728\n\tif ( data !== undefined ) {                                                                                         // 3729\n\t\tthisCache[ jQuery.camelCase( name ) ] = data;                                                                      // 3730\n\t}                                                                                                                   // 3731\n                                                                                                                     // 3732\n\t// Check for both converted-to-camel and non-converted data property names                                          // 3733\n\t// If a data property was specified                                                                                 // 3734\n\tif ( typeof name === \"string\" ) {                                                                                   // 3735\n                                                                                                                     // 3736\n\t\t// First Try to find as-is property data                                                                           // 3737\n\t\tret = thisCache[ name ];                                                                                           // 3738\n                                                                                                                     // 3739\n\t\t// Test for null|undefined property data                                                                           // 3740\n\t\tif ( ret == null ) {                                                                                               // 3741\n                                                                                                                     // 3742\n\t\t\t// Try to find the camelCased property                                                                            // 3743\n\t\t\tret = thisCache[ jQuery.camelCase( name ) ];                                                                      // 3744\n\t\t}                                                                                                                  // 3745\n\t} else {                                                                                                            // 3746\n\t\tret = thisCache;                                                                                                   // 3747\n\t}                                                                                                                   // 3748\n                                                                                                                     // 3749\n\treturn ret;                                                                                                         // 3750\n}                                                                                                                    // 3751\n                                                                                                                     // 3752\nfunction internalRemoveData( elem, name, pvt ) {                                                                     // 3753\n\tif ( !jQuery.acceptData( elem ) ) {                                                                                 // 3754\n\t\treturn;                                                                                                            // 3755\n\t}                                                                                                                   // 3756\n                                                                                                                     // 3757\n\tvar thisCache, i,                                                                                                   // 3758\n\t\tisNode = elem.nodeType,                                                                                            // 3759\n                                                                                                                     // 3760\n\t\t// See jQuery.data for more information                                                                            // 3761\n\t\tcache = isNode ? jQuery.cache : elem,                                                                              // 3762\n\t\tid = isNode ? elem[ jQuery.expando ] : jQuery.expando;                                                             // 3763\n                                                                                                                     // 3764\n\t// If there is already no cache entry for this object, there is no                                                  // 3765\n\t// purpose in continuing                                                                                            // 3766\n\tif ( !cache[ id ] ) {                                                                                               // 3767\n\t\treturn;                                                                                                            // 3768\n\t}                                                                                                                   // 3769\n                                                                                                                     // 3770\n\tif ( name ) {                                                                                                       // 3771\n                                                                                                                     // 3772\n\t\tthisCache = pvt ? cache[ id ] : cache[ id ].data;                                                                  // 3773\n                                                                                                                     // 3774\n\t\tif ( thisCache ) {                                                                                                 // 3775\n                                                                                                                     // 3776\n\t\t\t// Support array or space separated string names for data keys                                                    // 3777\n\t\t\tif ( !jQuery.isArray( name ) ) {                                                                                  // 3778\n                                                                                                                     // 3779\n\t\t\t\t// try the string as a key before any manipulation                                                               // 3780\n\t\t\t\tif ( name in thisCache ) {                                                                                       // 3781\n\t\t\t\t\tname = [ name ];                                                                                                // 3782\n\t\t\t\t} else {                                                                                                         // 3783\n                                                                                                                     // 3784\n\t\t\t\t\t// split the camel cased version by spaces unless a key with the spaces exists                                  // 3785\n\t\t\t\t\tname = jQuery.camelCase( name );                                                                                // 3786\n\t\t\t\t\tif ( name in thisCache ) {                                                                                      // 3787\n\t\t\t\t\t\tname = [ name ];                                                                                               // 3788\n\t\t\t\t\t} else {                                                                                                        // 3789\n\t\t\t\t\t\tname = name.split(\" \");                                                                                        // 3790\n\t\t\t\t\t}                                                                                                               // 3791\n\t\t\t\t}                                                                                                                // 3792\n\t\t\t} else {                                                                                                          // 3793\n\t\t\t\t// If \"name\" is an array of keys...                                                                              // 3794\n\t\t\t\t// When data is initially created, via (\"key\", \"val\") signature,                                                 // 3795\n\t\t\t\t// keys will be converted to camelCase.                                                                          // 3796\n\t\t\t\t// Since there is no way to tell _how_ a key was added, remove                                                   // 3797\n\t\t\t\t// both plain key and camelCase key. #12786                                                                      // 3798\n\t\t\t\t// This will only penalize the array argument path.                                                              // 3799\n\t\t\t\tname = name.concat( jQuery.map( name, jQuery.camelCase ) );                                                      // 3800\n\t\t\t}                                                                                                                 // 3801\n                                                                                                                     // 3802\n\t\t\ti = name.length;                                                                                                  // 3803\n\t\t\twhile ( i-- ) {                                                                                                   // 3804\n\t\t\t\tdelete thisCache[ name[i] ];                                                                                     // 3805\n\t\t\t}                                                                                                                 // 3806\n                                                                                                                     // 3807\n\t\t\t// If there is no data left in the cache, we want to continue                                                     // 3808\n\t\t\t// and let the cache object itself get destroyed                                                                  // 3809\n\t\t\tif ( pvt ? !isEmptyDataObject(thisCache) : !jQuery.isEmptyObject(thisCache) ) {                                   // 3810\n\t\t\t\treturn;                                                                                                          // 3811\n\t\t\t}                                                                                                                 // 3812\n\t\t}                                                                                                                  // 3813\n\t}                                                                                                                   // 3814\n                                                                                                                     // 3815\n\t// See jQuery.data for more information                                                                             // 3816\n\tif ( !pvt ) {                                                                                                       // 3817\n\t\tdelete cache[ id ].data;                                                                                           // 3818\n                                                                                                                     // 3819\n\t\t// Don't destroy the parent cache unless the internal data object                                                  // 3820\n\t\t// had been the only thing left in it                                                                              // 3821\n\t\tif ( !isEmptyDataObject( cache[ id ] ) ) {                                                                         // 3822\n\t\t\treturn;                                                                                                           // 3823\n\t\t}                                                                                                                  // 3824\n\t}                                                                                                                   // 3825\n                                                                                                                     // 3826\n\t// Destroy the cache                                                                                                // 3827\n\tif ( isNode ) {                                                                                                     // 3828\n\t\tjQuery.cleanData( [ elem ], true );                                                                                // 3829\n                                                                                                                     // 3830\n\t// Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)                          // 3831\n\t/* jshint eqeqeq: false */                                                                                          // 3832\n\t} else if ( support.deleteExpando || cache != cache.window ) {                                                      // 3833\n\t\t/* jshint eqeqeq: true */                                                                                          // 3834\n\t\tdelete cache[ id ];                                                                                                // 3835\n                                                                                                                     // 3836\n\t// When all else fails, null                                                                                        // 3837\n\t} else {                                                                                                            // 3838\n\t\tcache[ id ] = null;                                                                                                // 3839\n\t}                                                                                                                   // 3840\n}                                                                                                                    // 3841\n                                                                                                                     // 3842\njQuery.extend({                                                                                                      // 3843\n\tcache: {},                                                                                                          // 3844\n                                                                                                                     // 3845\n\t// The following elements (space-suffixed to avoid Object.prototype collisions)                                     // 3846\n\t// throw uncatchable exceptions if you attempt to set expando properties                                            // 3847\n\tnoData: {                                                                                                           // 3848\n\t\t\"applet \": true,                                                                                                   // 3849\n\t\t\"embed \": true,                                                                                                    // 3850\n\t\t// ...but Flash objects (which have this classid) *can* handle expandos                                            // 3851\n\t\t\"object \": \"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\"                                                            // 3852\n\t},                                                                                                                  // 3853\n                                                                                                                     // 3854\n\thasData: function( elem ) {                                                                                         // 3855\n\t\telem = elem.nodeType ? jQuery.cache[ elem[jQuery.expando] ] : elem[ jQuery.expando ];                              // 3856\n\t\treturn !!elem && !isEmptyDataObject( elem );                                                                       // 3857\n\t},                                                                                                                  // 3858\n                                                                                                                     // 3859\n\tdata: function( elem, name, data ) {                                                                                // 3860\n\t\treturn internalData( elem, name, data );                                                                           // 3861\n\t},                                                                                                                  // 3862\n                                                                                                                     // 3863\n\tremoveData: function( elem, name ) {                                                                                // 3864\n\t\treturn internalRemoveData( elem, name );                                                                           // 3865\n\t},                                                                                                                  // 3866\n                                                                                                                     // 3867\n\t// For internal use only.                                                                                           // 3868\n\t_data: function( elem, name, data ) {                                                                               // 3869\n\t\treturn internalData( elem, name, data, true );                                                                     // 3870\n\t},                                                                                                                  // 3871\n                                                                                                                     // 3872\n\t_removeData: function( elem, name ) {                                                                               // 3873\n\t\treturn internalRemoveData( elem, name, true );                                                                     // 3874\n\t}                                                                                                                   // 3875\n});                                                                                                                  // 3876\n                                                                                                                     // 3877\njQuery.fn.extend({                                                                                                   // 3878\n\tdata: function( key, value ) {                                                                                      // 3879\n\t\tvar i, name, data,                                                                                                 // 3880\n\t\t\telem = this[0],                                                                                                   // 3881\n\t\t\tattrs = elem && elem.attributes;                                                                                  // 3882\n                                                                                                                     // 3883\n\t\t// Special expections of .data basically thwart jQuery.access,                                                     // 3884\n\t\t// so implement the relevant behavior ourselves                                                                    // 3885\n                                                                                                                     // 3886\n\t\t// Gets all values                                                                                                 // 3887\n\t\tif ( key === undefined ) {                                                                                         // 3888\n\t\t\tif ( this.length ) {                                                                                              // 3889\n\t\t\t\tdata = jQuery.data( elem );                                                                                      // 3890\n                                                                                                                     // 3891\n\t\t\t\tif ( elem.nodeType === 1 && !jQuery._data( elem, \"parsedAttrs\" ) ) {                                             // 3892\n\t\t\t\t\ti = attrs.length;                                                                                               // 3893\n\t\t\t\t\twhile ( i-- ) {                                                                                                 // 3894\n\t\t\t\t\t\tname = attrs[i].name;                                                                                          // 3895\n                                                                                                                     // 3896\n\t\t\t\t\t\tif ( name.indexOf(\"data-\") === 0 ) {                                                                           // 3897\n\t\t\t\t\t\t\tname = jQuery.camelCase( name.slice(5) );                                                                     // 3898\n                                                                                                                     // 3899\n\t\t\t\t\t\t\tdataAttr( elem, name, data[ name ] );                                                                         // 3900\n\t\t\t\t\t\t}                                                                                                              // 3901\n\t\t\t\t\t}                                                                                                               // 3902\n\t\t\t\t\tjQuery._data( elem, \"parsedAttrs\", true );                                                                      // 3903\n\t\t\t\t}                                                                                                                // 3904\n\t\t\t}                                                                                                                 // 3905\n                                                                                                                     // 3906\n\t\t\treturn data;                                                                                                      // 3907\n\t\t}                                                                                                                  // 3908\n                                                                                                                     // 3909\n\t\t// Sets multiple values                                                                                            // 3910\n\t\tif ( typeof key === \"object\" ) {                                                                                   // 3911\n\t\t\treturn this.each(function() {                                                                                     // 3912\n\t\t\t\tjQuery.data( this, key );                                                                                        // 3913\n\t\t\t});                                                                                                               // 3914\n\t\t}                                                                                                                  // 3915\n                                                                                                                     // 3916\n\t\treturn arguments.length > 1 ?                                                                                      // 3917\n                                                                                                                     // 3918\n\t\t\t// Sets one value                                                                                                 // 3919\n\t\t\tthis.each(function() {                                                                                            // 3920\n\t\t\t\tjQuery.data( this, key, value );                                                                                 // 3921\n\t\t\t}) :                                                                                                              // 3922\n                                                                                                                     // 3923\n\t\t\t// Gets one value                                                                                                 // 3924\n\t\t\t// Try to fetch any internally stored data first                                                                  // 3925\n\t\t\telem ? dataAttr( elem, key, jQuery.data( elem, key ) ) : undefined;                                               // 3926\n\t},                                                                                                                  // 3927\n                                                                                                                     // 3928\n\tremoveData: function( key ) {                                                                                       // 3929\n\t\treturn this.each(function() {                                                                                      // 3930\n\t\t\tjQuery.removeData( this, key );                                                                                   // 3931\n\t\t});                                                                                                                // 3932\n\t}                                                                                                                   // 3933\n});                                                                                                                  // 3934\n                                                                                                                     // 3935\n                                                                                                                     // 3936\njQuery.extend({                                                                                                      // 3937\n\tqueue: function( elem, type, data ) {                                                                               // 3938\n\t\tvar queue;                                                                                                         // 3939\n                                                                                                                     // 3940\n\t\tif ( elem ) {                                                                                                      // 3941\n\t\t\ttype = ( type || \"fx\" ) + \"queue\";                                                                                // 3942\n\t\t\tqueue = jQuery._data( elem, type );                                                                               // 3943\n                                                                                                                     // 3944\n\t\t\t// Speed up dequeue by getting out quickly if this is just a lookup                                               // 3945\n\t\t\tif ( data ) {                                                                                                     // 3946\n\t\t\t\tif ( !queue || jQuery.isArray(data) ) {                                                                          // 3947\n\t\t\t\t\tqueue = jQuery._data( elem, type, jQuery.makeArray(data) );                                                     // 3948\n\t\t\t\t} else {                                                                                                         // 3949\n\t\t\t\t\tqueue.push( data );                                                                                             // 3950\n\t\t\t\t}                                                                                                                // 3951\n\t\t\t}                                                                                                                 // 3952\n\t\t\treturn queue || [];                                                                                               // 3953\n\t\t}                                                                                                                  // 3954\n\t},                                                                                                                  // 3955\n                                                                                                                     // 3956\n\tdequeue: function( elem, type ) {                                                                                   // 3957\n\t\ttype = type || \"fx\";                                                                                               // 3958\n                                                                                                                     // 3959\n\t\tvar queue = jQuery.queue( elem, type ),                                                                            // 3960\n\t\t\tstartLength = queue.length,                                                                                       // 3961\n\t\t\tfn = queue.shift(),                                                                                               // 3962\n\t\t\thooks = jQuery._queueHooks( elem, type ),                                                                         // 3963\n\t\t\tnext = function() {                                                                                               // 3964\n\t\t\t\tjQuery.dequeue( elem, type );                                                                                    // 3965\n\t\t\t};                                                                                                                // 3966\n                                                                                                                     // 3967\n\t\t// If the fx queue is dequeued, always remove the progress sentinel                                                // 3968\n\t\tif ( fn === \"inprogress\" ) {                                                                                       // 3969\n\t\t\tfn = queue.shift();                                                                                               // 3970\n\t\t\tstartLength--;                                                                                                    // 3971\n\t\t}                                                                                                                  // 3972\n                                                                                                                     // 3973\n\t\tif ( fn ) {                                                                                                        // 3974\n                                                                                                                     // 3975\n\t\t\t// Add a progress sentinel to prevent the fx queue from being                                                     // 3976\n\t\t\t// automatically dequeued                                                                                         // 3977\n\t\t\tif ( type === \"fx\" ) {                                                                                            // 3978\n\t\t\t\tqueue.unshift( \"inprogress\" );                                                                                   // 3979\n\t\t\t}                                                                                                                 // 3980\n                                                                                                                     // 3981\n\t\t\t// clear up the last queue stop function                                                                          // 3982\n\t\t\tdelete hooks.stop;                                                                                                // 3983\n\t\t\tfn.call( elem, next, hooks );                                                                                     // 3984\n\t\t}                                                                                                                  // 3985\n                                                                                                                     // 3986\n\t\tif ( !startLength && hooks ) {                                                                                     // 3987\n\t\t\thooks.empty.fire();                                                                                               // 3988\n\t\t}                                                                                                                  // 3989\n\t},                                                                                                                  // 3990\n                                                                                                                     // 3991\n\t// not intended for public consumption - generates a queueHooks object, or returns the current one                  // 3992\n\t_queueHooks: function( elem, type ) {                                                                               // 3993\n\t\tvar key = type + \"queueHooks\";                                                                                     // 3994\n\t\treturn jQuery._data( elem, key ) || jQuery._data( elem, key, {                                                     // 3995\n\t\t\tempty: jQuery.Callbacks(\"once memory\").add(function() {                                                           // 3996\n\t\t\t\tjQuery._removeData( elem, type + \"queue\" );                                                                      // 3997\n\t\t\t\tjQuery._removeData( elem, key );                                                                                 // 3998\n\t\t\t})                                                                                                                // 3999\n\t\t});                                                                                                                // 4000\n\t}                                                                                                                   // 4001\n});                                                                                                                  // 4002\n                                                                                                                     // 4003\njQuery.fn.extend({                                                                                                   // 4004\n\tqueue: function( type, data ) {                                                                                     // 4005\n\t\tvar setter = 2;                                                                                                    // 4006\n                                                                                                                     // 4007\n\t\tif ( typeof type !== \"string\" ) {                                                                                  // 4008\n\t\t\tdata = type;                                                                                                      // 4009\n\t\t\ttype = \"fx\";                                                                                                      // 4010\n\t\t\tsetter--;                                                                                                         // 4011\n\t\t}                                                                                                                  // 4012\n                                                                                                                     // 4013\n\t\tif ( arguments.length < setter ) {                                                                                 // 4014\n\t\t\treturn jQuery.queue( this[0], type );                                                                             // 4015\n\t\t}                                                                                                                  // 4016\n                                                                                                                     // 4017\n\t\treturn data === undefined ?                                                                                        // 4018\n\t\t\tthis :                                                                                                            // 4019\n\t\t\tthis.each(function() {                                                                                            // 4020\n\t\t\t\tvar queue = jQuery.queue( this, type, data );                                                                    // 4021\n                                                                                                                     // 4022\n\t\t\t\t// ensure a hooks for this queue                                                                                 // 4023\n\t\t\t\tjQuery._queueHooks( this, type );                                                                                // 4024\n                                                                                                                     // 4025\n\t\t\t\tif ( type === \"fx\" && queue[0] !== \"inprogress\" ) {                                                              // 4026\n\t\t\t\t\tjQuery.dequeue( this, type );                                                                                   // 4027\n\t\t\t\t}                                                                                                                // 4028\n\t\t\t});                                                                                                               // 4029\n\t},                                                                                                                  // 4030\n\tdequeue: function( type ) {                                                                                         // 4031\n\t\treturn this.each(function() {                                                                                      // 4032\n\t\t\tjQuery.dequeue( this, type );                                                                                     // 4033\n\t\t});                                                                                                                // 4034\n\t},                                                                                                                  // 4035\n\tclearQueue: function( type ) {                                                                                      // 4036\n\t\treturn this.queue( type || \"fx\", [] );                                                                             // 4037\n\t},                                                                                                                  // 4038\n\t// Get a promise resolved when queues of a certain type                                                             // 4039\n\t// are emptied (fx is the type by default)                                                                          // 4040\n\tpromise: function( type, obj ) {                                                                                    // 4041\n\t\tvar tmp,                                                                                                           // 4042\n\t\t\tcount = 1,                                                                                                        // 4043\n\t\t\tdefer = jQuery.Deferred(),                                                                                        // 4044\n\t\t\telements = this,                                                                                                  // 4045\n\t\t\ti = this.length,                                                                                                  // 4046\n\t\t\tresolve = function() {                                                                                            // 4047\n\t\t\t\tif ( !( --count ) ) {                                                                                            // 4048\n\t\t\t\t\tdefer.resolveWith( elements, [ elements ] );                                                                    // 4049\n\t\t\t\t}                                                                                                                // 4050\n\t\t\t};                                                                                                                // 4051\n                                                                                                                     // 4052\n\t\tif ( typeof type !== \"string\" ) {                                                                                  // 4053\n\t\t\tobj = type;                                                                                                       // 4054\n\t\t\ttype = undefined;                                                                                                 // 4055\n\t\t}                                                                                                                  // 4056\n\t\ttype = type || \"fx\";                                                                                               // 4057\n                                                                                                                     // 4058\n\t\twhile ( i-- ) {                                                                                                    // 4059\n\t\t\ttmp = jQuery._data( elements[ i ], type + \"queueHooks\" );                                                         // 4060\n\t\t\tif ( tmp && tmp.empty ) {                                                                                         // 4061\n\t\t\t\tcount++;                                                                                                         // 4062\n\t\t\t\ttmp.empty.add( resolve );                                                                                        // 4063\n\t\t\t}                                                                                                                 // 4064\n\t\t}                                                                                                                  // 4065\n\t\tresolve();                                                                                                         // 4066\n\t\treturn defer.promise( obj );                                                                                       // 4067\n\t}                                                                                                                   // 4068\n});                                                                                                                  // 4069\nvar pnum = (/[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/).source;                                                           // 4070\n                                                                                                                     // 4071\nvar cssExpand = [ \"Top\", \"Right\", \"Bottom\", \"Left\" ];                                                                // 4072\n                                                                                                                     // 4073\nvar isHidden = function( elem, el ) {                                                                                // 4074\n\t\t// isHidden might be called from jQuery#filter function;                                                           // 4075\n\t\t// in that case, element will be second argument                                                                   // 4076\n\t\telem = el || elem;                                                                                                 // 4077\n\t\treturn jQuery.css( elem, \"display\" ) === \"none\" || !jQuery.contains( elem.ownerDocument, elem );                   // 4078\n\t};                                                                                                                  // 4079\n                                                                                                                     // 4080\n                                                                                                                     // 4081\n                                                                                                                     // 4082\n// Multifunctional method to get and set values of a collection                                                      // 4083\n// The value/s can optionally be executed if it's a function                                                         // 4084\nvar access = jQuery.access = function( elems, fn, key, value, chainable, emptyGet, raw ) {                           // 4085\n\tvar i = 0,                                                                                                          // 4086\n\t\tlength = elems.length,                                                                                             // 4087\n\t\tbulk = key == null;                                                                                                // 4088\n                                                                                                                     // 4089\n\t// Sets many values                                                                                                 // 4090\n\tif ( jQuery.type( key ) === \"object\" ) {                                                                            // 4091\n\t\tchainable = true;                                                                                                  // 4092\n\t\tfor ( i in key ) {                                                                                                 // 4093\n\t\t\tjQuery.access( elems, fn, i, key[i], true, emptyGet, raw );                                                       // 4094\n\t\t}                                                                                                                  // 4095\n                                                                                                                     // 4096\n\t// Sets one value                                                                                                   // 4097\n\t} else if ( value !== undefined ) {                                                                                 // 4098\n\t\tchainable = true;                                                                                                  // 4099\n                                                                                                                     // 4100\n\t\tif ( !jQuery.isFunction( value ) ) {                                                                               // 4101\n\t\t\traw = true;                                                                                                       // 4102\n\t\t}                                                                                                                  // 4103\n                                                                                                                     // 4104\n\t\tif ( bulk ) {                                                                                                      // 4105\n\t\t\t// Bulk operations run against the entire set                                                                     // 4106\n\t\t\tif ( raw ) {                                                                                                      // 4107\n\t\t\t\tfn.call( elems, value );                                                                                         // 4108\n\t\t\t\tfn = null;                                                                                                       // 4109\n                                                                                                                     // 4110\n\t\t\t// ...except when executing function values                                                                       // 4111\n\t\t\t} else {                                                                                                          // 4112\n\t\t\t\tbulk = fn;                                                                                                       // 4113\n\t\t\t\tfn = function( elem, key, value ) {                                                                              // 4114\n\t\t\t\t\treturn bulk.call( jQuery( elem ), value );                                                                      // 4115\n\t\t\t\t};                                                                                                               // 4116\n\t\t\t}                                                                                                                 // 4117\n\t\t}                                                                                                                  // 4118\n                                                                                                                     // 4119\n\t\tif ( fn ) {                                                                                                        // 4120\n\t\t\tfor ( ; i < length; i++ ) {                                                                                       // 4121\n\t\t\t\tfn( elems[i], key, raw ? value : value.call( elems[i], i, fn( elems[i], key ) ) );                               // 4122\n\t\t\t}                                                                                                                 // 4123\n\t\t}                                                                                                                  // 4124\n\t}                                                                                                                   // 4125\n                                                                                                                     // 4126\n\treturn chainable ?                                                                                                  // 4127\n\t\telems :                                                                                                            // 4128\n                                                                                                                     // 4129\n\t\t// Gets                                                                                                            // 4130\n\t\tbulk ?                                                                                                             // 4131\n\t\t\tfn.call( elems ) :                                                                                                // 4132\n\t\t\tlength ? fn( elems[0], key ) : emptyGet;                                                                          // 4133\n};                                                                                                                   // 4134\nvar rcheckableType = (/^(?:checkbox|radio)$/i);                                                                      // 4135\n                                                                                                                     // 4136\n                                                                                                                     // 4137\n                                                                                                                     // 4138\n(function() {                                                                                                        // 4139\n\tvar fragment = document.createDocumentFragment(),                                                                   // 4140\n\t\tdiv = document.createElement(\"div\"),                                                                               // 4141\n\t\tinput = document.createElement(\"input\");                                                                           // 4142\n                                                                                                                     // 4143\n\t// Setup                                                                                                            // 4144\n\tdiv.setAttribute( \"className\", \"t\" );                                                                               // 4145\n\tdiv.innerHTML = \"  <link/><table></table><a href='/a'>a</a>\";                                                       // 4146\n                                                                                                                     // 4147\n\t// IE strips leading whitespace when .innerHTML is used                                                             // 4148\n\tsupport.leadingWhitespace = div.firstChild.nodeType === 3;                                                          // 4149\n                                                                                                                     // 4150\n\t// Make sure that tbody elements aren't automatically inserted                                                      // 4151\n\t// IE will insert them into empty tables                                                                            // 4152\n\tsupport.tbody = !div.getElementsByTagName( \"tbody\" ).length;                                                        // 4153\n                                                                                                                     // 4154\n\t// Make sure that link elements get serialized correctly by innerHTML                                               // 4155\n\t// This requires a wrapper element in IE                                                                            // 4156\n\tsupport.htmlSerialize = !!div.getElementsByTagName( \"link\" ).length;                                                // 4157\n                                                                                                                     // 4158\n\t// Makes sure cloning an html5 element does not cause problems                                                      // 4159\n\t// Where outerHTML is undefined, this still works                                                                   // 4160\n\tsupport.html5Clone =                                                                                                // 4161\n\t\tdocument.createElement( \"nav\" ).cloneNode( true ).outerHTML !== \"<:nav></:nav>\";                                   // 4162\n                                                                                                                     // 4163\n\t// Check if a disconnected checkbox will retain its checked                                                         // 4164\n\t// value of true after appended to the DOM (IE6/7)                                                                  // 4165\n\tinput.type = \"checkbox\";                                                                                            // 4166\n\tinput.checked = true;                                                                                               // 4167\n\tfragment.appendChild( input );                                                                                      // 4168\n\tsupport.appendChecked = input.checked;                                                                              // 4169\n                                                                                                                     // 4170\n\t// Make sure textarea (and checkbox) defaultValue is properly cloned                                                // 4171\n\t// Support: IE6-IE11+                                                                                               // 4172\n\tdiv.innerHTML = \"<textarea>x</textarea>\";                                                                           // 4173\n\tsupport.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;                                            // 4174\n                                                                                                                     // 4175\n\t// #11217 - WebKit loses check when the name is after the checked attribute                                         // 4176\n\tfragment.appendChild( div );                                                                                        // 4177\n\tdiv.innerHTML = \"<input type='radio' checked='checked' name='t'/>\";                                                 // 4178\n                                                                                                                     // 4179\n\t// Support: Safari 5.1, iOS 5.1, Android 4.x, Android 2.3                                                           // 4180\n\t// old WebKit doesn't clone checked state correctly in fragments                                                    // 4181\n\tsupport.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;                                     // 4182\n                                                                                                                     // 4183\n\t// Support: IE<9                                                                                                    // 4184\n\t// Opera does not clone events (and typeof div.attachEvent === undefined).                                          // 4185\n\t// IE9-10 clones events bound via attachEvent, but they don't trigger with .click()                                 // 4186\n\tsupport.noCloneEvent = true;                                                                                        // 4187\n\tif ( div.attachEvent ) {                                                                                            // 4188\n\t\tdiv.attachEvent( \"onclick\", function() {                                                                           // 4189\n\t\t\tsupport.noCloneEvent = false;                                                                                     // 4190\n\t\t});                                                                                                                // 4191\n                                                                                                                     // 4192\n\t\tdiv.cloneNode( true ).click();                                                                                     // 4193\n\t}                                                                                                                   // 4194\n                                                                                                                     // 4195\n\t// Execute the test only if not already executed in another module.                                                 // 4196\n\tif (support.deleteExpando == null) {                                                                                // 4197\n\t\t// Support: IE<9                                                                                                   // 4198\n\t\tsupport.deleteExpando = true;                                                                                      // 4199\n\t\ttry {                                                                                                              // 4200\n\t\t\tdelete div.test;                                                                                                  // 4201\n\t\t} catch( e ) {                                                                                                     // 4202\n\t\t\tsupport.deleteExpando = false;                                                                                    // 4203\n\t\t}                                                                                                                  // 4204\n\t}                                                                                                                   // 4205\n                                                                                                                     // 4206\n\t// Null elements to avoid leaks in IE.                                                                              // 4207\n\tfragment = div = input = null;                                                                                      // 4208\n})();                                                                                                                // 4209\n                                                                                                                     // 4210\n                                                                                                                     // 4211\n(function() {                                                                                                        // 4212\n\tvar i, eventName,                                                                                                   // 4213\n\t\tdiv = document.createElement( \"div\" );                                                                             // 4214\n                                                                                                                     // 4215\n\t// Support: IE<9 (lack submit/change bubble), Firefox 23+ (lack focusin event)                                      // 4216\n\tfor ( i in { submit: true, change: true, focusin: true }) {                                                         // 4217\n\t\teventName = \"on\" + i;                                                                                              // 4218\n                                                                                                                     // 4219\n\t\tif ( !(support[ i + \"Bubbles\" ] = eventName in window) ) {                                                         // 4220\n\t\t\t// Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP)                                     // 4221\n\t\t\tdiv.setAttribute( eventName, \"t\" );                                                                               // 4222\n\t\t\tsupport[ i + \"Bubbles\" ] = div.attributes[ eventName ].expando === false;                                         // 4223\n\t\t}                                                                                                                  // 4224\n\t}                                                                                                                   // 4225\n                                                                                                                     // 4226\n\t// Null elements to avoid leaks in IE.                                                                              // 4227\n\tdiv = null;                                                                                                         // 4228\n})();                                                                                                                // 4229\n                                                                                                                     // 4230\n                                                                                                                     // 4231\nvar rformElems = /^(?:input|select|textarea)$/i,                                                                     // 4232\n\trkeyEvent = /^key/,                                                                                                 // 4233\n\trmouseEvent = /^(?:mouse|contextmenu)|click/,                                                                       // 4234\n\trfocusMorph = /^(?:focusinfocus|focusoutblur)$/,                                                                    // 4235\n\trtypenamespace = /^([^.]*)(?:\\.(.+)|)$/;                                                                            // 4236\n                                                                                                                     // 4237\nfunction returnTrue() {                                                                                              // 4238\n\treturn true;                                                                                                        // 4239\n}                                                                                                                    // 4240\n                                                                                                                     // 4241\nfunction returnFalse() {                                                                                             // 4242\n\treturn false;                                                                                                       // 4243\n}                                                                                                                    // 4244\n                                                                                                                     // 4245\nfunction safeActiveElement() {                                                                                       // 4246\n\ttry {                                                                                                               // 4247\n\t\treturn document.activeElement;                                                                                     // 4248\n\t} catch ( err ) { }                                                                                                 // 4249\n}                                                                                                                    // 4250\n                                                                                                                     // 4251\n/*                                                                                                                   // 4252\n * Helper functions for managing events -- not part of the public interface.                                         // 4253\n * Props to Dean Edwards' addEvent library for many of the ideas.                                                    // 4254\n */                                                                                                                  // 4255\njQuery.event = {                                                                                                     // 4256\n                                                                                                                     // 4257\n\tglobal: {},                                                                                                         // 4258\n                                                                                                                     // 4259\n\tadd: function( elem, types, handler, data, selector ) {                                                             // 4260\n\t\tvar tmp, events, t, handleObjIn,                                                                                   // 4261\n\t\t\tspecial, eventHandle, handleObj,                                                                                  // 4262\n\t\t\thandlers, type, namespaces, origType,                                                                             // 4263\n\t\t\telemData = jQuery._data( elem );                                                                                  // 4264\n                                                                                                                     // 4265\n\t\t// Don't attach events to noData or text/comment nodes (but allow plain objects)                                   // 4266\n\t\tif ( !elemData ) {                                                                                                 // 4267\n\t\t\treturn;                                                                                                           // 4268\n\t\t}                                                                                                                  // 4269\n                                                                                                                     // 4270\n\t\t// Caller can pass in an object of custom data in lieu of the handler                                              // 4271\n\t\tif ( handler.handler ) {                                                                                           // 4272\n\t\t\thandleObjIn = handler;                                                                                            // 4273\n\t\t\thandler = handleObjIn.handler;                                                                                    // 4274\n\t\t\tselector = handleObjIn.selector;                                                                                  // 4275\n\t\t}                                                                                                                  // 4276\n                                                                                                                     // 4277\n\t\t// Make sure that the handler has a unique ID, used to find/remove it later                                        // 4278\n\t\tif ( !handler.guid ) {                                                                                             // 4279\n\t\t\thandler.guid = jQuery.guid++;                                                                                     // 4280\n\t\t}                                                                                                                  // 4281\n                                                                                                                     // 4282\n\t\t// Init the element's event structure and main handler, if this is the first                                       // 4283\n\t\tif ( !(events = elemData.events) ) {                                                                               // 4284\n\t\t\tevents = elemData.events = {};                                                                                    // 4285\n\t\t}                                                                                                                  // 4286\n\t\tif ( !(eventHandle = elemData.handle) ) {                                                                          // 4287\n\t\t\teventHandle = elemData.handle = function( e ) {                                                                   // 4288\n\t\t\t\t// Discard the second event of a jQuery.event.trigger() and                                                      // 4289\n\t\t\t\t// when an event is called after a page has unloaded                                                             // 4290\n\t\t\t\treturn typeof jQuery !== strundefined && (!e || jQuery.event.triggered !== e.type) ?                             // 4291\n\t\t\t\t\tjQuery.event.dispatch.apply( eventHandle.elem, arguments ) :                                                    // 4292\n\t\t\t\t\tundefined;                                                                                                      // 4293\n\t\t\t};                                                                                                                // 4294\n\t\t\t// Add elem as a property of the handle fn to prevent a memory leak with IE non-native events                     // 4295\n\t\t\teventHandle.elem = elem;                                                                                          // 4296\n\t\t}                                                                                                                  // 4297\n                                                                                                                     // 4298\n\t\t// Handle multiple events separated by a space                                                                     // 4299\n\t\ttypes = ( types || \"\" ).match( rnotwhite ) || [ \"\" ];                                                              // 4300\n\t\tt = types.length;                                                                                                  // 4301\n\t\twhile ( t-- ) {                                                                                                    // 4302\n\t\t\ttmp = rtypenamespace.exec( types[t] ) || [];                                                                      // 4303\n\t\t\ttype = origType = tmp[1];                                                                                         // 4304\n\t\t\tnamespaces = ( tmp[2] || \"\" ).split( \".\" ).sort();                                                                // 4305\n                                                                                                                     // 4306\n\t\t\t// There *must* be a type, no attaching namespace-only handlers                                                   // 4307\n\t\t\tif ( !type ) {                                                                                                    // 4308\n\t\t\t\tcontinue;                                                                                                        // 4309\n\t\t\t}                                                                                                                 // 4310\n                                                                                                                     // 4311\n\t\t\t// If event changes its type, use the special event handlers for the changed type                                 // 4312\n\t\t\tspecial = jQuery.event.special[ type ] || {};                                                                     // 4313\n                                                                                                                     // 4314\n\t\t\t// If selector defined, determine special event api type, otherwise given type                                    // 4315\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;                                            // 4316\n                                                                                                                     // 4317\n\t\t\t// Update special based on newly reset type                                                                       // 4318\n\t\t\tspecial = jQuery.event.special[ type ] || {};                                                                     // 4319\n                                                                                                                     // 4320\n\t\t\t// handleObj is passed to all event handlers                                                                      // 4321\n\t\t\thandleObj = jQuery.extend({                                                                                       // 4322\n\t\t\t\ttype: type,                                                                                                      // 4323\n\t\t\t\torigType: origType,                                                                                              // 4324\n\t\t\t\tdata: data,                                                                                                      // 4325\n\t\t\t\thandler: handler,                                                                                                // 4326\n\t\t\t\tguid: handler.guid,                                                                                              // 4327\n\t\t\t\tselector: selector,                                                                                              // 4328\n\t\t\t\tneedsContext: selector && jQuery.expr.match.needsContext.test( selector ),                                       // 4329\n\t\t\t\tnamespace: namespaces.join(\".\")                                                                                  // 4330\n\t\t\t}, handleObjIn );                                                                                                 // 4331\n                                                                                                                     // 4332\n\t\t\t// Init the event handler queue if we're the first                                                                // 4333\n\t\t\tif ( !(handlers = events[ type ]) ) {                                                                             // 4334\n\t\t\t\thandlers = events[ type ] = [];                                                                                  // 4335\n\t\t\t\thandlers.delegateCount = 0;                                                                                      // 4336\n                                                                                                                     // 4337\n\t\t\t\t// Only use addEventListener/attachEvent if the special events handler returns false                             // 4338\n\t\t\t\tif ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {                   // 4339\n\t\t\t\t\t// Bind the global event handler to the element                                                                 // 4340\n\t\t\t\t\tif ( elem.addEventListener ) {                                                                                  // 4341\n\t\t\t\t\t\telem.addEventListener( type, eventHandle, false );                                                             // 4342\n                                                                                                                     // 4343\n\t\t\t\t\t} else if ( elem.attachEvent ) {                                                                                // 4344\n\t\t\t\t\t\telem.attachEvent( \"on\" + type, eventHandle );                                                                  // 4345\n\t\t\t\t\t}                                                                                                               // 4346\n\t\t\t\t}                                                                                                                // 4347\n\t\t\t}                                                                                                                 // 4348\n                                                                                                                     // 4349\n\t\t\tif ( special.add ) {                                                                                              // 4350\n\t\t\t\tspecial.add.call( elem, handleObj );                                                                             // 4351\n                                                                                                                     // 4352\n\t\t\t\tif ( !handleObj.handler.guid ) {                                                                                 // 4353\n\t\t\t\t\thandleObj.handler.guid = handler.guid;                                                                          // 4354\n\t\t\t\t}                                                                                                                // 4355\n\t\t\t}                                                                                                                 // 4356\n                                                                                                                     // 4357\n\t\t\t// Add to the element's handler list, delegates in front                                                          // 4358\n\t\t\tif ( selector ) {                                                                                                 // 4359\n\t\t\t\thandlers.splice( handlers.delegateCount++, 0, handleObj );                                                       // 4360\n\t\t\t} else {                                                                                                          // 4361\n\t\t\t\thandlers.push( handleObj );                                                                                      // 4362\n\t\t\t}                                                                                                                 // 4363\n                                                                                                                     // 4364\n\t\t\t// Keep track of which events have ever been used, for event optimization                                         // 4365\n\t\t\tjQuery.event.global[ type ] = true;                                                                               // 4366\n\t\t}                                                                                                                  // 4367\n                                                                                                                     // 4368\n\t\t// Nullify elem to prevent memory leaks in IE                                                                      // 4369\n\t\telem = null;                                                                                                       // 4370\n\t},                                                                                                                  // 4371\n                                                                                                                     // 4372\n\t// Detach an event or set of events from an element                                                                 // 4373\n\tremove: function( elem, types, handler, selector, mappedTypes ) {                                                   // 4374\n\t\tvar j, handleObj, tmp,                                                                                             // 4375\n\t\t\torigCount, t, events,                                                                                             // 4376\n\t\t\tspecial, handlers, type,                                                                                          // 4377\n\t\t\tnamespaces, origType,                                                                                             // 4378\n\t\t\telemData = jQuery.hasData( elem ) && jQuery._data( elem );                                                        // 4379\n                                                                                                                     // 4380\n\t\tif ( !elemData || !(events = elemData.events) ) {                                                                  // 4381\n\t\t\treturn;                                                                                                           // 4382\n\t\t}                                                                                                                  // 4383\n                                                                                                                     // 4384\n\t\t// Once for each type.namespace in types; type may be omitted                                                      // 4385\n\t\ttypes = ( types || \"\" ).match( rnotwhite ) || [ \"\" ];                                                              // 4386\n\t\tt = types.length;                                                                                                  // 4387\n\t\twhile ( t-- ) {                                                                                                    // 4388\n\t\t\ttmp = rtypenamespace.exec( types[t] ) || [];                                                                      // 4389\n\t\t\ttype = origType = tmp[1];                                                                                         // 4390\n\t\t\tnamespaces = ( tmp[2] || \"\" ).split( \".\" ).sort();                                                                // 4391\n                                                                                                                     // 4392\n\t\t\t// Unbind all events (on this namespace, if provided) for the element                                             // 4393\n\t\t\tif ( !type ) {                                                                                                    // 4394\n\t\t\t\tfor ( type in events ) {                                                                                         // 4395\n\t\t\t\t\tjQuery.event.remove( elem, type + types[ t ], handler, selector, true );                                        // 4396\n\t\t\t\t}                                                                                                                // 4397\n\t\t\t\tcontinue;                                                                                                        // 4398\n\t\t\t}                                                                                                                 // 4399\n                                                                                                                     // 4400\n\t\t\tspecial = jQuery.event.special[ type ] || {};                                                                     // 4401\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;                                            // 4402\n\t\t\thandlers = events[ type ] || [];                                                                                  // 4403\n\t\t\ttmp = tmp[2] && new RegExp( \"(^|\\\\.)\" + namespaces.join(\"\\\\.(?:.*\\\\.|)\") + \"(\\\\.|$)\" );                           // 4404\n                                                                                                                     // 4405\n\t\t\t// Remove matching events                                                                                         // 4406\n\t\t\torigCount = j = handlers.length;                                                                                  // 4407\n\t\t\twhile ( j-- ) {                                                                                                   // 4408\n\t\t\t\thandleObj = handlers[ j ];                                                                                       // 4409\n                                                                                                                     // 4410\n\t\t\t\tif ( ( mappedTypes || origType === handleObj.origType ) &&                                                       // 4411\n\t\t\t\t\t( !handler || handler.guid === handleObj.guid ) &&                                                              // 4412\n\t\t\t\t\t( !tmp || tmp.test( handleObj.namespace ) ) &&                                                                  // 4413\n\t\t\t\t\t( !selector || selector === handleObj.selector || selector === \"**\" && handleObj.selector ) ) {                 // 4414\n\t\t\t\t\thandlers.splice( j, 1 );                                                                                        // 4415\n                                                                                                                     // 4416\n\t\t\t\t\tif ( handleObj.selector ) {                                                                                     // 4417\n\t\t\t\t\t\thandlers.delegateCount--;                                                                                      // 4418\n\t\t\t\t\t}                                                                                                               // 4419\n\t\t\t\t\tif ( special.remove ) {                                                                                         // 4420\n\t\t\t\t\t\tspecial.remove.call( elem, handleObj );                                                                        // 4421\n\t\t\t\t\t}                                                                                                               // 4422\n\t\t\t\t}                                                                                                                // 4423\n\t\t\t}                                                                                                                 // 4424\n                                                                                                                     // 4425\n\t\t\t// Remove generic event handler if we removed something and no more handlers exist                                // 4426\n\t\t\t// (avoids potential for endless recursion during removal of special event handlers)                              // 4427\n\t\t\tif ( origCount && !handlers.length ) {                                                                            // 4428\n\t\t\t\tif ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {               // 4429\n\t\t\t\t\tjQuery.removeEvent( elem, type, elemData.handle );                                                              // 4430\n\t\t\t\t}                                                                                                                // 4431\n                                                                                                                     // 4432\n\t\t\t\tdelete events[ type ];                                                                                           // 4433\n\t\t\t}                                                                                                                 // 4434\n\t\t}                                                                                                                  // 4435\n                                                                                                                     // 4436\n\t\t// Remove the expando if it's no longer used                                                                       // 4437\n\t\tif ( jQuery.isEmptyObject( events ) ) {                                                                            // 4438\n\t\t\tdelete elemData.handle;                                                                                           // 4439\n                                                                                                                     // 4440\n\t\t\t// removeData also checks for emptiness and clears the expando if empty                                           // 4441\n\t\t\t// so use it instead of delete                                                                                    // 4442\n\t\t\tjQuery._removeData( elem, \"events\" );                                                                             // 4443\n\t\t}                                                                                                                  // 4444\n\t},                                                                                                                  // 4445\n                                                                                                                     // 4446\n\ttrigger: function( event, data, elem, onlyHandlers ) {                                                              // 4447\n\t\tvar handle, ontype, cur,                                                                                           // 4448\n\t\t\tbubbleType, special, tmp, i,                                                                                      // 4449\n\t\t\teventPath = [ elem || document ],                                                                                 // 4450\n\t\t\ttype = hasOwn.call( event, \"type\" ) ? event.type : event,                                                         // 4451\n\t\t\tnamespaces = hasOwn.call( event, \"namespace\" ) ? event.namespace.split(\".\") : [];                                 // 4452\n                                                                                                                     // 4453\n\t\tcur = tmp = elem = elem || document;                                                                               // 4454\n                                                                                                                     // 4455\n\t\t// Don't do events on text and comment nodes                                                                       // 4456\n\t\tif ( elem.nodeType === 3 || elem.nodeType === 8 ) {                                                                // 4457\n\t\t\treturn;                                                                                                           // 4458\n\t\t}                                                                                                                  // 4459\n                                                                                                                     // 4460\n\t\t// focus/blur morphs to focusin/out; ensure we're not firing them right now                                        // 4461\n\t\tif ( rfocusMorph.test( type + jQuery.event.triggered ) ) {                                                         // 4462\n\t\t\treturn;                                                                                                           // 4463\n\t\t}                                                                                                                  // 4464\n                                                                                                                     // 4465\n\t\tif ( type.indexOf(\".\") >= 0 ) {                                                                                    // 4466\n\t\t\t// Namespaced trigger; create a regexp to match event type in handle()                                            // 4467\n\t\t\tnamespaces = type.split(\".\");                                                                                     // 4468\n\t\t\ttype = namespaces.shift();                                                                                        // 4469\n\t\t\tnamespaces.sort();                                                                                                // 4470\n\t\t}                                                                                                                  // 4471\n\t\tontype = type.indexOf(\":\") < 0 && \"on\" + type;                                                                     // 4472\n                                                                                                                     // 4473\n\t\t// Caller can pass in a jQuery.Event object, Object, or just an event type string                                  // 4474\n\t\tevent = event[ jQuery.expando ] ?                                                                                  // 4475\n\t\t\tevent :                                                                                                           // 4476\n\t\t\tnew jQuery.Event( type, typeof event === \"object\" && event );                                                     // 4477\n                                                                                                                     // 4478\n\t\t// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)                                          // 4479\n\t\tevent.isTrigger = onlyHandlers ? 2 : 3;                                                                            // 4480\n\t\tevent.namespace = namespaces.join(\".\");                                                                            // 4481\n\t\tevent.namespace_re = event.namespace ?                                                                             // 4482\n\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join(\"\\\\.(?:.*\\\\.|)\") + \"(\\\\.|$)\" ) :                                          // 4483\n\t\t\tnull;                                                                                                             // 4484\n                                                                                                                     // 4485\n\t\t// Clean up the event in case it is being reused                                                                   // 4486\n\t\tevent.result = undefined;                                                                                          // 4487\n\t\tif ( !event.target ) {                                                                                             // 4488\n\t\t\tevent.target = elem;                                                                                              // 4489\n\t\t}                                                                                                                  // 4490\n                                                                                                                     // 4491\n\t\t// Clone any incoming data and prepend the event, creating the handler arg list                                    // 4492\n\t\tdata = data == null ?                                                                                              // 4493\n\t\t\t[ event ] :                                                                                                       // 4494\n\t\t\tjQuery.makeArray( data, [ event ] );                                                                              // 4495\n                                                                                                                     // 4496\n\t\t// Allow special events to draw outside the lines                                                                  // 4497\n\t\tspecial = jQuery.event.special[ type ] || {};                                                                      // 4498\n\t\tif ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {                         // 4499\n\t\t\treturn;                                                                                                           // 4500\n\t\t}                                                                                                                  // 4501\n                                                                                                                     // 4502\n\t\t// Determine event propagation path in advance, per W3C events spec (#9951)                                        // 4503\n\t\t// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)                             // 4504\n\t\tif ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {                                            // 4505\n                                                                                                                     // 4506\n\t\t\tbubbleType = special.delegateType || type;                                                                        // 4507\n\t\t\tif ( !rfocusMorph.test( bubbleType + type ) ) {                                                                   // 4508\n\t\t\t\tcur = cur.parentNode;                                                                                            // 4509\n\t\t\t}                                                                                                                 // 4510\n\t\t\tfor ( ; cur; cur = cur.parentNode ) {                                                                             // 4511\n\t\t\t\teventPath.push( cur );                                                                                           // 4512\n\t\t\t\ttmp = cur;                                                                                                       // 4513\n\t\t\t}                                                                                                                 // 4514\n                                                                                                                     // 4515\n\t\t\t// Only add window if we got to document (e.g., not plain obj or detached DOM)                                    // 4516\n\t\t\tif ( tmp === (elem.ownerDocument || document) ) {                                                                 // 4517\n\t\t\t\teventPath.push( tmp.defaultView || tmp.parentWindow || window );                                                 // 4518\n\t\t\t}                                                                                                                 // 4519\n\t\t}                                                                                                                  // 4520\n                                                                                                                     // 4521\n\t\t// Fire handlers on the event path                                                                                 // 4522\n\t\ti = 0;                                                                                                             // 4523\n\t\twhile ( (cur = eventPath[i++]) && !event.isPropagationStopped() ) {                                                // 4524\n                                                                                                                     // 4525\n\t\t\tevent.type = i > 1 ?                                                                                              // 4526\n\t\t\t\tbubbleType :                                                                                                     // 4527\n\t\t\t\tspecial.bindType || type;                                                                                        // 4528\n                                                                                                                     // 4529\n\t\t\t// jQuery handler                                                                                                 // 4530\n\t\t\thandle = ( jQuery._data( cur, \"events\" ) || {} )[ event.type ] && jQuery._data( cur, \"handle\" );                  // 4531\n\t\t\tif ( handle ) {                                                                                                   // 4532\n\t\t\t\thandle.apply( cur, data );                                                                                       // 4533\n\t\t\t}                                                                                                                 // 4534\n                                                                                                                     // 4535\n\t\t\t// Native handler                                                                                                 // 4536\n\t\t\thandle = ontype && cur[ ontype ];                                                                                 // 4537\n\t\t\tif ( handle && handle.apply && jQuery.acceptData( cur ) ) {                                                       // 4538\n\t\t\t\tevent.result = handle.apply( cur, data );                                                                        // 4539\n\t\t\t\tif ( event.result === false ) {                                                                                  // 4540\n\t\t\t\t\tevent.preventDefault();                                                                                         // 4541\n\t\t\t\t}                                                                                                                // 4542\n\t\t\t}                                                                                                                 // 4543\n\t\t}                                                                                                                  // 4544\n\t\tevent.type = type;                                                                                                 // 4545\n                                                                                                                     // 4546\n\t\t// If nobody prevented the default action, do it now                                                               // 4547\n\t\tif ( !onlyHandlers && !event.isDefaultPrevented() ) {                                                              // 4548\n                                                                                                                     // 4549\n\t\t\tif ( (!special._default || special._default.apply( eventPath.pop(), data ) === false) &&                          // 4550\n\t\t\t\tjQuery.acceptData( elem ) ) {                                                                                    // 4551\n                                                                                                                     // 4552\n\t\t\t\t// Call a native DOM method on the target with the same name name as the event.                                  // 4553\n\t\t\t\t// Can't use an .isFunction() check here because IE6/7 fails that test.                                          // 4554\n\t\t\t\t// Don't do default actions on window, that's where global variables be (#6170)                                  // 4555\n\t\t\t\tif ( ontype && elem[ type ] && !jQuery.isWindow( elem ) ) {                                                      // 4556\n                                                                                                                     // 4557\n\t\t\t\t\t// Don't re-trigger an onFOO event when we call its FOO() method                                                // 4558\n\t\t\t\t\ttmp = elem[ ontype ];                                                                                           // 4559\n                                                                                                                     // 4560\n\t\t\t\t\tif ( tmp ) {                                                                                                    // 4561\n\t\t\t\t\t\telem[ ontype ] = null;                                                                                         // 4562\n\t\t\t\t\t}                                                                                                               // 4563\n                                                                                                                     // 4564\n\t\t\t\t\t// Prevent re-triggering of the same event, since we already bubbled it above                                   // 4565\n\t\t\t\t\tjQuery.event.triggered = type;                                                                                  // 4566\n\t\t\t\t\ttry {                                                                                                           // 4567\n\t\t\t\t\t\telem[ type ]();                                                                                                // 4568\n\t\t\t\t\t} catch ( e ) {                                                                                                 // 4569\n\t\t\t\t\t\t// IE<9 dies on focus/blur to hidden element (#1486,#12518)                                                    // 4570\n\t\t\t\t\t\t// only reproducible on winXP IE8 native, not IE9 in IE8 mode                                                  // 4571\n\t\t\t\t\t}                                                                                                               // 4572\n\t\t\t\t\tjQuery.event.triggered = undefined;                                                                             // 4573\n                                                                                                                     // 4574\n\t\t\t\t\tif ( tmp ) {                                                                                                    // 4575\n\t\t\t\t\t\telem[ ontype ] = tmp;                                                                                          // 4576\n\t\t\t\t\t}                                                                                                               // 4577\n\t\t\t\t}                                                                                                                // 4578\n\t\t\t}                                                                                                                 // 4579\n\t\t}                                                                                                                  // 4580\n                                                                                                                     // 4581\n\t\treturn event.result;                                                                                               // 4582\n\t},                                                                                                                  // 4583\n                                                                                                                     // 4584\n\tdispatch: function( event ) {                                                                                       // 4585\n                                                                                                                     // 4586\n\t\t// Make a writable jQuery.Event from the native event object                                                       // 4587\n\t\tevent = jQuery.event.fix( event );                                                                                 // 4588\n                                                                                                                     // 4589\n\t\tvar i, ret, handleObj, matched, j,                                                                                 // 4590\n\t\t\thandlerQueue = [],                                                                                                // 4591\n\t\t\targs = slice.call( arguments ),                                                                                   // 4592\n\t\t\thandlers = ( jQuery._data( this, \"events\" ) || {} )[ event.type ] || [],                                          // 4593\n\t\t\tspecial = jQuery.event.special[ event.type ] || {};                                                               // 4594\n                                                                                                                     // 4595\n\t\t// Use the fix-ed jQuery.Event rather than the (read-only) native event                                            // 4596\n\t\targs[0] = event;                                                                                                   // 4597\n\t\tevent.delegateTarget = this;                                                                                       // 4598\n                                                                                                                     // 4599\n\t\t// Call the preDispatch hook for the mapped type, and let it bail if desired                                       // 4600\n\t\tif ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {                                  // 4601\n\t\t\treturn;                                                                                                           // 4602\n\t\t}                                                                                                                  // 4603\n                                                                                                                     // 4604\n\t\t// Determine handlers                                                                                              // 4605\n\t\thandlerQueue = jQuery.event.handlers.call( this, event, handlers );                                                // 4606\n                                                                                                                     // 4607\n\t\t// Run delegates first; they may want to stop propagation beneath us                                               // 4608\n\t\ti = 0;                                                                                                             // 4609\n\t\twhile ( (matched = handlerQueue[ i++ ]) && !event.isPropagationStopped() ) {                                       // 4610\n\t\t\tevent.currentTarget = matched.elem;                                                                               // 4611\n                                                                                                                     // 4612\n\t\t\tj = 0;                                                                                                            // 4613\n\t\t\twhile ( (handleObj = matched.handlers[ j++ ]) && !event.isImmediatePropagationStopped() ) {                       // 4614\n                                                                                                                     // 4615\n\t\t\t\t// Triggered event must either 1) have no namespace, or                                                          // 4616\n\t\t\t\t// 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).              // 4617\n\t\t\t\tif ( !event.namespace_re || event.namespace_re.test( handleObj.namespace ) ) {                                   // 4618\n                                                                                                                     // 4619\n\t\t\t\t\tevent.handleObj = handleObj;                                                                                    // 4620\n\t\t\t\t\tevent.data = handleObj.data;                                                                                    // 4621\n                                                                                                                     // 4622\n\t\t\t\t\tret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )                        // 4623\n\t\t\t\t\t\t\t.apply( matched.elem, args );                                                                                 // 4624\n                                                                                                                     // 4625\n\t\t\t\t\tif ( ret !== undefined ) {                                                                                      // 4626\n\t\t\t\t\t\tif ( (event.result = ret) === false ) {                                                                        // 4627\n\t\t\t\t\t\t\tevent.preventDefault();                                                                                       // 4628\n\t\t\t\t\t\t\tevent.stopPropagation();                                                                                      // 4629\n\t\t\t\t\t\t}                                                                                                              // 4630\n\t\t\t\t\t}                                                                                                               // 4631\n\t\t\t\t}                                                                                                                // 4632\n\t\t\t}                                                                                                                 // 4633\n\t\t}                                                                                                                  // 4634\n                                                                                                                     // 4635\n\t\t// Call the postDispatch hook for the mapped type                                                                  // 4636\n\t\tif ( special.postDispatch ) {                                                                                      // 4637\n\t\t\tspecial.postDispatch.call( this, event );                                                                         // 4638\n\t\t}                                                                                                                  // 4639\n                                                                                                                     // 4640\n\t\treturn event.result;                                                                                               // 4641\n\t},                                                                                                                  // 4642\n                                                                                                                     // 4643\n\thandlers: function( event, handlers ) {                                                                             // 4644\n\t\tvar sel, handleObj, matches, i,                                                                                    // 4645\n\t\t\thandlerQueue = [],                                                                                                // 4646\n\t\t\tdelegateCount = handlers.delegateCount,                                                                           // 4647\n\t\t\tcur = event.target;                                                                                               // 4648\n                                                                                                                     // 4649\n\t\t// Find delegate handlers                                                                                          // 4650\n\t\t// Black-hole SVG <use> instance trees (#13180)                                                                    // 4651\n\t\t// Avoid non-left-click bubbling in Firefox (#3861)                                                                // 4652\n\t\tif ( delegateCount && cur.nodeType && (!event.button || event.type !== \"click\") ) {                                // 4653\n                                                                                                                     // 4654\n\t\t\t/* jshint eqeqeq: false */                                                                                        // 4655\n\t\t\tfor ( ; cur != this; cur = cur.parentNode || this ) {                                                             // 4656\n\t\t\t\t/* jshint eqeqeq: true */                                                                                        // 4657\n                                                                                                                     // 4658\n\t\t\t\t// Don't check non-elements (#13208)                                                                             // 4659\n\t\t\t\t// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)                                      // 4660\n\t\t\t\tif ( cur.nodeType === 1 && (cur.disabled !== true || event.type !== \"click\") ) {                                 // 4661\n\t\t\t\t\tmatches = [];                                                                                                   // 4662\n\t\t\t\t\tfor ( i = 0; i < delegateCount; i++ ) {                                                                         // 4663\n\t\t\t\t\t\thandleObj = handlers[ i ];                                                                                     // 4664\n                                                                                                                     // 4665\n\t\t\t\t\t\t// Don't conflict with Object.prototype properties (#13203)                                                    // 4666\n\t\t\t\t\t\tsel = handleObj.selector + \" \";                                                                                // 4667\n                                                                                                                     // 4668\n\t\t\t\t\t\tif ( matches[ sel ] === undefined ) {                                                                          // 4669\n\t\t\t\t\t\t\tmatches[ sel ] = handleObj.needsContext ?                                                                     // 4670\n\t\t\t\t\t\t\t\tjQuery( sel, this ).index( cur ) >= 0 :                                                                      // 4671\n\t\t\t\t\t\t\t\tjQuery.find( sel, this, null, [ cur ] ).length;                                                              // 4672\n\t\t\t\t\t\t}                                                                                                              // 4673\n\t\t\t\t\t\tif ( matches[ sel ] ) {                                                                                        // 4674\n\t\t\t\t\t\t\tmatches.push( handleObj );                                                                                    // 4675\n\t\t\t\t\t\t}                                                                                                              // 4676\n\t\t\t\t\t}                                                                                                               // 4677\n\t\t\t\t\tif ( matches.length ) {                                                                                         // 4678\n\t\t\t\t\t\thandlerQueue.push({ elem: cur, handlers: matches });                                                           // 4679\n\t\t\t\t\t}                                                                                                               // 4680\n\t\t\t\t}                                                                                                                // 4681\n\t\t\t}                                                                                                                 // 4682\n\t\t}                                                                                                                  // 4683\n                                                                                                                     // 4684\n\t\t// Add the remaining (directly-bound) handlers                                                                     // 4685\n\t\tif ( delegateCount < handlers.length ) {                                                                           // 4686\n\t\t\thandlerQueue.push({ elem: this, handlers: handlers.slice( delegateCount ) });                                     // 4687\n\t\t}                                                                                                                  // 4688\n                                                                                                                     // 4689\n\t\treturn handlerQueue;                                                                                               // 4690\n\t},                                                                                                                  // 4691\n                                                                                                                     // 4692\n\tfix: function( event ) {                                                                                            // 4693\n\t\tif ( event[ jQuery.expando ] ) {                                                                                   // 4694\n\t\t\treturn event;                                                                                                     // 4695\n\t\t}                                                                                                                  // 4696\n                                                                                                                     // 4697\n\t\t// Create a writable copy of the event object and normalize some properties                                        // 4698\n\t\tvar i, prop, copy,                                                                                                 // 4699\n\t\t\ttype = event.type,                                                                                                // 4700\n\t\t\toriginalEvent = event,                                                                                            // 4701\n\t\t\tfixHook = this.fixHooks[ type ];                                                                                  // 4702\n                                                                                                                     // 4703\n\t\tif ( !fixHook ) {                                                                                                  // 4704\n\t\t\tthis.fixHooks[ type ] = fixHook =                                                                                 // 4705\n\t\t\t\trmouseEvent.test( type ) ? this.mouseHooks :                                                                     // 4706\n\t\t\t\trkeyEvent.test( type ) ? this.keyHooks :                                                                         // 4707\n\t\t\t\t{};                                                                                                              // 4708\n\t\t}                                                                                                                  // 4709\n\t\tcopy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;                                            // 4710\n                                                                                                                     // 4711\n\t\tevent = new jQuery.Event( originalEvent );                                                                         // 4712\n                                                                                                                     // 4713\n\t\ti = copy.length;                                                                                                   // 4714\n\t\twhile ( i-- ) {                                                                                                    // 4715\n\t\t\tprop = copy[ i ];                                                                                                 // 4716\n\t\t\tevent[ prop ] = originalEvent[ prop ];                                                                            // 4717\n\t\t}                                                                                                                  // 4718\n                                                                                                                     // 4719\n\t\t// Support: IE<9                                                                                                   // 4720\n\t\t// Fix target property (#1925)                                                                                     // 4721\n\t\tif ( !event.target ) {                                                                                             // 4722\n\t\t\tevent.target = originalEvent.srcElement || document;                                                              // 4723\n\t\t}                                                                                                                  // 4724\n                                                                                                                     // 4725\n\t\t// Support: Chrome 23+, Safari?                                                                                    // 4726\n\t\t// Target should not be a text node (#504, #13143)                                                                 // 4727\n\t\tif ( event.target.nodeType === 3 ) {                                                                               // 4728\n\t\t\tevent.target = event.target.parentNode;                                                                           // 4729\n\t\t}                                                                                                                  // 4730\n                                                                                                                     // 4731\n\t\t// Support: IE<9                                                                                                   // 4732\n\t\t// For mouse/key events, metaKey==false if it's undefined (#3368, #11328)                                          // 4733\n\t\tevent.metaKey = !!event.metaKey;                                                                                   // 4734\n                                                                                                                     // 4735\n\t\treturn fixHook.filter ? fixHook.filter( event, originalEvent ) : event;                                            // 4736\n\t},                                                                                                                  // 4737\n                                                                                                                     // 4738\n\t// Includes some event props shared by KeyEvent and MouseEvent                                                      // 4739\n\tprops: \"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which\".split(\" \"),\n                                                                                                                     // 4741\n\tfixHooks: {},                                                                                                       // 4742\n                                                                                                                     // 4743\n\tkeyHooks: {                                                                                                         // 4744\n\t\tprops: \"char charCode key keyCode\".split(\" \"),                                                                     // 4745\n\t\tfilter: function( event, original ) {                                                                              // 4746\n                                                                                                                     // 4747\n\t\t\t// Add which for key events                                                                                       // 4748\n\t\t\tif ( event.which == null ) {                                                                                      // 4749\n\t\t\t\tevent.which = original.charCode != null ? original.charCode : original.keyCode;                                  // 4750\n\t\t\t}                                                                                                                 // 4751\n                                                                                                                     // 4752\n\t\t\treturn event;                                                                                                     // 4753\n\t\t}                                                                                                                  // 4754\n\t},                                                                                                                  // 4755\n                                                                                                                     // 4756\n\tmouseHooks: {                                                                                                       // 4757\n\t\tprops: \"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement\".split(\" \"),\n\t\tfilter: function( event, original ) {                                                                              // 4759\n\t\t\tvar body, eventDoc, doc,                                                                                          // 4760\n\t\t\t\tbutton = original.button,                                                                                        // 4761\n\t\t\t\tfromElement = original.fromElement;                                                                              // 4762\n                                                                                                                     // 4763\n\t\t\t// Calculate pageX/Y if missing and clientX/Y available                                                           // 4764\n\t\t\tif ( event.pageX == null && original.clientX != null ) {                                                          // 4765\n\t\t\t\teventDoc = event.target.ownerDocument || document;                                                               // 4766\n\t\t\t\tdoc = eventDoc.documentElement;                                                                                  // 4767\n\t\t\t\tbody = eventDoc.body;                                                                                            // 4768\n                                                                                                                     // 4769\n\t\t\t\tevent.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );\n\t\t\t\tevent.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );\n\t\t\t}                                                                                                                 // 4772\n                                                                                                                     // 4773\n\t\t\t// Add relatedTarget, if necessary                                                                                // 4774\n\t\t\tif ( !event.relatedTarget && fromElement ) {                                                                      // 4775\n\t\t\t\tevent.relatedTarget = fromElement === event.target ? original.toElement : fromElement;                           // 4776\n\t\t\t}                                                                                                                 // 4777\n                                                                                                                     // 4778\n\t\t\t// Add which for click: 1 === left; 2 === middle; 3 === right                                                     // 4779\n\t\t\t// Note: button is not normalized, so don't use it                                                                // 4780\n\t\t\tif ( !event.which && button !== undefined ) {                                                                     // 4781\n\t\t\t\tevent.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );                                  // 4782\n\t\t\t}                                                                                                                 // 4783\n                                                                                                                     // 4784\n\t\t\treturn event;                                                                                                     // 4785\n\t\t}                                                                                                                  // 4786\n\t},                                                                                                                  // 4787\n                                                                                                                     // 4788\n\tspecial: {                                                                                                          // 4789\n\t\tload: {                                                                                                            // 4790\n\t\t\t// Prevent triggered image.load events from bubbling to window.load                                               // 4791\n\t\t\tnoBubble: true                                                                                                    // 4792\n\t\t},                                                                                                                 // 4793\n\t\tfocus: {                                                                                                           // 4794\n\t\t\t// Fire native event if possible so blur/focus sequence is correct                                                // 4795\n\t\t\ttrigger: function() {                                                                                             // 4796\n\t\t\t\tif ( this !== safeActiveElement() && this.focus ) {                                                              // 4797\n\t\t\t\t\ttry {                                                                                                           // 4798\n\t\t\t\t\t\tthis.focus();                                                                                                  // 4799\n\t\t\t\t\t\treturn false;                                                                                                  // 4800\n\t\t\t\t\t} catch ( e ) {                                                                                                 // 4801\n\t\t\t\t\t\t// Support: IE<9                                                                                               // 4802\n\t\t\t\t\t\t// If we error on focus to hidden element (#1486, #12518),                                                     // 4803\n\t\t\t\t\t\t// let .trigger() run the handlers                                                                             // 4804\n\t\t\t\t\t}                                                                                                               // 4805\n\t\t\t\t}                                                                                                                // 4806\n\t\t\t},                                                                                                                // 4807\n\t\t\tdelegateType: \"focusin\"                                                                                           // 4808\n\t\t},                                                                                                                 // 4809\n\t\tblur: {                                                                                                            // 4810\n\t\t\ttrigger: function() {                                                                                             // 4811\n\t\t\t\tif ( this === safeActiveElement() && this.blur ) {                                                               // 4812\n\t\t\t\t\tthis.blur();                                                                                                    // 4813\n\t\t\t\t\treturn false;                                                                                                   // 4814\n\t\t\t\t}                                                                                                                // 4815\n\t\t\t},                                                                                                                // 4816\n\t\t\tdelegateType: \"focusout\"                                                                                          // 4817\n\t\t},                                                                                                                 // 4818\n\t\tclick: {                                                                                                           // 4819\n\t\t\t// For checkbox, fire native event so checked state will be right                                                 // 4820\n\t\t\ttrigger: function() {                                                                                             // 4821\n\t\t\t\tif ( jQuery.nodeName( this, \"input\" ) && this.type === \"checkbox\" && this.click ) {                              // 4822\n\t\t\t\t\tthis.click();                                                                                                   // 4823\n\t\t\t\t\treturn false;                                                                                                   // 4824\n\t\t\t\t}                                                                                                                // 4825\n\t\t\t},                                                                                                                // 4826\n                                                                                                                     // 4827\n\t\t\t// For cross-browser consistency, don't fire native .click() on links                                             // 4828\n\t\t\t_default: function( event ) {                                                                                     // 4829\n\t\t\t\treturn jQuery.nodeName( event.target, \"a\" );                                                                     // 4830\n\t\t\t}                                                                                                                 // 4831\n\t\t},                                                                                                                 // 4832\n                                                                                                                     // 4833\n\t\tbeforeunload: {                                                                                                    // 4834\n\t\t\tpostDispatch: function( event ) {                                                                                 // 4835\n                                                                                                                     // 4836\n\t\t\t\t// Even when returnValue equals to undefined Firefox will still show alert                                       // 4837\n\t\t\t\tif ( event.result !== undefined ) {                                                                              // 4838\n\t\t\t\t\tevent.originalEvent.returnValue = event.result;                                                                 // 4839\n\t\t\t\t}                                                                                                                // 4840\n\t\t\t}                                                                                                                 // 4841\n\t\t}                                                                                                                  // 4842\n\t},                                                                                                                  // 4843\n                                                                                                                     // 4844\n\tsimulate: function( type, elem, event, bubble ) {                                                                   // 4845\n\t\t// Piggyback on a donor event to simulate a different one.                                                         // 4846\n\t\t// Fake originalEvent to avoid donor's stopPropagation, but if the                                                 // 4847\n\t\t// simulated event prevents default then we do the same on the donor.                                              // 4848\n\t\tvar e = jQuery.extend(                                                                                             // 4849\n\t\t\tnew jQuery.Event(),                                                                                               // 4850\n\t\t\tevent,                                                                                                            // 4851\n\t\t\t{                                                                                                                 // 4852\n\t\t\t\ttype: type,                                                                                                      // 4853\n\t\t\t\tisSimulated: true,                                                                                               // 4854\n\t\t\t\toriginalEvent: {}                                                                                                // 4855\n\t\t\t}                                                                                                                 // 4856\n\t\t);                                                                                                                 // 4857\n\t\tif ( bubble ) {                                                                                                    // 4858\n\t\t\tjQuery.event.trigger( e, null, elem );                                                                            // 4859\n\t\t} else {                                                                                                           // 4860\n\t\t\tjQuery.event.dispatch.call( elem, e );                                                                            // 4861\n\t\t}                                                                                                                  // 4862\n\t\tif ( e.isDefaultPrevented() ) {                                                                                    // 4863\n\t\t\tevent.preventDefault();                                                                                           // 4864\n\t\t}                                                                                                                  // 4865\n\t}                                                                                                                   // 4866\n};                                                                                                                   // 4867\n                                                                                                                     // 4868\njQuery.removeEvent = document.removeEventListener ?                                                                  // 4869\n\tfunction( elem, type, handle ) {                                                                                    // 4870\n\t\tif ( elem.removeEventListener ) {                                                                                  // 4871\n\t\t\telem.removeEventListener( type, handle, false );                                                                  // 4872\n\t\t}                                                                                                                  // 4873\n\t} :                                                                                                                 // 4874\n\tfunction( elem, type, handle ) {                                                                                    // 4875\n\t\tvar name = \"on\" + type;                                                                                            // 4876\n                                                                                                                     // 4877\n\t\tif ( elem.detachEvent ) {                                                                                          // 4878\n                                                                                                                     // 4879\n\t\t\t// #8545, #7054, preventing memory leaks for custom events in IE6-8                                               // 4880\n\t\t\t// detachEvent needed property on element, by name of that event, to properly expose it to GC                     // 4881\n\t\t\tif ( typeof elem[ name ] === strundefined ) {                                                                     // 4882\n\t\t\t\telem[ name ] = null;                                                                                             // 4883\n\t\t\t}                                                                                                                 // 4884\n                                                                                                                     // 4885\n\t\t\telem.detachEvent( name, handle );                                                                                 // 4886\n\t\t}                                                                                                                  // 4887\n\t};                                                                                                                  // 4888\n                                                                                                                     // 4889\njQuery.Event = function( src, props ) {                                                                              // 4890\n\t// Allow instantiation without the 'new' keyword                                                                    // 4891\n\tif ( !(this instanceof jQuery.Event) ) {                                                                            // 4892\n\t\treturn new jQuery.Event( src, props );                                                                             // 4893\n\t}                                                                                                                   // 4894\n                                                                                                                     // 4895\n\t// Event object                                                                                                     // 4896\n\tif ( src && src.type ) {                                                                                            // 4897\n\t\tthis.originalEvent = src;                                                                                          // 4898\n\t\tthis.type = src.type;                                                                                              // 4899\n                                                                                                                     // 4900\n\t\t// Events bubbling up the document may have been marked as prevented                                               // 4901\n\t\t// by a handler lower down the tree; reflect the correct value.                                                    // 4902\n\t\tthis.isDefaultPrevented = src.defaultPrevented ||                                                                  // 4903\n\t\t\t\tsrc.defaultPrevented === undefined && (                                                                          // 4904\n\t\t\t\t// Support: IE < 9                                                                                               // 4905\n\t\t\t\tsrc.returnValue === false ||                                                                                     // 4906\n\t\t\t\t// Support: Android < 4.0                                                                                        // 4907\n\t\t\t\tsrc.getPreventDefault && src.getPreventDefault() ) ?                                                             // 4908\n\t\t\treturnTrue :                                                                                                      // 4909\n\t\t\treturnFalse;                                                                                                      // 4910\n                                                                                                                     // 4911\n\t// Event type                                                                                                       // 4912\n\t} else {                                                                                                            // 4913\n\t\tthis.type = src;                                                                                                   // 4914\n\t}                                                                                                                   // 4915\n                                                                                                                     // 4916\n\t// Put explicitly provided properties onto the event object                                                         // 4917\n\tif ( props ) {                                                                                                      // 4918\n\t\tjQuery.extend( this, props );                                                                                      // 4919\n\t}                                                                                                                   // 4920\n                                                                                                                     // 4921\n\t// Create a timestamp if incoming event doesn't have one                                                            // 4922\n\tthis.timeStamp = src && src.timeStamp || jQuery.now();                                                              // 4923\n                                                                                                                     // 4924\n\t// Mark it as fixed                                                                                                 // 4925\n\tthis[ jQuery.expando ] = true;                                                                                      // 4926\n};                                                                                                                   // 4927\n                                                                                                                     // 4928\n// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding                              // 4929\n// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html                                 // 4930\njQuery.Event.prototype = {                                                                                           // 4931\n\tisDefaultPrevented: returnFalse,                                                                                    // 4932\n\tisPropagationStopped: returnFalse,                                                                                  // 4933\n\tisImmediatePropagationStopped: returnFalse,                                                                         // 4934\n                                                                                                                     // 4935\n\tpreventDefault: function() {                                                                                        // 4936\n\t\tvar e = this.originalEvent;                                                                                        // 4937\n                                                                                                                     // 4938\n\t\tthis.isDefaultPrevented = returnTrue;                                                                              // 4939\n\t\tif ( !e ) {                                                                                                        // 4940\n\t\t\treturn;                                                                                                           // 4941\n\t\t}                                                                                                                  // 4942\n                                                                                                                     // 4943\n\t\t// If preventDefault exists, run it on the original event                                                          // 4944\n\t\tif ( e.preventDefault ) {                                                                                          // 4945\n\t\t\te.preventDefault();                                                                                               // 4946\n                                                                                                                     // 4947\n\t\t// Support: IE                                                                                                     // 4948\n\t\t// Otherwise set the returnValue property of the original event to false                                           // 4949\n\t\t} else {                                                                                                           // 4950\n\t\t\te.returnValue = false;                                                                                            // 4951\n\t\t}                                                                                                                  // 4952\n\t},                                                                                                                  // 4953\n\tstopPropagation: function() {                                                                                       // 4954\n\t\tvar e = this.originalEvent;                                                                                        // 4955\n                                                                                                                     // 4956\n\t\tthis.isPropagationStopped = returnTrue;                                                                            // 4957\n\t\tif ( !e ) {                                                                                                        // 4958\n\t\t\treturn;                                                                                                           // 4959\n\t\t}                                                                                                                  // 4960\n\t\t// If stopPropagation exists, run it on the original event                                                         // 4961\n\t\tif ( e.stopPropagation ) {                                                                                         // 4962\n\t\t\te.stopPropagation();                                                                                              // 4963\n\t\t}                                                                                                                  // 4964\n                                                                                                                     // 4965\n\t\t// Support: IE                                                                                                     // 4966\n\t\t// Set the cancelBubble property of the original event to true                                                     // 4967\n\t\te.cancelBubble = true;                                                                                             // 4968\n\t},                                                                                                                  // 4969\n\tstopImmediatePropagation: function() {                                                                              // 4970\n\t\tthis.isImmediatePropagationStopped = returnTrue;                                                                   // 4971\n\t\tthis.stopPropagation();                                                                                            // 4972\n\t}                                                                                                                   // 4973\n};                                                                                                                   // 4974\n                                                                                                                     // 4975\n// Create mouseenter/leave events using mouseover/out and event-time checks                                          // 4976\njQuery.each({                                                                                                        // 4977\n\tmouseenter: \"mouseover\",                                                                                            // 4978\n\tmouseleave: \"mouseout\"                                                                                              // 4979\n}, function( orig, fix ) {                                                                                           // 4980\n\tjQuery.event.special[ orig ] = {                                                                                    // 4981\n\t\tdelegateType: fix,                                                                                                 // 4982\n\t\tbindType: fix,                                                                                                     // 4983\n                                                                                                                     // 4984\n\t\thandle: function( event ) {                                                                                        // 4985\n\t\t\tvar ret,                                                                                                          // 4986\n\t\t\t\ttarget = this,                                                                                                   // 4987\n\t\t\t\trelated = event.relatedTarget,                                                                                   // 4988\n\t\t\t\thandleObj = event.handleObj;                                                                                     // 4989\n                                                                                                                     // 4990\n\t\t\t// For mousenter/leave call the handler if related is outside the target.                                         // 4991\n\t\t\t// NB: No relatedTarget if the mouse left/entered the browser window                                              // 4992\n\t\t\tif ( !related || (related !== target && !jQuery.contains( target, related )) ) {                                  // 4993\n\t\t\t\tevent.type = handleObj.origType;                                                                                 // 4994\n\t\t\t\tret = handleObj.handler.apply( this, arguments );                                                                // 4995\n\t\t\t\tevent.type = fix;                                                                                                // 4996\n\t\t\t}                                                                                                                 // 4997\n\t\t\treturn ret;                                                                                                       // 4998\n\t\t}                                                                                                                  // 4999\n\t};                                                                                                                  // 5000\n});                                                                                                                  // 5001\n                                                                                                                     // 5002\n// IE submit delegation                                                                                              // 5003\nif ( !support.submitBubbles ) {                                                                                      // 5004\n                                                                                                                     // 5005\n\tjQuery.event.special.submit = {                                                                                     // 5006\n\t\tsetup: function() {                                                                                                // 5007\n\t\t\t// Only need this for delegated form submit events                                                                // 5008\n\t\t\tif ( jQuery.nodeName( this, \"form\" ) ) {                                                                          // 5009\n\t\t\t\treturn false;                                                                                                    // 5010\n\t\t\t}                                                                                                                 // 5011\n                                                                                                                     // 5012\n\t\t\t// Lazy-add a submit handler when a descendant form may potentially be submitted                                  // 5013\n\t\t\tjQuery.event.add( this, \"click._submit keypress._submit\", function( e ) {                                         // 5014\n\t\t\t\t// Node name check avoids a VML-related crash in IE (#9807)                                                      // 5015\n\t\t\t\tvar elem = e.target,                                                                                             // 5016\n\t\t\t\t\tform = jQuery.nodeName( elem, \"input\" ) || jQuery.nodeName( elem, \"button\" ) ? elem.form : undefined;           // 5017\n\t\t\t\tif ( form && !jQuery._data( form, \"submitBubbles\" ) ) {                                                          // 5018\n\t\t\t\t\tjQuery.event.add( form, \"submit._submit\", function( event ) {                                                   // 5019\n\t\t\t\t\t\tevent._submit_bubble = true;                                                                                   // 5020\n\t\t\t\t\t});                                                                                                             // 5021\n\t\t\t\t\tjQuery._data( form, \"submitBubbles\", true );                                                                    // 5022\n\t\t\t\t}                                                                                                                // 5023\n\t\t\t});                                                                                                               // 5024\n\t\t\t// return undefined since we don't need an event listener                                                         // 5025\n\t\t},                                                                                                                 // 5026\n                                                                                                                     // 5027\n\t\tpostDispatch: function( event ) {                                                                                  // 5028\n\t\t\t// If form was submitted by the user, bubble the event up the tree                                                // 5029\n\t\t\tif ( event._submit_bubble ) {                                                                                     // 5030\n\t\t\t\tdelete event._submit_bubble;                                                                                     // 5031\n\t\t\t\tif ( this.parentNode && !event.isTrigger ) {                                                                     // 5032\n\t\t\t\t\tjQuery.event.simulate( \"submit\", this.parentNode, event, true );                                                // 5033\n\t\t\t\t}                                                                                                                // 5034\n\t\t\t}                                                                                                                 // 5035\n\t\t},                                                                                                                 // 5036\n                                                                                                                     // 5037\n\t\tteardown: function() {                                                                                             // 5038\n\t\t\t// Only need this for delegated form submit events                                                                // 5039\n\t\t\tif ( jQuery.nodeName( this, \"form\" ) ) {                                                                          // 5040\n\t\t\t\treturn false;                                                                                                    // 5041\n\t\t\t}                                                                                                                 // 5042\n                                                                                                                     // 5043\n\t\t\t// Remove delegated handlers; cleanData eventually reaps submit handlers attached above                           // 5044\n\t\t\tjQuery.event.remove( this, \"._submit\" );                                                                          // 5045\n\t\t}                                                                                                                  // 5046\n\t};                                                                                                                  // 5047\n}                                                                                                                    // 5048\n                                                                                                                     // 5049\n// IE change delegation and checkbox/radio fix                                                                       // 5050\nif ( !support.changeBubbles ) {                                                                                      // 5051\n                                                                                                                     // 5052\n\tjQuery.event.special.change = {                                                                                     // 5053\n                                                                                                                     // 5054\n\t\tsetup: function() {                                                                                                // 5055\n                                                                                                                     // 5056\n\t\t\tif ( rformElems.test( this.nodeName ) ) {                                                                         // 5057\n\t\t\t\t// IE doesn't fire change on a check/radio until blur; trigger it on click                                       // 5058\n\t\t\t\t// after a propertychange. Eat the blur-change in special.change.handle.                                         // 5059\n\t\t\t\t// This still fires onchange a second time for check/radio after blur.                                           // 5060\n\t\t\t\tif ( this.type === \"checkbox\" || this.type === \"radio\" ) {                                                       // 5061\n\t\t\t\t\tjQuery.event.add( this, \"propertychange._change\", function( event ) {                                           // 5062\n\t\t\t\t\t\tif ( event.originalEvent.propertyName === \"checked\" ) {                                                        // 5063\n\t\t\t\t\t\t\tthis._just_changed = true;                                                                                    // 5064\n\t\t\t\t\t\t}                                                                                                              // 5065\n\t\t\t\t\t});                                                                                                             // 5066\n\t\t\t\t\tjQuery.event.add( this, \"click._change\", function( event ) {                                                    // 5067\n\t\t\t\t\t\tif ( this._just_changed && !event.isTrigger ) {                                                                // 5068\n\t\t\t\t\t\t\tthis._just_changed = false;                                                                                   // 5069\n\t\t\t\t\t\t}                                                                                                              // 5070\n\t\t\t\t\t\t// Allow triggered, simulated change events (#11500)                                                           // 5071\n\t\t\t\t\t\tjQuery.event.simulate( \"change\", this, event, true );                                                          // 5072\n\t\t\t\t\t});                                                                                                             // 5073\n\t\t\t\t}                                                                                                                // 5074\n\t\t\t\treturn false;                                                                                                    // 5075\n\t\t\t}                                                                                                                 // 5076\n\t\t\t// Delegated event; lazy-add a change handler on descendant inputs                                                // 5077\n\t\t\tjQuery.event.add( this, \"beforeactivate._change\", function( e ) {                                                 // 5078\n\t\t\t\tvar elem = e.target;                                                                                             // 5079\n                                                                                                                     // 5080\n\t\t\t\tif ( rformElems.test( elem.nodeName ) && !jQuery._data( elem, \"changeBubbles\" ) ) {                              // 5081\n\t\t\t\t\tjQuery.event.add( elem, \"change._change\", function( event ) {                                                   // 5082\n\t\t\t\t\t\tif ( this.parentNode && !event.isSimulated && !event.isTrigger ) {                                             // 5083\n\t\t\t\t\t\t\tjQuery.event.simulate( \"change\", this.parentNode, event, true );                                              // 5084\n\t\t\t\t\t\t}                                                                                                              // 5085\n\t\t\t\t\t});                                                                                                             // 5086\n\t\t\t\t\tjQuery._data( elem, \"changeBubbles\", true );                                                                    // 5087\n\t\t\t\t}                                                                                                                // 5088\n\t\t\t});                                                                                                               // 5089\n\t\t},                                                                                                                 // 5090\n                                                                                                                     // 5091\n\t\thandle: function( event ) {                                                                                        // 5092\n\t\t\tvar elem = event.target;                                                                                          // 5093\n                                                                                                                     // 5094\n\t\t\t// Swallow native change events from checkbox/radio, we already triggered them above                              // 5095\n\t\t\tif ( this !== elem || event.isSimulated || event.isTrigger || (elem.type !== \"radio\" && elem.type !== \"checkbox\") ) {\n\t\t\t\treturn event.handleObj.handler.apply( this, arguments );                                                         // 5097\n\t\t\t}                                                                                                                 // 5098\n\t\t},                                                                                                                 // 5099\n                                                                                                                     // 5100\n\t\tteardown: function() {                                                                                             // 5101\n\t\t\tjQuery.event.remove( this, \"._change\" );                                                                          // 5102\n                                                                                                                     // 5103\n\t\t\treturn !rformElems.test( this.nodeName );                                                                         // 5104\n\t\t}                                                                                                                  // 5105\n\t};                                                                                                                  // 5106\n}                                                                                                                    // 5107\n                                                                                                                     // 5108\n// Create \"bubbling\" focus and blur events                                                                           // 5109\nif ( !support.focusinBubbles ) {                                                                                     // 5110\n\tjQuery.each({ focus: \"focusin\", blur: \"focusout\" }, function( orig, fix ) {                                         // 5111\n                                                                                                                     // 5112\n\t\t// Attach a single capturing handler on the document while someone wants focusin/focusout                          // 5113\n\t\tvar handler = function( event ) {                                                                                  // 5114\n\t\t\t\tjQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );                                     // 5115\n\t\t\t};                                                                                                                // 5116\n                                                                                                                     // 5117\n\t\tjQuery.event.special[ fix ] = {                                                                                    // 5118\n\t\t\tsetup: function() {                                                                                               // 5119\n\t\t\t\tvar doc = this.ownerDocument || this,                                                                            // 5120\n\t\t\t\t\tattaches = jQuery._data( doc, fix );                                                                            // 5121\n                                                                                                                     // 5122\n\t\t\t\tif ( !attaches ) {                                                                                               // 5123\n\t\t\t\t\tdoc.addEventListener( orig, handler, true );                                                                    // 5124\n\t\t\t\t}                                                                                                                // 5125\n\t\t\t\tjQuery._data( doc, fix, ( attaches || 0 ) + 1 );                                                                 // 5126\n\t\t\t},                                                                                                                // 5127\n\t\t\tteardown: function() {                                                                                            // 5128\n\t\t\t\tvar doc = this.ownerDocument || this,                                                                            // 5129\n\t\t\t\t\tattaches = jQuery._data( doc, fix ) - 1;                                                                        // 5130\n                                                                                                                     // 5131\n\t\t\t\tif ( !attaches ) {                                                                                               // 5132\n\t\t\t\t\tdoc.removeEventListener( orig, handler, true );                                                                 // 5133\n\t\t\t\t\tjQuery._removeData( doc, fix );                                                                                 // 5134\n\t\t\t\t} else {                                                                                                         // 5135\n\t\t\t\t\tjQuery._data( doc, fix, attaches );                                                                             // 5136\n\t\t\t\t}                                                                                                                // 5137\n\t\t\t}                                                                                                                 // 5138\n\t\t};                                                                                                                 // 5139\n\t});                                                                                                                 // 5140\n}                                                                                                                    // 5141\n                                                                                                                     // 5142\njQuery.fn.extend({                                                                                                   // 5143\n                                                                                                                     // 5144\n\ton: function( types, selector, data, fn, /*INTERNAL*/ one ) {                                                       // 5145\n\t\tvar type, origFn;                                                                                                  // 5146\n                                                                                                                     // 5147\n\t\t// Types can be a map of types/handlers                                                                            // 5148\n\t\tif ( typeof types === \"object\" ) {                                                                                 // 5149\n\t\t\t// ( types-Object, selector, data )                                                                               // 5150\n\t\t\tif ( typeof selector !== \"string\" ) {                                                                             // 5151\n\t\t\t\t// ( types-Object, data )                                                                                        // 5152\n\t\t\t\tdata = data || selector;                                                                                         // 5153\n\t\t\t\tselector = undefined;                                                                                            // 5154\n\t\t\t}                                                                                                                 // 5155\n\t\t\tfor ( type in types ) {                                                                                           // 5156\n\t\t\t\tthis.on( type, selector, data, types[ type ], one );                                                             // 5157\n\t\t\t}                                                                                                                 // 5158\n\t\t\treturn this;                                                                                                      // 5159\n\t\t}                                                                                                                  // 5160\n                                                                                                                     // 5161\n\t\tif ( data == null && fn == null ) {                                                                                // 5162\n\t\t\t// ( types, fn )                                                                                                  // 5163\n\t\t\tfn = selector;                                                                                                    // 5164\n\t\t\tdata = selector = undefined;                                                                                      // 5165\n\t\t} else if ( fn == null ) {                                                                                         // 5166\n\t\t\tif ( typeof selector === \"string\" ) {                                                                             // 5167\n\t\t\t\t// ( types, selector, fn )                                                                                       // 5168\n\t\t\t\tfn = data;                                                                                                       // 5169\n\t\t\t\tdata = undefined;                                                                                                // 5170\n\t\t\t} else {                                                                                                          // 5171\n\t\t\t\t// ( types, data, fn )                                                                                           // 5172\n\t\t\t\tfn = data;                                                                                                       // 5173\n\t\t\t\tdata = selector;                                                                                                 // 5174\n\t\t\t\tselector = undefined;                                                                                            // 5175\n\t\t\t}                                                                                                                 // 5176\n\t\t}                                                                                                                  // 5177\n\t\tif ( fn === false ) {                                                                                              // 5178\n\t\t\tfn = returnFalse;                                                                                                 // 5179\n\t\t} else if ( !fn ) {                                                                                                // 5180\n\t\t\treturn this;                                                                                                      // 5181\n\t\t}                                                                                                                  // 5182\n                                                                                                                     // 5183\n\t\tif ( one === 1 ) {                                                                                                 // 5184\n\t\t\torigFn = fn;                                                                                                      // 5185\n\t\t\tfn = function( event ) {                                                                                          // 5186\n\t\t\t\t// Can use an empty set, since event contains the info                                                           // 5187\n\t\t\t\tjQuery().off( event );                                                                                           // 5188\n\t\t\t\treturn origFn.apply( this, arguments );                                                                          // 5189\n\t\t\t};                                                                                                                // 5190\n\t\t\t// Use same guid so caller can remove using origFn                                                                // 5191\n\t\t\tfn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );                                                         // 5192\n\t\t}                                                                                                                  // 5193\n\t\treturn this.each( function() {                                                                                     // 5194\n\t\t\tjQuery.event.add( this, types, fn, data, selector );                                                              // 5195\n\t\t});                                                                                                                // 5196\n\t},                                                                                                                  // 5197\n\tone: function( types, selector, data, fn ) {                                                                        // 5198\n\t\treturn this.on( types, selector, data, fn, 1 );                                                                    // 5199\n\t},                                                                                                                  // 5200\n\toff: function( types, selector, fn ) {                                                                              // 5201\n\t\tvar handleObj, type;                                                                                               // 5202\n\t\tif ( types && types.preventDefault && types.handleObj ) {                                                          // 5203\n\t\t\t// ( event )  dispatched jQuery.Event                                                                             // 5204\n\t\t\thandleObj = types.handleObj;                                                                                      // 5205\n\t\t\tjQuery( types.delegateTarget ).off(                                                                               // 5206\n\t\t\t\thandleObj.namespace ? handleObj.origType + \".\" + handleObj.namespace : handleObj.origType,                       // 5207\n\t\t\t\thandleObj.selector,                                                                                              // 5208\n\t\t\t\thandleObj.handler                                                                                                // 5209\n\t\t\t);                                                                                                                // 5210\n\t\t\treturn this;                                                                                                      // 5211\n\t\t}                                                                                                                  // 5212\n\t\tif ( typeof types === \"object\" ) {                                                                                 // 5213\n\t\t\t// ( types-object [, selector] )                                                                                  // 5214\n\t\t\tfor ( type in types ) {                                                                                           // 5215\n\t\t\t\tthis.off( type, selector, types[ type ] );                                                                       // 5216\n\t\t\t}                                                                                                                 // 5217\n\t\t\treturn this;                                                                                                      // 5218\n\t\t}                                                                                                                  // 5219\n\t\tif ( selector === false || typeof selector === \"function\" ) {                                                      // 5220\n\t\t\t// ( types [, fn] )                                                                                               // 5221\n\t\t\tfn = selector;                                                                                                    // 5222\n\t\t\tselector = undefined;                                                                                             // 5223\n\t\t}                                                                                                                  // 5224\n\t\tif ( fn === false ) {                                                                                              // 5225\n\t\t\tfn = returnFalse;                                                                                                 // 5226\n\t\t}                                                                                                                  // 5227\n\t\treturn this.each(function() {                                                                                      // 5228\n\t\t\tjQuery.event.remove( this, types, fn, selector );                                                                 // 5229\n\t\t});                                                                                                                // 5230\n\t},                                                                                                                  // 5231\n                                                                                                                     // 5232\n\ttrigger: function( type, data ) {                                                                                   // 5233\n\t\treturn this.each(function() {                                                                                      // 5234\n\t\t\tjQuery.event.trigger( type, data, this );                                                                         // 5235\n\t\t});                                                                                                                // 5236\n\t},                                                                                                                  // 5237\n\ttriggerHandler: function( type, data ) {                                                                            // 5238\n\t\tvar elem = this[0];                                                                                                // 5239\n\t\tif ( elem ) {                                                                                                      // 5240\n\t\t\treturn jQuery.event.trigger( type, data, elem, true );                                                            // 5241\n\t\t}                                                                                                                  // 5242\n\t}                                                                                                                   // 5243\n});                                                                                                                  // 5244\n                                                                                                                     // 5245\n                                                                                                                     // 5246\nfunction createSafeFragment( document ) {                                                                            // 5247\n\tvar list = nodeNames.split( \"|\" ),                                                                                  // 5248\n\t\tsafeFrag = document.createDocumentFragment();                                                                      // 5249\n                                                                                                                     // 5250\n\tif ( safeFrag.createElement ) {                                                                                     // 5251\n\t\twhile ( list.length ) {                                                                                            // 5252\n\t\t\tsafeFrag.createElement(                                                                                           // 5253\n\t\t\t\tlist.pop()                                                                                                       // 5254\n\t\t\t);                                                                                                                // 5255\n\t\t}                                                                                                                  // 5256\n\t}                                                                                                                   // 5257\n\treturn safeFrag;                                                                                                    // 5258\n}                                                                                                                    // 5259\n                                                                                                                     // 5260\nvar nodeNames = \"abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|\" +              // 5261\n\t\t\"header|hgroup|mark|meter|nav|output|progress|section|summary|time|video\",                                         // 5262\n\trinlinejQuery = / jQuery\\d+=\"(?:null|\\d+)\"/g,                                                                       // 5263\n\trnoshimcache = new RegExp(\"<(?:\" + nodeNames + \")[\\\\s/>]\", \"i\"),                                                    // 5264\n\trleadingWhitespace = /^\\s+/,                                                                                        // 5265\n\trxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\\w:]+)[^>]*)\\/>/gi,                              // 5266\n\trtagName = /<([\\w:]+)/,                                                                                             // 5267\n\trtbody = /<tbody/i,                                                                                                 // 5268\n\trhtml = /<|&#?\\w+;/,                                                                                                // 5269\n\trnoInnerhtml = /<(?:script|style|link)/i,                                                                           // 5270\n\t// checked=\"checked\" or checked                                                                                     // 5271\n\trchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i,                                                                     // 5272\n\trscriptType = /^$|\\/(?:java|ecma)script/i,                                                                          // 5273\n\trscriptTypeMasked = /^true\\/(.*)/,                                                                                  // 5274\n\trcleanScript = /^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g,                                                          // 5275\n                                                                                                                     // 5276\n\t// We have to close these tags to support XHTML (#13200)                                                            // 5277\n\twrapMap = {                                                                                                         // 5278\n\t\toption: [ 1, \"<select multiple='multiple'>\", \"</select>\" ],                                                        // 5279\n\t\tlegend: [ 1, \"<fieldset>\", \"</fieldset>\" ],                                                                        // 5280\n\t\tarea: [ 1, \"<map>\", \"</map>\" ],                                                                                    // 5281\n\t\tparam: [ 1, \"<object>\", \"</object>\" ],                                                                             // 5282\n\t\tthead: [ 1, \"<table>\", \"</table>\" ],                                                                               // 5283\n\t\ttr: [ 2, \"<table><tbody>\", \"</tbody></table>\" ],                                                                   // 5284\n\t\tcol: [ 2, \"<table><tbody></tbody><colgroup>\", \"</colgroup></table>\" ],                                             // 5285\n\t\ttd: [ 3, \"<table><tbody><tr>\", \"</tr></tbody></table>\" ],                                                          // 5286\n                                                                                                                     // 5287\n\t\t// IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,                                         // 5288\n\t\t// unless wrapped in a div with non-breaking characters in front of it.                                            // 5289\n\t\t_default: support.htmlSerialize ? [ 0, \"\", \"\" ] : [ 1, \"X<div>\", \"</div>\"  ]                                       // 5290\n\t},                                                                                                                  // 5291\n\tsafeFragment = createSafeFragment( document ),                                                                      // 5292\n\tfragmentDiv = safeFragment.appendChild( document.createElement(\"div\") );                                            // 5293\n                                                                                                                     // 5294\nwrapMap.optgroup = wrapMap.option;                                                                                   // 5295\nwrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;                                  // 5296\nwrapMap.th = wrapMap.td;                                                                                             // 5297\n                                                                                                                     // 5298\nfunction getAll( context, tag ) {                                                                                    // 5299\n\tvar elems, elem,                                                                                                    // 5300\n\t\ti = 0,                                                                                                             // 5301\n\t\tfound = typeof context.getElementsByTagName !== strundefined ? context.getElementsByTagName( tag || \"*\" ) :        // 5302\n\t\t\ttypeof context.querySelectorAll !== strundefined ? context.querySelectorAll( tag || \"*\" ) :                       // 5303\n\t\t\tundefined;                                                                                                        // 5304\n                                                                                                                     // 5305\n\tif ( !found ) {                                                                                                     // 5306\n\t\tfor ( found = [], elems = context.childNodes || context; (elem = elems[i]) != null; i++ ) {                        // 5307\n\t\t\tif ( !tag || jQuery.nodeName( elem, tag ) ) {                                                                     // 5308\n\t\t\t\tfound.push( elem );                                                                                              // 5309\n\t\t\t} else {                                                                                                          // 5310\n\t\t\t\tjQuery.merge( found, getAll( elem, tag ) );                                                                      // 5311\n\t\t\t}                                                                                                                 // 5312\n\t\t}                                                                                                                  // 5313\n\t}                                                                                                                   // 5314\n                                                                                                                     // 5315\n\treturn tag === undefined || tag && jQuery.nodeName( context, tag ) ?                                                // 5316\n\t\tjQuery.merge( [ context ], found ) :                                                                               // 5317\n\t\tfound;                                                                                                             // 5318\n}                                                                                                                    // 5319\n                                                                                                                     // 5320\n// Used in buildFragment, fixes the defaultChecked property                                                          // 5321\nfunction fixDefaultChecked( elem ) {                                                                                 // 5322\n\tif ( rcheckableType.test( elem.type ) ) {                                                                           // 5323\n\t\telem.defaultChecked = elem.checked;                                                                                // 5324\n\t}                                                                                                                   // 5325\n}                                                                                                                    // 5326\n                                                                                                                     // 5327\n// Support: IE<8                                                                                                     // 5328\n// Manipulating tables requires a tbody                                                                              // 5329\nfunction manipulationTarget( elem, content ) {                                                                       // 5330\n\treturn jQuery.nodeName( elem, \"table\" ) &&                                                                          // 5331\n\t\tjQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, \"tr\" ) ?                                  // 5332\n                                                                                                                     // 5333\n\t\telem.getElementsByTagName(\"tbody\")[0] ||                                                                           // 5334\n\t\t\telem.appendChild( elem.ownerDocument.createElement(\"tbody\") ) :                                                   // 5335\n\t\telem;                                                                                                              // 5336\n}                                                                                                                    // 5337\n                                                                                                                     // 5338\n// Replace/restore the type attribute of script elements for safe DOM manipulation                                   // 5339\nfunction disableScript( elem ) {                                                                                     // 5340\n\telem.type = (jQuery.find.attr( elem, \"type\" ) !== null) + \"/\" + elem.type;                                          // 5341\n\treturn elem;                                                                                                        // 5342\n}                                                                                                                    // 5343\nfunction restoreScript( elem ) {                                                                                     // 5344\n\tvar match = rscriptTypeMasked.exec( elem.type );                                                                    // 5345\n\tif ( match ) {                                                                                                      // 5346\n\t\telem.type = match[1];                                                                                              // 5347\n\t} else {                                                                                                            // 5348\n\t\telem.removeAttribute(\"type\");                                                                                      // 5349\n\t}                                                                                                                   // 5350\n\treturn elem;                                                                                                        // 5351\n}                                                                                                                    // 5352\n                                                                                                                     // 5353\n// Mark scripts as having already been evaluated                                                                     // 5354\nfunction setGlobalEval( elems, refElements ) {                                                                       // 5355\n\tvar elem,                                                                                                           // 5356\n\t\ti = 0;                                                                                                             // 5357\n\tfor ( ; (elem = elems[i]) != null; i++ ) {                                                                          // 5358\n\t\tjQuery._data( elem, \"globalEval\", !refElements || jQuery._data( refElements[i], \"globalEval\" ) );                  // 5359\n\t}                                                                                                                   // 5360\n}                                                                                                                    // 5361\n                                                                                                                     // 5362\nfunction cloneCopyEvent( src, dest ) {                                                                               // 5363\n                                                                                                                     // 5364\n\tif ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {                                                              // 5365\n\t\treturn;                                                                                                            // 5366\n\t}                                                                                                                   // 5367\n                                                                                                                     // 5368\n\tvar type, i, l,                                                                                                     // 5369\n\t\toldData = jQuery._data( src ),                                                                                     // 5370\n\t\tcurData = jQuery._data( dest, oldData ),                                                                           // 5371\n\t\tevents = oldData.events;                                                                                           // 5372\n                                                                                                                     // 5373\n\tif ( events ) {                                                                                                     // 5374\n\t\tdelete curData.handle;                                                                                             // 5375\n\t\tcurData.events = {};                                                                                               // 5376\n                                                                                                                     // 5377\n\t\tfor ( type in events ) {                                                                                           // 5378\n\t\t\tfor ( i = 0, l = events[ type ].length; i < l; i++ ) {                                                            // 5379\n\t\t\t\tjQuery.event.add( dest, type, events[ type ][ i ] );                                                             // 5380\n\t\t\t}                                                                                                                 // 5381\n\t\t}                                                                                                                  // 5382\n\t}                                                                                                                   // 5383\n                                                                                                                     // 5384\n\t// make the cloned public data object a copy from the original                                                      // 5385\n\tif ( curData.data ) {                                                                                               // 5386\n\t\tcurData.data = jQuery.extend( {}, curData.data );                                                                  // 5387\n\t}                                                                                                                   // 5388\n}                                                                                                                    // 5389\n                                                                                                                     // 5390\nfunction fixCloneNodeIssues( src, dest ) {                                                                           // 5391\n\tvar nodeName, e, data;                                                                                              // 5392\n                                                                                                                     // 5393\n\t// We do not need to do anything for non-Elements                                                                   // 5394\n\tif ( dest.nodeType !== 1 ) {                                                                                        // 5395\n\t\treturn;                                                                                                            // 5396\n\t}                                                                                                                   // 5397\n                                                                                                                     // 5398\n\tnodeName = dest.nodeName.toLowerCase();                                                                             // 5399\n                                                                                                                     // 5400\n\t// IE6-8 copies events bound via attachEvent when using cloneNode.                                                  // 5401\n\tif ( !support.noCloneEvent && dest[ jQuery.expando ] ) {                                                            // 5402\n\t\tdata = jQuery._data( dest );                                                                                       // 5403\n                                                                                                                     // 5404\n\t\tfor ( e in data.events ) {                                                                                         // 5405\n\t\t\tjQuery.removeEvent( dest, e, data.handle );                                                                       // 5406\n\t\t}                                                                                                                  // 5407\n                                                                                                                     // 5408\n\t\t// Event data gets referenced instead of copied if the expando gets copied too                                     // 5409\n\t\tdest.removeAttribute( jQuery.expando );                                                                            // 5410\n\t}                                                                                                                   // 5411\n                                                                                                                     // 5412\n\t// IE blanks contents when cloning scripts, and tries to evaluate newly-set text                                    // 5413\n\tif ( nodeName === \"script\" && dest.text !== src.text ) {                                                            // 5414\n\t\tdisableScript( dest ).text = src.text;                                                                             // 5415\n\t\trestoreScript( dest );                                                                                             // 5416\n                                                                                                                     // 5417\n\t// IE6-10 improperly clones children of object elements using classid.                                              // 5418\n\t// IE10 throws NoModificationAllowedError if parent is null, #12132.                                                // 5419\n\t} else if ( nodeName === \"object\" ) {                                                                               // 5420\n\t\tif ( dest.parentNode ) {                                                                                           // 5421\n\t\t\tdest.outerHTML = src.outerHTML;                                                                                   // 5422\n\t\t}                                                                                                                  // 5423\n                                                                                                                     // 5424\n\t\t// This path appears unavoidable for IE9. When cloning an object                                                   // 5425\n\t\t// element in IE9, the outerHTML strategy above is not sufficient.                                                 // 5426\n\t\t// If the src has innerHTML and the destination does not,                                                          // 5427\n\t\t// copy the src.innerHTML into the dest.innerHTML. #10324                                                          // 5428\n\t\tif ( support.html5Clone && ( src.innerHTML && !jQuery.trim(dest.innerHTML) ) ) {                                   // 5429\n\t\t\tdest.innerHTML = src.innerHTML;                                                                                   // 5430\n\t\t}                                                                                                                  // 5431\n                                                                                                                     // 5432\n\t} else if ( nodeName === \"input\" && rcheckableType.test( src.type ) ) {                                             // 5433\n\t\t// IE6-8 fails to persist the checked state of a cloned checkbox                                                   // 5434\n\t\t// or radio button. Worse, IE6-7 fail to give the cloned element                                                   // 5435\n\t\t// a checked appearance if the defaultChecked value isn't also set                                                 // 5436\n                                                                                                                     // 5437\n\t\tdest.defaultChecked = dest.checked = src.checked;                                                                  // 5438\n                                                                                                                     // 5439\n\t\t// IE6-7 get confused and end up setting the value of a cloned                                                     // 5440\n\t\t// checkbox/radio button to an empty string instead of \"on\"                                                        // 5441\n\t\tif ( dest.value !== src.value ) {                                                                                  // 5442\n\t\t\tdest.value = src.value;                                                                                           // 5443\n\t\t}                                                                                                                  // 5444\n                                                                                                                     // 5445\n\t// IE6-8 fails to return the selected option to the default selected                                                // 5446\n\t// state when cloning options                                                                                       // 5447\n\t} else if ( nodeName === \"option\" ) {                                                                               // 5448\n\t\tdest.defaultSelected = dest.selected = src.defaultSelected;                                                        // 5449\n                                                                                                                     // 5450\n\t// IE6-8 fails to set the defaultValue to the correct value when                                                    // 5451\n\t// cloning other types of input fields                                                                              // 5452\n\t} else if ( nodeName === \"input\" || nodeName === \"textarea\" ) {                                                     // 5453\n\t\tdest.defaultValue = src.defaultValue;                                                                              // 5454\n\t}                                                                                                                   // 5455\n}                                                                                                                    // 5456\n                                                                                                                     // 5457\njQuery.extend({                                                                                                      // 5458\n\tclone: function( elem, dataAndEvents, deepDataAndEvents ) {                                                         // 5459\n\t\tvar destElements, node, clone, i, srcElements,                                                                     // 5460\n\t\t\tinPage = jQuery.contains( elem.ownerDocument, elem );                                                             // 5461\n                                                                                                                     // 5462\n\t\tif ( support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test( \"<\" + elem.nodeName + \">\" ) ) {            // 5463\n\t\t\tclone = elem.cloneNode( true );                                                                                   // 5464\n                                                                                                                     // 5465\n\t\t// IE<=8 does not properly clone detached, unknown element nodes                                                   // 5466\n\t\t} else {                                                                                                           // 5467\n\t\t\tfragmentDiv.innerHTML = elem.outerHTML;                                                                           // 5468\n\t\t\tfragmentDiv.removeChild( clone = fragmentDiv.firstChild );                                                        // 5469\n\t\t}                                                                                                                  // 5470\n                                                                                                                     // 5471\n\t\tif ( (!support.noCloneEvent || !support.noCloneChecked) &&                                                         // 5472\n\t\t\t\t(elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem) ) {                                      // 5473\n                                                                                                                     // 5474\n\t\t\t// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2                            // 5475\n\t\t\tdestElements = getAll( clone );                                                                                   // 5476\n\t\t\tsrcElements = getAll( elem );                                                                                     // 5477\n                                                                                                                     // 5478\n\t\t\t// Fix all IE cloning issues                                                                                      // 5479\n\t\t\tfor ( i = 0; (node = srcElements[i]) != null; ++i ) {                                                             // 5480\n\t\t\t\t// Ensure that the destination node is not null; Fixes #9587                                                     // 5481\n\t\t\t\tif ( destElements[i] ) {                                                                                         // 5482\n\t\t\t\t\tfixCloneNodeIssues( node, destElements[i] );                                                                    // 5483\n\t\t\t\t}                                                                                                                // 5484\n\t\t\t}                                                                                                                 // 5485\n\t\t}                                                                                                                  // 5486\n                                                                                                                     // 5487\n\t\t// Copy the events from the original to the clone                                                                  // 5488\n\t\tif ( dataAndEvents ) {                                                                                             // 5489\n\t\t\tif ( deepDataAndEvents ) {                                                                                        // 5490\n\t\t\t\tsrcElements = srcElements || getAll( elem );                                                                     // 5491\n\t\t\t\tdestElements = destElements || getAll( clone );                                                                  // 5492\n                                                                                                                     // 5493\n\t\t\t\tfor ( i = 0; (node = srcElements[i]) != null; i++ ) {                                                            // 5494\n\t\t\t\t\tcloneCopyEvent( node, destElements[i] );                                                                        // 5495\n\t\t\t\t}                                                                                                                // 5496\n\t\t\t} else {                                                                                                          // 5497\n\t\t\t\tcloneCopyEvent( elem, clone );                                                                                   // 5498\n\t\t\t}                                                                                                                 // 5499\n\t\t}                                                                                                                  // 5500\n                                                                                                                     // 5501\n\t\t// Preserve script evaluation history                                                                              // 5502\n\t\tdestElements = getAll( clone, \"script\" );                                                                          // 5503\n\t\tif ( destElements.length > 0 ) {                                                                                   // 5504\n\t\t\tsetGlobalEval( destElements, !inPage && getAll( elem, \"script\" ) );                                               // 5505\n\t\t}                                                                                                                  // 5506\n                                                                                                                     // 5507\n\t\tdestElements = srcElements = node = null;                                                                          // 5508\n                                                                                                                     // 5509\n\t\t// Return the cloned set                                                                                           // 5510\n\t\treturn clone;                                                                                                      // 5511\n\t},                                                                                                                  // 5512\n                                                                                                                     // 5513\n\tbuildFragment: function( elems, context, scripts, selection ) {                                                     // 5514\n\t\tvar j, elem, contains,                                                                                             // 5515\n\t\t\ttmp, tag, tbody, wrap,                                                                                            // 5516\n\t\t\tl = elems.length,                                                                                                 // 5517\n                                                                                                                     // 5518\n\t\t\t// Ensure a safe fragment                                                                                         // 5519\n\t\t\tsafe = createSafeFragment( context ),                                                                             // 5520\n                                                                                                                     // 5521\n\t\t\tnodes = [],                                                                                                       // 5522\n\t\t\ti = 0;                                                                                                            // 5523\n                                                                                                                     // 5524\n\t\tfor ( ; i < l; i++ ) {                                                                                             // 5525\n\t\t\telem = elems[ i ];                                                                                                // 5526\n                                                                                                                     // 5527\n\t\t\tif ( elem || elem === 0 ) {                                                                                       // 5528\n                                                                                                                     // 5529\n\t\t\t\t// Add nodes directly                                                                                            // 5530\n\t\t\t\tif ( jQuery.type( elem ) === \"object\" ) {                                                                        // 5531\n\t\t\t\t\tjQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );                                                         // 5532\n                                                                                                                     // 5533\n\t\t\t\t// Convert non-html into a text node                                                                             // 5534\n\t\t\t\t} else if ( !rhtml.test( elem ) ) {                                                                              // 5535\n\t\t\t\t\tnodes.push( context.createTextNode( elem ) );                                                                   // 5536\n                                                                                                                     // 5537\n\t\t\t\t// Convert html into DOM nodes                                                                                   // 5538\n\t\t\t\t} else {                                                                                                         // 5539\n\t\t\t\t\ttmp = tmp || safe.appendChild( context.createElement(\"div\") );                                                  // 5540\n                                                                                                                     // 5541\n\t\t\t\t\t// Deserialize a standard representation                                                                        // 5542\n\t\t\t\t\ttag = (rtagName.exec( elem ) || [ \"\", \"\" ])[ 1 ].toLowerCase();                                                 // 5543\n\t\t\t\t\twrap = wrapMap[ tag ] || wrapMap._default;                                                                      // 5544\n                                                                                                                     // 5545\n\t\t\t\t\ttmp.innerHTML = wrap[1] + elem.replace( rxhtmlTag, \"<$1></$2>\" ) + wrap[2];                                     // 5546\n                                                                                                                     // 5547\n\t\t\t\t\t// Descend through wrappers to the right content                                                                // 5548\n\t\t\t\t\tj = wrap[0];                                                                                                    // 5549\n\t\t\t\t\twhile ( j-- ) {                                                                                                 // 5550\n\t\t\t\t\t\ttmp = tmp.lastChild;                                                                                           // 5551\n\t\t\t\t\t}                                                                                                               // 5552\n                                                                                                                     // 5553\n\t\t\t\t\t// Manually add leading whitespace removed by IE                                                                // 5554\n\t\t\t\t\tif ( !support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {                                          // 5555\n\t\t\t\t\t\tnodes.push( context.createTextNode( rleadingWhitespace.exec( elem )[0] ) );                                    // 5556\n\t\t\t\t\t}                                                                                                               // 5557\n                                                                                                                     // 5558\n\t\t\t\t\t// Remove IE's autoinserted <tbody> from table fragments                                                        // 5559\n\t\t\t\t\tif ( !support.tbody ) {                                                                                         // 5560\n                                                                                                                     // 5561\n\t\t\t\t\t\t// String was a <table>, *may* have spurious <tbody>                                                           // 5562\n\t\t\t\t\t\telem = tag === \"table\" && !rtbody.test( elem ) ?                                                               // 5563\n\t\t\t\t\t\t\ttmp.firstChild :                                                                                              // 5564\n                                                                                                                     // 5565\n\t\t\t\t\t\t\t// String was a bare <thead> or <tfoot>                                                                       // 5566\n\t\t\t\t\t\t\twrap[1] === \"<table>\" && !rtbody.test( elem ) ?                                                               // 5567\n\t\t\t\t\t\t\t\ttmp :                                                                                                        // 5568\n\t\t\t\t\t\t\t\t0;                                                                                                           // 5569\n                                                                                                                     // 5570\n\t\t\t\t\t\tj = elem && elem.childNodes.length;                                                                            // 5571\n\t\t\t\t\t\twhile ( j-- ) {                                                                                                // 5572\n\t\t\t\t\t\t\tif ( jQuery.nodeName( (tbody = elem.childNodes[j]), \"tbody\" ) && !tbody.childNodes.length ) {                 // 5573\n\t\t\t\t\t\t\t\telem.removeChild( tbody );                                                                                   // 5574\n\t\t\t\t\t\t\t}                                                                                                             // 5575\n\t\t\t\t\t\t}                                                                                                              // 5576\n\t\t\t\t\t}                                                                                                               // 5577\n                                                                                                                     // 5578\n\t\t\t\t\tjQuery.merge( nodes, tmp.childNodes );                                                                          // 5579\n                                                                                                                     // 5580\n\t\t\t\t\t// Fix #12392 for WebKit and IE > 9                                                                             // 5581\n\t\t\t\t\ttmp.textContent = \"\";                                                                                           // 5582\n                                                                                                                     // 5583\n\t\t\t\t\t// Fix #12392 for oldIE                                                                                         // 5584\n\t\t\t\t\twhile ( tmp.firstChild ) {                                                                                      // 5585\n\t\t\t\t\t\ttmp.removeChild( tmp.firstChild );                                                                             // 5586\n\t\t\t\t\t}                                                                                                               // 5587\n                                                                                                                     // 5588\n\t\t\t\t\t// Remember the top-level container for proper cleanup                                                          // 5589\n\t\t\t\t\ttmp = safe.lastChild;                                                                                           // 5590\n\t\t\t\t}                                                                                                                // 5591\n\t\t\t}                                                                                                                 // 5592\n\t\t}                                                                                                                  // 5593\n                                                                                                                     // 5594\n\t\t// Fix #11356: Clear elements from fragment                                                                        // 5595\n\t\tif ( tmp ) {                                                                                                       // 5596\n\t\t\tsafe.removeChild( tmp );                                                                                          // 5597\n\t\t}                                                                                                                  // 5598\n                                                                                                                     // 5599\n\t\t// Reset defaultChecked for any radios and checkboxes                                                              // 5600\n\t\t// about to be appended to the DOM in IE 6/7 (#8060)                                                               // 5601\n\t\tif ( !support.appendChecked ) {                                                                                    // 5602\n\t\t\tjQuery.grep( getAll( nodes, \"input\" ), fixDefaultChecked );                                                       // 5603\n\t\t}                                                                                                                  // 5604\n                                                                                                                     // 5605\n\t\ti = 0;                                                                                                             // 5606\n\t\twhile ( (elem = nodes[ i++ ]) ) {                                                                                  // 5607\n                                                                                                                     // 5608\n\t\t\t// #4087 - If origin and destination elements are the same, and this is                                           // 5609\n\t\t\t// that element, do not do anything                                                                               // 5610\n\t\t\tif ( selection && jQuery.inArray( elem, selection ) !== -1 ) {                                                    // 5611\n\t\t\t\tcontinue;                                                                                                        // 5612\n\t\t\t}                                                                                                                 // 5613\n                                                                                                                     // 5614\n\t\t\tcontains = jQuery.contains( elem.ownerDocument, elem );                                                           // 5615\n                                                                                                                     // 5616\n\t\t\t// Append to fragment                                                                                             // 5617\n\t\t\ttmp = getAll( safe.appendChild( elem ), \"script\" );                                                               // 5618\n                                                                                                                     // 5619\n\t\t\t// Preserve script evaluation history                                                                             // 5620\n\t\t\tif ( contains ) {                                                                                                 // 5621\n\t\t\t\tsetGlobalEval( tmp );                                                                                            // 5622\n\t\t\t}                                                                                                                 // 5623\n                                                                                                                     // 5624\n\t\t\t// Capture executables                                                                                            // 5625\n\t\t\tif ( scripts ) {                                                                                                  // 5626\n\t\t\t\tj = 0;                                                                                                           // 5627\n\t\t\t\twhile ( (elem = tmp[ j++ ]) ) {                                                                                  // 5628\n\t\t\t\t\tif ( rscriptType.test( elem.type || \"\" ) ) {                                                                    // 5629\n\t\t\t\t\t\tscripts.push( elem );                                                                                          // 5630\n\t\t\t\t\t}                                                                                                               // 5631\n\t\t\t\t}                                                                                                                // 5632\n\t\t\t}                                                                                                                 // 5633\n\t\t}                                                                                                                  // 5634\n                                                                                                                     // 5635\n\t\ttmp = null;                                                                                                        // 5636\n                                                                                                                     // 5637\n\t\treturn safe;                                                                                                       // 5638\n\t},                                                                                                                  // 5639\n                                                                                                                     // 5640\n\tcleanData: function( elems, /* internal */ acceptData ) {                                                           // 5641\n\t\tvar elem, type, id, data,                                                                                          // 5642\n\t\t\ti = 0,                                                                                                            // 5643\n\t\t\tinternalKey = jQuery.expando,                                                                                     // 5644\n\t\t\tcache = jQuery.cache,                                                                                             // 5645\n\t\t\tdeleteExpando = support.deleteExpando,                                                                            // 5646\n\t\t\tspecial = jQuery.event.special;                                                                                   // 5647\n                                                                                                                     // 5648\n\t\tfor ( ; (elem = elems[i]) != null; i++ ) {                                                                         // 5649\n\t\t\tif ( acceptData || jQuery.acceptData( elem ) ) {                                                                  // 5650\n                                                                                                                     // 5651\n\t\t\t\tid = elem[ internalKey ];                                                                                        // 5652\n\t\t\t\tdata = id && cache[ id ];                                                                                        // 5653\n                                                                                                                     // 5654\n\t\t\t\tif ( data ) {                                                                                                    // 5655\n\t\t\t\t\tif ( data.events ) {                                                                                            // 5656\n\t\t\t\t\t\tfor ( type in data.events ) {                                                                                  // 5657\n\t\t\t\t\t\t\tif ( special[ type ] ) {                                                                                      // 5658\n\t\t\t\t\t\t\t\tjQuery.event.remove( elem, type );                                                                           // 5659\n                                                                                                                     // 5660\n\t\t\t\t\t\t\t// This is a shortcut to avoid jQuery.event.remove's overhead                                                 // 5661\n\t\t\t\t\t\t\t} else {                                                                                                      // 5662\n\t\t\t\t\t\t\t\tjQuery.removeEvent( elem, type, data.handle );                                                               // 5663\n\t\t\t\t\t\t\t}                                                                                                             // 5664\n\t\t\t\t\t\t}                                                                                                              // 5665\n\t\t\t\t\t}                                                                                                               // 5666\n                                                                                                                     // 5667\n\t\t\t\t\t// Remove cache only if it was not already removed by jQuery.event.remove                                       // 5668\n\t\t\t\t\tif ( cache[ id ] ) {                                                                                            // 5669\n                                                                                                                     // 5670\n\t\t\t\t\t\tdelete cache[ id ];                                                                                            // 5671\n                                                                                                                     // 5672\n\t\t\t\t\t\t// IE does not allow us to delete expando properties from nodes,                                               // 5673\n\t\t\t\t\t\t// nor does it have a removeAttribute function on Document nodes;                                              // 5674\n\t\t\t\t\t\t// we must handle all of these cases                                                                           // 5675\n\t\t\t\t\t\tif ( deleteExpando ) {                                                                                         // 5676\n\t\t\t\t\t\t\tdelete elem[ internalKey ];                                                                                   // 5677\n                                                                                                                     // 5678\n\t\t\t\t\t\t} else if ( typeof elem.removeAttribute !== strundefined ) {                                                   // 5679\n\t\t\t\t\t\t\telem.removeAttribute( internalKey );                                                                          // 5680\n                                                                                                                     // 5681\n\t\t\t\t\t\t} else {                                                                                                       // 5682\n\t\t\t\t\t\t\telem[ internalKey ] = null;                                                                                   // 5683\n\t\t\t\t\t\t}                                                                                                              // 5684\n                                                                                                                     // 5685\n\t\t\t\t\t\tdeletedIds.push( id );                                                                                         // 5686\n\t\t\t\t\t}                                                                                                               // 5687\n\t\t\t\t}                                                                                                                // 5688\n\t\t\t}                                                                                                                 // 5689\n\t\t}                                                                                                                  // 5690\n\t}                                                                                                                   // 5691\n});                                                                                                                  // 5692\n                                                                                                                     // 5693\njQuery.fn.extend({                                                                                                   // 5694\n\ttext: function( value ) {                                                                                           // 5695\n\t\treturn access( this, function( value ) {                                                                           // 5696\n\t\t\treturn value === undefined ?                                                                                      // 5697\n\t\t\t\tjQuery.text( this ) :                                                                                            // 5698\n\t\t\t\tthis.empty().append( ( this[0] && this[0].ownerDocument || document ).createTextNode( value ) );                 // 5699\n\t\t}, null, value, arguments.length );                                                                                // 5700\n\t},                                                                                                                  // 5701\n                                                                                                                     // 5702\n\tappend: function() {                                                                                                // 5703\n\t\treturn this.domManip( arguments, function( elem ) {                                                                // 5704\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {                                       // 5705\n\t\t\t\tvar target = manipulationTarget( this, elem );                                                                   // 5706\n\t\t\t\ttarget.appendChild( elem );                                                                                      // 5707\n\t\t\t}                                                                                                                 // 5708\n\t\t});                                                                                                                // 5709\n\t},                                                                                                                  // 5710\n                                                                                                                     // 5711\n\tprepend: function() {                                                                                               // 5712\n\t\treturn this.domManip( arguments, function( elem ) {                                                                // 5713\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {                                       // 5714\n\t\t\t\tvar target = manipulationTarget( this, elem );                                                                   // 5715\n\t\t\t\ttarget.insertBefore( elem, target.firstChild );                                                                  // 5716\n\t\t\t}                                                                                                                 // 5717\n\t\t});                                                                                                                // 5718\n\t},                                                                                                                  // 5719\n                                                                                                                     // 5720\n\tbefore: function() {                                                                                                // 5721\n\t\treturn this.domManip( arguments, function( elem ) {                                                                // 5722\n\t\t\tif ( this.parentNode ) {                                                                                          // 5723\n\t\t\t\tthis.parentNode.insertBefore( elem, this );                                                                      // 5724\n\t\t\t}                                                                                                                 // 5725\n\t\t});                                                                                                                // 5726\n\t},                                                                                                                  // 5727\n                                                                                                                     // 5728\n\tafter: function() {                                                                                                 // 5729\n\t\treturn this.domManip( arguments, function( elem ) {                                                                // 5730\n\t\t\tif ( this.parentNode ) {                                                                                          // 5731\n\t\t\t\tthis.parentNode.insertBefore( elem, this.nextSibling );                                                          // 5732\n\t\t\t}                                                                                                                 // 5733\n\t\t});                                                                                                                // 5734\n\t},                                                                                                                  // 5735\n                                                                                                                     // 5736\n\tremove: function( selector, keepData /* Internal Use Only */ ) {                                                    // 5737\n\t\tvar elem,                                                                                                          // 5738\n\t\t\telems = selector ? jQuery.filter( selector, this ) : this,                                                        // 5739\n\t\t\ti = 0;                                                                                                            // 5740\n                                                                                                                     // 5741\n\t\tfor ( ; (elem = elems[i]) != null; i++ ) {                                                                         // 5742\n                                                                                                                     // 5743\n\t\t\tif ( !keepData && elem.nodeType === 1 ) {                                                                         // 5744\n\t\t\t\tjQuery.cleanData( getAll( elem ) );                                                                              // 5745\n\t\t\t}                                                                                                                 // 5746\n                                                                                                                     // 5747\n\t\t\tif ( elem.parentNode ) {                                                                                          // 5748\n\t\t\t\tif ( keepData && jQuery.contains( elem.ownerDocument, elem ) ) {                                                 // 5749\n\t\t\t\t\tsetGlobalEval( getAll( elem, \"script\" ) );                                                                      // 5750\n\t\t\t\t}                                                                                                                // 5751\n\t\t\t\telem.parentNode.removeChild( elem );                                                                             // 5752\n\t\t\t}                                                                                                                 // 5753\n\t\t}                                                                                                                  // 5754\n                                                                                                                     // 5755\n\t\treturn this;                                                                                                       // 5756\n\t},                                                                                                                  // 5757\n                                                                                                                     // 5758\n\tempty: function() {                                                                                                 // 5759\n\t\tvar elem,                                                                                                          // 5760\n\t\t\ti = 0;                                                                                                            // 5761\n                                                                                                                     // 5762\n\t\tfor ( ; (elem = this[i]) != null; i++ ) {                                                                          // 5763\n\t\t\t// Remove element nodes and prevent memory leaks                                                                  // 5764\n\t\t\tif ( elem.nodeType === 1 ) {                                                                                      // 5765\n\t\t\t\tjQuery.cleanData( getAll( elem, false ) );                                                                       // 5766\n\t\t\t}                                                                                                                 // 5767\n                                                                                                                     // 5768\n\t\t\t// Remove any remaining nodes                                                                                     // 5769\n\t\t\twhile ( elem.firstChild ) {                                                                                       // 5770\n\t\t\t\telem.removeChild( elem.firstChild );                                                                             // 5771\n\t\t\t}                                                                                                                 // 5772\n                                                                                                                     // 5773\n\t\t\t// If this is a select, ensure that it displays empty (#12336)                                                    // 5774\n\t\t\t// Support: IE<9                                                                                                  // 5775\n\t\t\tif ( elem.options && jQuery.nodeName( elem, \"select\" ) ) {                                                        // 5776\n\t\t\t\telem.options.length = 0;                                                                                         // 5777\n\t\t\t}                                                                                                                 // 5778\n\t\t}                                                                                                                  // 5779\n                                                                                                                     // 5780\n\t\treturn this;                                                                                                       // 5781\n\t},                                                                                                                  // 5782\n                                                                                                                     // 5783\n\tclone: function( dataAndEvents, deepDataAndEvents ) {                                                               // 5784\n\t\tdataAndEvents = dataAndEvents == null ? false : dataAndEvents;                                                     // 5785\n\t\tdeepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;                                 // 5786\n                                                                                                                     // 5787\n\t\treturn this.map(function() {                                                                                       // 5788\n\t\t\treturn jQuery.clone( this, dataAndEvents, deepDataAndEvents );                                                    // 5789\n\t\t});                                                                                                                // 5790\n\t},                                                                                                                  // 5791\n                                                                                                                     // 5792\n\thtml: function( value ) {                                                                                           // 5793\n\t\treturn access( this, function( value ) {                                                                           // 5794\n\t\t\tvar elem = this[ 0 ] || {},                                                                                       // 5795\n\t\t\t\ti = 0,                                                                                                           // 5796\n\t\t\t\tl = this.length;                                                                                                 // 5797\n                                                                                                                     // 5798\n\t\t\tif ( value === undefined ) {                                                                                      // 5799\n\t\t\t\treturn elem.nodeType === 1 ?                                                                                     // 5800\n\t\t\t\t\telem.innerHTML.replace( rinlinejQuery, \"\" ) :                                                                   // 5801\n\t\t\t\t\tundefined;                                                                                                      // 5802\n\t\t\t}                                                                                                                 // 5803\n                                                                                                                     // 5804\n\t\t\t// See if we can take a shortcut and just use innerHTML                                                           // 5805\n\t\t\tif ( typeof value === \"string\" && !rnoInnerhtml.test( value ) &&                                                  // 5806\n\t\t\t\t( support.htmlSerialize || !rnoshimcache.test( value )  ) &&                                                     // 5807\n\t\t\t\t( support.leadingWhitespace || !rleadingWhitespace.test( value ) ) &&                                            // 5808\n\t\t\t\t!wrapMap[ (rtagName.exec( value ) || [ \"\", \"\" ])[ 1 ].toLowerCase() ] ) {                                        // 5809\n                                                                                                                     // 5810\n\t\t\t\tvalue = value.replace( rxhtmlTag, \"<$1></$2>\" );                                                                 // 5811\n                                                                                                                     // 5812\n\t\t\t\ttry {                                                                                                            // 5813\n\t\t\t\t\tfor (; i < l; i++ ) {                                                                                           // 5814\n\t\t\t\t\t\t// Remove element nodes and prevent memory leaks                                                               // 5815\n\t\t\t\t\t\telem = this[i] || {};                                                                                          // 5816\n\t\t\t\t\t\tif ( elem.nodeType === 1 ) {                                                                                   // 5817\n\t\t\t\t\t\t\tjQuery.cleanData( getAll( elem, false ) );                                                                    // 5818\n\t\t\t\t\t\t\telem.innerHTML = value;                                                                                       // 5819\n\t\t\t\t\t\t}                                                                                                              // 5820\n\t\t\t\t\t}                                                                                                               // 5821\n                                                                                                                     // 5822\n\t\t\t\t\telem = 0;                                                                                                       // 5823\n                                                                                                                     // 5824\n\t\t\t\t// If using innerHTML throws an exception, use the fallback method                                               // 5825\n\t\t\t\t} catch(e) {}                                                                                                    // 5826\n\t\t\t}                                                                                                                 // 5827\n                                                                                                                     // 5828\n\t\t\tif ( elem ) {                                                                                                     // 5829\n\t\t\t\tthis.empty().append( value );                                                                                    // 5830\n\t\t\t}                                                                                                                 // 5831\n\t\t}, null, value, arguments.length );                                                                                // 5832\n\t},                                                                                                                  // 5833\n                                                                                                                     // 5834\n\treplaceWith: function() {                                                                                           // 5835\n\t\tvar arg = arguments[ 0 ];                                                                                          // 5836\n                                                                                                                     // 5837\n\t\t// Make the changes, replacing each context element with the new content                                           // 5838\n\t\tthis.domManip( arguments, function( elem ) {                                                                       // 5839\n\t\t\targ = this.parentNode;                                                                                            // 5840\n                                                                                                                     // 5841\n\t\t\tjQuery.cleanData( getAll( this ) );                                                                               // 5842\n                                                                                                                     // 5843\n\t\t\tif ( arg ) {                                                                                                      // 5844\n\t\t\t\targ.replaceChild( elem, this );                                                                                  // 5845\n\t\t\t}                                                                                                                 // 5846\n\t\t});                                                                                                                // 5847\n                                                                                                                     // 5848\n\t\t// Force removal if there was no new content (e.g., from empty arguments)                                          // 5849\n\t\treturn arg && (arg.length || arg.nodeType) ? this : this.remove();                                                 // 5850\n\t},                                                                                                                  // 5851\n                                                                                                                     // 5852\n\tdetach: function( selector ) {                                                                                      // 5853\n\t\treturn this.remove( selector, true );                                                                              // 5854\n\t},                                                                                                                  // 5855\n                                                                                                                     // 5856\n\tdomManip: function( args, callback ) {                                                                              // 5857\n                                                                                                                     // 5858\n\t\t// Flatten any nested arrays                                                                                       // 5859\n\t\targs = concat.apply( [], args );                                                                                   // 5860\n                                                                                                                     // 5861\n\t\tvar first, node, hasScripts,                                                                                       // 5862\n\t\t\tscripts, doc, fragment,                                                                                           // 5863\n\t\t\ti = 0,                                                                                                            // 5864\n\t\t\tl = this.length,                                                                                                  // 5865\n\t\t\tset = this,                                                                                                       // 5866\n\t\t\tiNoClone = l - 1,                                                                                                 // 5867\n\t\t\tvalue = args[0],                                                                                                  // 5868\n\t\t\tisFunction = jQuery.isFunction( value );                                                                          // 5869\n                                                                                                                     // 5870\n\t\t// We can't cloneNode fragments that contain checked, in WebKit                                                    // 5871\n\t\tif ( isFunction ||                                                                                                 // 5872\n\t\t\t\t( l > 1 && typeof value === \"string\" &&                                                                          // 5873\n\t\t\t\t\t!support.checkClone && rchecked.test( value ) ) ) {                                                             // 5874\n\t\t\treturn this.each(function( index ) {                                                                              // 5875\n\t\t\t\tvar self = set.eq( index );                                                                                      // 5876\n\t\t\t\tif ( isFunction ) {                                                                                              // 5877\n\t\t\t\t\targs[0] = value.call( this, index, self.html() );                                                               // 5878\n\t\t\t\t}                                                                                                                // 5879\n\t\t\t\tself.domManip( args, callback );                                                                                 // 5880\n\t\t\t});                                                                                                               // 5881\n\t\t}                                                                                                                  // 5882\n                                                                                                                     // 5883\n\t\tif ( l ) {                                                                                                         // 5884\n\t\t\tfragment = jQuery.buildFragment( args, this[ 0 ].ownerDocument, false, this );                                    // 5885\n\t\t\tfirst = fragment.firstChild;                                                                                      // 5886\n                                                                                                                     // 5887\n\t\t\tif ( fragment.childNodes.length === 1 ) {                                                                         // 5888\n\t\t\t\tfragment = first;                                                                                                // 5889\n\t\t\t}                                                                                                                 // 5890\n                                                                                                                     // 5891\n\t\t\tif ( first ) {                                                                                                    // 5892\n\t\t\t\tscripts = jQuery.map( getAll( fragment, \"script\" ), disableScript );                                             // 5893\n\t\t\t\thasScripts = scripts.length;                                                                                     // 5894\n                                                                                                                     // 5895\n\t\t\t\t// Use the original fragment for the last item instead of the first because it can end up                        // 5896\n\t\t\t\t// being emptied incorrectly in certain situations (#8070).                                                      // 5897\n\t\t\t\tfor ( ; i < l; i++ ) {                                                                                           // 5898\n\t\t\t\t\tnode = fragment;                                                                                                // 5899\n                                                                                                                     // 5900\n\t\t\t\t\tif ( i !== iNoClone ) {                                                                                         // 5901\n\t\t\t\t\t\tnode = jQuery.clone( node, true, true );                                                                       // 5902\n                                                                                                                     // 5903\n\t\t\t\t\t\t// Keep references to cloned scripts for later restoration                                                     // 5904\n\t\t\t\t\t\tif ( hasScripts ) {                                                                                            // 5905\n\t\t\t\t\t\t\tjQuery.merge( scripts, getAll( node, \"script\" ) );                                                            // 5906\n\t\t\t\t\t\t}                                                                                                              // 5907\n\t\t\t\t\t}                                                                                                               // 5908\n                                                                                                                     // 5909\n\t\t\t\t\tcallback.call( this[i], node, i );                                                                              // 5910\n\t\t\t\t}                                                                                                                // 5911\n                                                                                                                     // 5912\n\t\t\t\tif ( hasScripts ) {                                                                                              // 5913\n\t\t\t\t\tdoc = scripts[ scripts.length - 1 ].ownerDocument;                                                              // 5914\n                                                                                                                     // 5915\n\t\t\t\t\t// Reenable scripts                                                                                             // 5916\n\t\t\t\t\tjQuery.map( scripts, restoreScript );                                                                           // 5917\n                                                                                                                     // 5918\n\t\t\t\t\t// Evaluate executable scripts on first document insertion                                                      // 5919\n\t\t\t\t\tfor ( i = 0; i < hasScripts; i++ ) {                                                                            // 5920\n\t\t\t\t\t\tnode = scripts[ i ];                                                                                           // 5921\n\t\t\t\t\t\tif ( rscriptType.test( node.type || \"\" ) &&                                                                    // 5922\n\t\t\t\t\t\t\t!jQuery._data( node, \"globalEval\" ) && jQuery.contains( doc, node ) ) {                                       // 5923\n                                                                                                                     // 5924\n\t\t\t\t\t\t\tif ( node.src ) {                                                                                             // 5925\n\t\t\t\t\t\t\t\t// Optional AJAX dependency, but won't run scripts if not present                                            // 5926\n\t\t\t\t\t\t\t\tif ( jQuery._evalUrl ) {                                                                                     // 5927\n\t\t\t\t\t\t\t\t\tjQuery._evalUrl( node.src );                                                                                // 5928\n\t\t\t\t\t\t\t\t}                                                                                                            // 5929\n\t\t\t\t\t\t\t} else {                                                                                                      // 5930\n\t\t\t\t\t\t\t\tjQuery.globalEval( ( node.text || node.textContent || node.innerHTML || \"\" ).replace( rcleanScript, \"\" ) );  // 5931\n\t\t\t\t\t\t\t}                                                                                                             // 5932\n\t\t\t\t\t\t}                                                                                                              // 5933\n\t\t\t\t\t}                                                                                                               // 5934\n\t\t\t\t}                                                                                                                // 5935\n                                                                                                                     // 5936\n\t\t\t\t// Fix #11809: Avoid leaking memory                                                                              // 5937\n\t\t\t\tfragment = first = null;                                                                                         // 5938\n\t\t\t}                                                                                                                 // 5939\n\t\t}                                                                                                                  // 5940\n                                                                                                                     // 5941\n\t\treturn this;                                                                                                       // 5942\n\t}                                                                                                                   // 5943\n});                                                                                                                  // 5944\n                                                                                                                     // 5945\njQuery.each({                                                                                                        // 5946\n\tappendTo: \"append\",                                                                                                 // 5947\n\tprependTo: \"prepend\",                                                                                               // 5948\n\tinsertBefore: \"before\",                                                                                             // 5949\n\tinsertAfter: \"after\",                                                                                               // 5950\n\treplaceAll: \"replaceWith\"                                                                                           // 5951\n}, function( name, original ) {                                                                                      // 5952\n\tjQuery.fn[ name ] = function( selector ) {                                                                          // 5953\n\t\tvar elems,                                                                                                         // 5954\n\t\t\ti = 0,                                                                                                            // 5955\n\t\t\tret = [],                                                                                                         // 5956\n\t\t\tinsert = jQuery( selector ),                                                                                      // 5957\n\t\t\tlast = insert.length - 1;                                                                                         // 5958\n                                                                                                                     // 5959\n\t\tfor ( ; i <= last; i++ ) {                                                                                         // 5960\n\t\t\telems = i === last ? this : this.clone(true);                                                                     // 5961\n\t\t\tjQuery( insert[i] )[ original ]( elems );                                                                         // 5962\n                                                                                                                     // 5963\n\t\t\t// Modern browsers can apply jQuery collections as arrays, but oldIE needs a .get()                               // 5964\n\t\t\tpush.apply( ret, elems.get() );                                                                                   // 5965\n\t\t}                                                                                                                  // 5966\n                                                                                                                     // 5967\n\t\treturn this.pushStack( ret );                                                                                      // 5968\n\t};                                                                                                                  // 5969\n});                                                                                                                  // 5970\n                                                                                                                     // 5971\n                                                                                                                     // 5972\nvar iframe,                                                                                                          // 5973\n\telemdisplay = {};                                                                                                   // 5974\n                                                                                                                     // 5975\n/**                                                                                                                  // 5976\n * Retrieve the actual display of a element                                                                          // 5977\n * @param {String} name nodeName of the element                                                                      // 5978\n * @param {Object} doc Document object                                                                               // 5979\n */                                                                                                                  // 5980\n// Called only from within defaultDisplay                                                                            // 5981\nfunction actualDisplay( name, doc ) {                                                                                // 5982\n\tvar elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),                                                // 5983\n                                                                                                                     // 5984\n\t\t// getDefaultComputedStyle might be reliably used only on attached element                                         // 5985\n\t\tdisplay = window.getDefaultComputedStyle ?                                                                         // 5986\n                                                                                                                     // 5987\n\t\t\t// Use of this method is a temporary fix (more like optmization) until something better comes along,              // 5988\n\t\t\t// since it was removed from specification and supported only in FF                                               // 5989\n\t\t\twindow.getDefaultComputedStyle( elem[ 0 ] ).display : jQuery.css( elem[ 0 ], \"display\" );                         // 5990\n                                                                                                                     // 5991\n\t// We don't have any data stored on the element,                                                                    // 5992\n\t// so use \"detach\" method as fast way to get rid of the element                                                     // 5993\n\telem.detach();                                                                                                      // 5994\n                                                                                                                     // 5995\n\treturn display;                                                                                                     // 5996\n}                                                                                                                    // 5997\n                                                                                                                     // 5998\n/**                                                                                                                  // 5999\n * Try to determine the default display value of an element                                                          // 6000\n * @param {String} nodeName                                                                                          // 6001\n */                                                                                                                  // 6002\nfunction defaultDisplay( nodeName ) {                                                                                // 6003\n\tvar doc = document,                                                                                                 // 6004\n\t\tdisplay = elemdisplay[ nodeName ];                                                                                 // 6005\n                                                                                                                     // 6006\n\tif ( !display ) {                                                                                                   // 6007\n\t\tdisplay = actualDisplay( nodeName, doc );                                                                          // 6008\n                                                                                                                     // 6009\n\t\t// If the simple way fails, read from inside an iframe                                                             // 6010\n\t\tif ( display === \"none\" || !display ) {                                                                            // 6011\n                                                                                                                     // 6012\n\t\t\t// Use the already-created iframe if possible                                                                     // 6013\n\t\t\tiframe = (iframe || jQuery( \"<iframe frameborder='0' width='0' height='0'/>\" )).appendTo( doc.documentElement );  // 6014\n                                                                                                                     // 6015\n\t\t\t// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse                                    // 6016\n\t\t\tdoc = ( iframe[ 0 ].contentWindow || iframe[ 0 ].contentDocument ).document;                                      // 6017\n                                                                                                                     // 6018\n\t\t\t// Support: IE                                                                                                    // 6019\n\t\t\tdoc.write();                                                                                                      // 6020\n\t\t\tdoc.close();                                                                                                      // 6021\n                                                                                                                     // 6022\n\t\t\tdisplay = actualDisplay( nodeName, doc );                                                                         // 6023\n\t\t\tiframe.detach();                                                                                                  // 6024\n\t\t}                                                                                                                  // 6025\n                                                                                                                     // 6026\n\t\t// Store the correct default display                                                                               // 6027\n\t\telemdisplay[ nodeName ] = display;                                                                                 // 6028\n\t}                                                                                                                   // 6029\n                                                                                                                     // 6030\n\treturn display;                                                                                                     // 6031\n}                                                                                                                    // 6032\n                                                                                                                     // 6033\n                                                                                                                     // 6034\n(function() {                                                                                                        // 6035\n\tvar a, shrinkWrapBlocksVal,                                                                                         // 6036\n\t\tdiv = document.createElement( \"div\" ),                                                                             // 6037\n\t\tdivReset =                                                                                                         // 6038\n\t\t\t\"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;\" +                            // 6039\n\t\t\t\"display:block;padding:0;margin:0;border:0\";                                                                      // 6040\n                                                                                                                     // 6041\n\t// Setup                                                                                                            // 6042\n\tdiv.innerHTML = \"  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>\";                               // 6043\n\ta = div.getElementsByTagName( \"a\" )[ 0 ];                                                                           // 6044\n                                                                                                                     // 6045\n\ta.style.cssText = \"float:left;opacity:.5\";                                                                          // 6046\n                                                                                                                     // 6047\n\t// Make sure that element opacity exists                                                                            // 6048\n\t// (IE uses filter instead)                                                                                         // 6049\n\t// Use a regex to work around a WebKit issue. See #5145                                                             // 6050\n\tsupport.opacity = /^0.5/.test( a.style.opacity );                                                                   // 6051\n                                                                                                                     // 6052\n\t// Verify style float existence                                                                                     // 6053\n\t// (IE uses styleFloat instead of cssFloat)                                                                         // 6054\n\tsupport.cssFloat = !!a.style.cssFloat;                                                                              // 6055\n                                                                                                                     // 6056\n\tdiv.style.backgroundClip = \"content-box\";                                                                           // 6057\n\tdiv.cloneNode( true ).style.backgroundClip = \"\";                                                                    // 6058\n\tsupport.clearCloneStyle = div.style.backgroundClip === \"content-box\";                                               // 6059\n                                                                                                                     // 6060\n\t// Null elements to avoid leaks in IE.                                                                              // 6061\n\ta = div = null;                                                                                                     // 6062\n                                                                                                                     // 6063\n\tsupport.shrinkWrapBlocks = function() {                                                                             // 6064\n\t\tvar body, container, div, containerStyles;                                                                         // 6065\n                                                                                                                     // 6066\n\t\tif ( shrinkWrapBlocksVal == null ) {                                                                               // 6067\n\t\t\tbody = document.getElementsByTagName( \"body\" )[ 0 ];                                                              // 6068\n\t\t\tif ( !body ) {                                                                                                    // 6069\n\t\t\t\t// Test fired too early or in an unsupported environment, exit.                                                  // 6070\n\t\t\t\treturn;                                                                                                          // 6071\n\t\t\t}                                                                                                                 // 6072\n                                                                                                                     // 6073\n\t\t\tcontainerStyles = \"border:0;width:0;height:0;position:absolute;top:0;left:-9999px\";                               // 6074\n\t\t\tcontainer = document.createElement( \"div\" );                                                                      // 6075\n\t\t\tdiv = document.createElement( \"div\" );                                                                            // 6076\n                                                                                                                     // 6077\n\t\t\tbody.appendChild( container ).appendChild( div );                                                                 // 6078\n                                                                                                                     // 6079\n\t\t\t// Will be changed later if needed.                                                                               // 6080\n\t\t\tshrinkWrapBlocksVal = false;                                                                                      // 6081\n                                                                                                                     // 6082\n\t\t\tif ( typeof div.style.zoom !== strundefined ) {                                                                   // 6083\n\t\t\t\t// Support: IE6                                                                                                  // 6084\n\t\t\t\t// Check if elements with layout shrink-wrap their children                                                      // 6085\n\t\t\t\tdiv.style.cssText = divReset + \";width:1px;padding:1px;zoom:1\";                                                  // 6086\n\t\t\t\tdiv.innerHTML = \"<div></div>\";                                                                                   // 6087\n\t\t\t\tdiv.firstChild.style.width = \"5px\";                                                                              // 6088\n\t\t\t\tshrinkWrapBlocksVal = div.offsetWidth !== 3;                                                                     // 6089\n\t\t\t}                                                                                                                 // 6090\n                                                                                                                     // 6091\n\t\t\tbody.removeChild( container );                                                                                    // 6092\n                                                                                                                     // 6093\n\t\t\t// Null elements to avoid leaks in IE.                                                                            // 6094\n\t\t\tbody = container = div = null;                                                                                    // 6095\n\t\t}                                                                                                                  // 6096\n                                                                                                                     // 6097\n\t\treturn shrinkWrapBlocksVal;                                                                                        // 6098\n\t};                                                                                                                  // 6099\n                                                                                                                     // 6100\n})();                                                                                                                // 6101\nvar rmargin = (/^margin/);                                                                                           // 6102\n                                                                                                                     // 6103\nvar rnumnonpx = new RegExp( \"^(\" + pnum + \")(?!px)[a-z%]+$\", \"i\" );                                                  // 6104\n                                                                                                                     // 6105\n                                                                                                                     // 6106\n                                                                                                                     // 6107\nvar getStyles, curCSS,                                                                                               // 6108\n\trposition = /^(top|right|bottom|left)$/;                                                                            // 6109\n                                                                                                                     // 6110\nif ( window.getComputedStyle ) {                                                                                     // 6111\n\tgetStyles = function( elem ) {                                                                                      // 6112\n\t\treturn elem.ownerDocument.defaultView.getComputedStyle( elem, null );                                              // 6113\n\t};                                                                                                                  // 6114\n                                                                                                                     // 6115\n\tcurCSS = function( elem, name, computed ) {                                                                         // 6116\n\t\tvar width, minWidth, maxWidth, ret,                                                                                // 6117\n\t\t\tstyle = elem.style;                                                                                               // 6118\n                                                                                                                     // 6119\n\t\tcomputed = computed || getStyles( elem );                                                                          // 6120\n                                                                                                                     // 6121\n\t\t// getPropertyValue is only needed for .css('filter') in IE9, see #12537                                           // 6122\n\t\tret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined;                                // 6123\n                                                                                                                     // 6124\n\t\tif ( computed ) {                                                                                                  // 6125\n                                                                                                                     // 6126\n\t\t\tif ( ret === \"\" && !jQuery.contains( elem.ownerDocument, elem ) ) {                                               // 6127\n\t\t\t\tret = jQuery.style( elem, name );                                                                                // 6128\n\t\t\t}                                                                                                                 // 6129\n                                                                                                                     // 6130\n\t\t\t// A tribute to the \"awesome hack by Dean Edwards\"                                                                // 6131\n\t\t\t// Chrome < 17 and Safari 5.0 uses \"computed value\" instead of \"used value\" for margin-right                      // 6132\n\t\t\t// Safari 5.1.7 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels   // 6133\n\t\t\t// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values                           // 6134\n\t\t\tif ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {                                                            // 6135\n                                                                                                                     // 6136\n\t\t\t\t// Remember the original values                                                                                  // 6137\n\t\t\t\twidth = style.width;                                                                                             // 6138\n\t\t\t\tminWidth = style.minWidth;                                                                                       // 6139\n\t\t\t\tmaxWidth = style.maxWidth;                                                                                       // 6140\n                                                                                                                     // 6141\n\t\t\t\t// Put in the new values to get a computed value out                                                             // 6142\n\t\t\t\tstyle.minWidth = style.maxWidth = style.width = ret;                                                             // 6143\n\t\t\t\tret = computed.width;                                                                                            // 6144\n                                                                                                                     // 6145\n\t\t\t\t// Revert the changed values                                                                                     // 6146\n\t\t\t\tstyle.width = width;                                                                                             // 6147\n\t\t\t\tstyle.minWidth = minWidth;                                                                                       // 6148\n\t\t\t\tstyle.maxWidth = maxWidth;                                                                                       // 6149\n\t\t\t}                                                                                                                 // 6150\n\t\t}                                                                                                                  // 6151\n                                                                                                                     // 6152\n\t\t// Support: IE                                                                                                     // 6153\n\t\t// IE returns zIndex value as an integer.                                                                          // 6154\n\t\treturn ret === undefined ?                                                                                         // 6155\n\t\t\tret :                                                                                                             // 6156\n\t\t\tret + \"\";                                                                                                         // 6157\n\t};                                                                                                                  // 6158\n} else if ( document.documentElement.currentStyle ) {                                                                // 6159\n\tgetStyles = function( elem ) {                                                                                      // 6160\n\t\treturn elem.currentStyle;                                                                                          // 6161\n\t};                                                                                                                  // 6162\n                                                                                                                     // 6163\n\tcurCSS = function( elem, name, computed ) {                                                                         // 6164\n\t\tvar left, rs, rsLeft, ret,                                                                                         // 6165\n\t\t\tstyle = elem.style;                                                                                               // 6166\n                                                                                                                     // 6167\n\t\tcomputed = computed || getStyles( elem );                                                                          // 6168\n\t\tret = computed ? computed[ name ] : undefined;                                                                     // 6169\n                                                                                                                     // 6170\n\t\t// Avoid setting ret to empty string here                                                                          // 6171\n\t\t// so we don't default to auto                                                                                     // 6172\n\t\tif ( ret == null && style && style[ name ] ) {                                                                     // 6173\n\t\t\tret = style[ name ];                                                                                              // 6174\n\t\t}                                                                                                                  // 6175\n                                                                                                                     // 6176\n\t\t// From the awesome hack by Dean Edwards                                                                           // 6177\n\t\t// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291                                                // 6178\n                                                                                                                     // 6179\n\t\t// If we're not dealing with a regular pixel number                                                                // 6180\n\t\t// but a number that has a weird ending, we need to convert it to pixels                                           // 6181\n\t\t// but not position css attributes, as those are proportional to the parent element instead                        // 6182\n\t\t// and we can't measure the parent instead because it might trigger a \"stacking dolls\" problem                     // 6183\n\t\tif ( rnumnonpx.test( ret ) && !rposition.test( name ) ) {                                                          // 6184\n                                                                                                                     // 6185\n\t\t\t// Remember the original values                                                                                   // 6186\n\t\t\tleft = style.left;                                                                                                // 6187\n\t\t\trs = elem.runtimeStyle;                                                                                           // 6188\n\t\t\trsLeft = rs && rs.left;                                                                                           // 6189\n                                                                                                                     // 6190\n\t\t\t// Put in the new values to get a computed value out                                                              // 6191\n\t\t\tif ( rsLeft ) {                                                                                                   // 6192\n\t\t\t\trs.left = elem.currentStyle.left;                                                                                // 6193\n\t\t\t}                                                                                                                 // 6194\n\t\t\tstyle.left = name === \"fontSize\" ? \"1em\" : ret;                                                                   // 6195\n\t\t\tret = style.pixelLeft + \"px\";                                                                                     // 6196\n                                                                                                                     // 6197\n\t\t\t// Revert the changed values                                                                                      // 6198\n\t\t\tstyle.left = left;                                                                                                // 6199\n\t\t\tif ( rsLeft ) {                                                                                                   // 6200\n\t\t\t\trs.left = rsLeft;                                                                                                // 6201\n\t\t\t}                                                                                                                 // 6202\n\t\t}                                                                                                                  // 6203\n                                                                                                                     // 6204\n\t\t// Support: IE                                                                                                     // 6205\n\t\t// IE returns zIndex value as an integer.                                                                          // 6206\n\t\treturn ret === undefined ?                                                                                         // 6207\n\t\t\tret :                                                                                                             // 6208\n\t\t\tret + \"\" || \"auto\";                                                                                               // 6209\n\t};                                                                                                                  // 6210\n}                                                                                                                    // 6211\n                                                                                                                     // 6212\n                                                                                                                     // 6213\n                                                                                                                     // 6214\n                                                                                                                     // 6215\nfunction addGetHookIf( conditionFn, hookFn ) {                                                                       // 6216\n\t// Define the hook, we'll check on the first run if it's really needed.                                             // 6217\n\treturn {                                                                                                            // 6218\n\t\tget: function() {                                                                                                  // 6219\n\t\t\tvar condition = conditionFn();                                                                                    // 6220\n                                                                                                                     // 6221\n\t\t\tif ( condition == null ) {                                                                                        // 6222\n\t\t\t\t// The test was not ready at this point; screw the hook this time                                                // 6223\n\t\t\t\t// but check again when needed next time.                                                                        // 6224\n\t\t\t\treturn;                                                                                                          // 6225\n\t\t\t}                                                                                                                 // 6226\n                                                                                                                     // 6227\n\t\t\tif ( condition ) {                                                                                                // 6228\n\t\t\t\t// Hook not needed (or it's not possible to use it due to missing dependency),                                   // 6229\n\t\t\t\t// remove it.                                                                                                    // 6230\n\t\t\t\t// Since there are no other hooks for marginRight, remove the whole object.                                      // 6231\n\t\t\t\tdelete this.get;                                                                                                 // 6232\n\t\t\t\treturn;                                                                                                          // 6233\n\t\t\t}                                                                                                                 // 6234\n                                                                                                                     // 6235\n\t\t\t// Hook needed; redefine it so that the support test is not executed again.                                       // 6236\n                                                                                                                     // 6237\n\t\t\treturn (this.get = hookFn).apply( this, arguments );                                                              // 6238\n\t\t}                                                                                                                  // 6239\n\t};                                                                                                                  // 6240\n}                                                                                                                    // 6241\n                                                                                                                     // 6242\n                                                                                                                     // 6243\n(function() {                                                                                                        // 6244\n\tvar a, reliableHiddenOffsetsVal, boxSizingVal, boxSizingReliableVal,                                                // 6245\n\t\tpixelPositionVal, reliableMarginRightVal,                                                                          // 6246\n\t\tdiv = document.createElement( \"div\" ),                                                                             // 6247\n\t\tcontainerStyles = \"border:0;width:0;height:0;position:absolute;top:0;left:-9999px\",                                // 6248\n\t\tdivReset =                                                                                                         // 6249\n\t\t\t\"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;\" +                            // 6250\n\t\t\t\"display:block;padding:0;margin:0;border:0\";                                                                      // 6251\n                                                                                                                     // 6252\n\t// Setup                                                                                                            // 6253\n\tdiv.innerHTML = \"  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>\";                               // 6254\n\ta = div.getElementsByTagName( \"a\" )[ 0 ];                                                                           // 6255\n                                                                                                                     // 6256\n\ta.style.cssText = \"float:left;opacity:.5\";                                                                          // 6257\n                                                                                                                     // 6258\n\t// Make sure that element opacity exists                                                                            // 6259\n\t// (IE uses filter instead)                                                                                         // 6260\n\t// Use a regex to work around a WebKit issue. See #5145                                                             // 6261\n\tsupport.opacity = /^0.5/.test( a.style.opacity );                                                                   // 6262\n                                                                                                                     // 6263\n\t// Verify style float existence                                                                                     // 6264\n\t// (IE uses styleFloat instead of cssFloat)                                                                         // 6265\n\tsupport.cssFloat = !!a.style.cssFloat;                                                                              // 6266\n                                                                                                                     // 6267\n\tdiv.style.backgroundClip = \"content-box\";                                                                           // 6268\n\tdiv.cloneNode( true ).style.backgroundClip = \"\";                                                                    // 6269\n\tsupport.clearCloneStyle = div.style.backgroundClip === \"content-box\";                                               // 6270\n                                                                                                                     // 6271\n\t// Null elements to avoid leaks in IE.                                                                              // 6272\n\ta = div = null;                                                                                                     // 6273\n                                                                                                                     // 6274\n\tjQuery.extend(support, {                                                                                            // 6275\n\t\treliableHiddenOffsets: function() {                                                                                // 6276\n\t\t\tif ( reliableHiddenOffsetsVal != null ) {                                                                         // 6277\n\t\t\t\treturn reliableHiddenOffsetsVal;                                                                                 // 6278\n\t\t\t}                                                                                                                 // 6279\n                                                                                                                     // 6280\n\t\t\tvar container, tds, isSupported,                                                                                  // 6281\n\t\t\t\tdiv = document.createElement( \"div\" ),                                                                           // 6282\n\t\t\t\tbody = document.getElementsByTagName( \"body\" )[ 0 ];                                                             // 6283\n                                                                                                                     // 6284\n\t\t\tif ( !body ) {                                                                                                    // 6285\n\t\t\t\t// Return for frameset docs that don't have a body                                                               // 6286\n\t\t\t\treturn;                                                                                                          // 6287\n\t\t\t}                                                                                                                 // 6288\n                                                                                                                     // 6289\n\t\t\t// Setup                                                                                                          // 6290\n\t\t\tdiv.setAttribute( \"className\", \"t\" );                                                                             // 6291\n\t\t\tdiv.innerHTML = \"  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>\";                             // 6292\n                                                                                                                     // 6293\n\t\t\tcontainer = document.createElement( \"div\" );                                                                      // 6294\n\t\t\tcontainer.style.cssText = containerStyles;                                                                        // 6295\n                                                                                                                     // 6296\n\t\t\tbody.appendChild( container ).appendChild( div );                                                                 // 6297\n                                                                                                                     // 6298\n\t\t\t// Support: IE8                                                                                                   // 6299\n\t\t\t// Check if table cells still have offsetWidth/Height when they are set                                           // 6300\n\t\t\t// to display:none and there are still other visible table cells in a                                             // 6301\n\t\t\t// table row; if so, offsetWidth/Height are not reliable for use when                                             // 6302\n\t\t\t// determining if an element has been hidden directly using                                                       // 6303\n\t\t\t// display:none (it is still safe to use offsets if a parent element is                                           // 6304\n\t\t\t// hidden; don safety goggles and see bug #4512 for more information).                                            // 6305\n\t\t\tdiv.innerHTML = \"<table><tr><td></td><td>t</td></tr></table>\";                                                    // 6306\n\t\t\ttds = div.getElementsByTagName( \"td\" );                                                                           // 6307\n\t\t\ttds[ 0 ].style.cssText = \"padding:0;margin:0;border:0;display:none\";                                              // 6308\n\t\t\tisSupported = ( tds[ 0 ].offsetHeight === 0 );                                                                    // 6309\n                                                                                                                     // 6310\n\t\t\ttds[ 0 ].style.display = \"\";                                                                                      // 6311\n\t\t\ttds[ 1 ].style.display = \"none\";                                                                                  // 6312\n                                                                                                                     // 6313\n\t\t\t// Support: IE8                                                                                                   // 6314\n\t\t\t// Check if empty table cells still have offsetWidth/Height                                                       // 6315\n\t\t\treliableHiddenOffsetsVal = isSupported && ( tds[ 0 ].offsetHeight === 0 );                                        // 6316\n                                                                                                                     // 6317\n\t\t\tbody.removeChild( container );                                                                                    // 6318\n                                                                                                                     // 6319\n\t\t\t// Null elements to avoid leaks in IE.                                                                            // 6320\n\t\t\tdiv = body = null;                                                                                                // 6321\n                                                                                                                     // 6322\n\t\t\treturn reliableHiddenOffsetsVal;                                                                                  // 6323\n\t\t},                                                                                                                 // 6324\n                                                                                                                     // 6325\n\t\tboxSizing: function() {                                                                                            // 6326\n\t\t\tif ( boxSizingVal == null ) {                                                                                     // 6327\n\t\t\t\tcomputeStyleTests();                                                                                             // 6328\n\t\t\t}                                                                                                                 // 6329\n\t\t\treturn boxSizingVal;                                                                                              // 6330\n\t\t},                                                                                                                 // 6331\n                                                                                                                     // 6332\n\t\tboxSizingReliable: function() {                                                                                    // 6333\n\t\t\tif ( boxSizingReliableVal == null ) {                                                                             // 6334\n\t\t\t\tcomputeStyleTests();                                                                                             // 6335\n\t\t\t}                                                                                                                 // 6336\n\t\t\treturn boxSizingReliableVal;                                                                                      // 6337\n\t\t},                                                                                                                 // 6338\n                                                                                                                     // 6339\n\t\tpixelPosition: function() {                                                                                        // 6340\n\t\t\tif ( pixelPositionVal == null ) {                                                                                 // 6341\n\t\t\t\tcomputeStyleTests();                                                                                             // 6342\n\t\t\t}                                                                                                                 // 6343\n\t\t\treturn pixelPositionVal;                                                                                          // 6344\n\t\t},                                                                                                                 // 6345\n                                                                                                                     // 6346\n\t\treliableMarginRight: function() {                                                                                  // 6347\n\t\t\tvar body, container, div, marginDiv;                                                                              // 6348\n                                                                                                                     // 6349\n\t\t\t// Use window.getComputedStyle because jsdom on node.js will break without it.                                    // 6350\n\t\t\tif ( reliableMarginRightVal == null && window.getComputedStyle ) {                                                // 6351\n\t\t\t\tbody = document.getElementsByTagName( \"body\" )[ 0 ];                                                             // 6352\n\t\t\t\tif ( !body ) {                                                                                                   // 6353\n\t\t\t\t\t// Test fired too early or in an unsupported environment, exit.                                                 // 6354\n\t\t\t\t\treturn;                                                                                                         // 6355\n\t\t\t\t}                                                                                                                // 6356\n                                                                                                                     // 6357\n\t\t\t\tcontainer = document.createElement( \"div\" );                                                                     // 6358\n\t\t\t\tdiv = document.createElement( \"div\" );                                                                           // 6359\n\t\t\t\tcontainer.style.cssText = containerStyles;                                                                       // 6360\n                                                                                                                     // 6361\n\t\t\t\tbody.appendChild( container ).appendChild( div );                                                                // 6362\n                                                                                                                     // 6363\n\t\t\t\t// Check if div with explicit width and no margin-right incorrectly                                              // 6364\n\t\t\t\t// gets computed margin-right based on width of container. (#3333)                                               // 6365\n\t\t\t\t// Fails in WebKit before Feb 2011 nightlies                                                                     // 6366\n\t\t\t\t// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right                                      // 6367\n\t\t\t\tmarginDiv = div.appendChild( document.createElement( \"div\" ) );                                                  // 6368\n\t\t\t\tmarginDiv.style.cssText = div.style.cssText = divReset;                                                          // 6369\n\t\t\t\tmarginDiv.style.marginRight = marginDiv.style.width = \"0\";                                                       // 6370\n\t\t\t\tdiv.style.width = \"1px\";                                                                                         // 6371\n                                                                                                                     // 6372\n\t\t\t\treliableMarginRightVal =                                                                                         // 6373\n\t\t\t\t\t!parseFloat( ( window.getComputedStyle( marginDiv, null ) || {} ).marginRight );                                // 6374\n                                                                                                                     // 6375\n\t\t\t\tbody.removeChild( container );                                                                                   // 6376\n\t\t\t}                                                                                                                 // 6377\n                                                                                                                     // 6378\n\t\t\treturn reliableMarginRightVal;                                                                                    // 6379\n\t\t}                                                                                                                  // 6380\n\t});                                                                                                                 // 6381\n                                                                                                                     // 6382\n\tfunction computeStyleTests() {                                                                                      // 6383\n\t\tvar container, div,                                                                                                // 6384\n\t\t\tbody = document.getElementsByTagName( \"body\" )[ 0 ];                                                              // 6385\n                                                                                                                     // 6386\n\t\tif ( !body ) {                                                                                                     // 6387\n\t\t\t// Test fired too early or in an unsupported environment, exit.                                                   // 6388\n\t\t\treturn;                                                                                                           // 6389\n\t\t}                                                                                                                  // 6390\n                                                                                                                     // 6391\n\t\tcontainer = document.createElement( \"div\" );                                                                       // 6392\n\t\tdiv = document.createElement( \"div\" );                                                                             // 6393\n\t\tcontainer.style.cssText = containerStyles;                                                                         // 6394\n                                                                                                                     // 6395\n\t\tbody.appendChild( container ).appendChild( div );                                                                  // 6396\n                                                                                                                     // 6397\n\t\tdiv.style.cssText =                                                                                                // 6398\n\t\t\t\"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;\" +                               // 6399\n\t\t\t\t\"position:absolute;display:block;padding:1px;border:1px;width:4px;\" +                                            // 6400\n\t\t\t\t\"margin-top:1%;top:1%\";                                                                                          // 6401\n                                                                                                                     // 6402\n\t\t// Workaround failing boxSizing test due to offsetWidth returning wrong value                                      // 6403\n\t\t// with some non-1 values of body zoom, ticket #13543                                                              // 6404\n\t\tjQuery.swap( body, body.style.zoom != null ? { zoom: 1 } : {}, function() {                                        // 6405\n\t\t\tboxSizingVal = div.offsetWidth === 4;                                                                             // 6406\n\t\t});                                                                                                                // 6407\n                                                                                                                     // 6408\n\t\t// Will be changed later if needed.                                                                                // 6409\n\t\tboxSizingReliableVal = true;                                                                                       // 6410\n\t\tpixelPositionVal = false;                                                                                          // 6411\n\t\treliableMarginRightVal = true;                                                                                     // 6412\n                                                                                                                     // 6413\n\t\t// Use window.getComputedStyle because jsdom on node.js will break without it.                                     // 6414\n\t\tif ( window.getComputedStyle ) {                                                                                   // 6415\n\t\t\tpixelPositionVal = ( window.getComputedStyle( div, null ) || {} ).top !== \"1%\";                                   // 6416\n\t\t\tboxSizingReliableVal =                                                                                            // 6417\n\t\t\t\t( window.getComputedStyle( div, null ) || { width: \"4px\" } ).width === \"4px\";                                    // 6418\n\t\t}                                                                                                                  // 6419\n                                                                                                                     // 6420\n\t\tbody.removeChild( container );                                                                                     // 6421\n                                                                                                                     // 6422\n\t\t// Null elements to avoid leaks in IE.                                                                             // 6423\n\t\tdiv = body = null;                                                                                                 // 6424\n\t}                                                                                                                   // 6425\n                                                                                                                     // 6426\n})();                                                                                                                // 6427\n                                                                                                                     // 6428\n                                                                                                                     // 6429\n// A method for quickly swapping in/out CSS properties to get correct calculations.                                  // 6430\njQuery.swap = function( elem, options, callback, args ) {                                                            // 6431\n\tvar ret, name,                                                                                                      // 6432\n\t\told = {};                                                                                                          // 6433\n                                                                                                                     // 6434\n\t// Remember the old values, and insert the new ones                                                                 // 6435\n\tfor ( name in options ) {                                                                                           // 6436\n\t\told[ name ] = elem.style[ name ];                                                                                  // 6437\n\t\telem.style[ name ] = options[ name ];                                                                              // 6438\n\t}                                                                                                                   // 6439\n                                                                                                                     // 6440\n\tret = callback.apply( elem, args || [] );                                                                           // 6441\n                                                                                                                     // 6442\n\t// Revert the old values                                                                                            // 6443\n\tfor ( name in options ) {                                                                                           // 6444\n\t\telem.style[ name ] = old[ name ];                                                                                  // 6445\n\t}                                                                                                                   // 6446\n                                                                                                                     // 6447\n\treturn ret;                                                                                                         // 6448\n};                                                                                                                   // 6449\n                                                                                                                     // 6450\n                                                                                                                     // 6451\nvar                                                                                                                  // 6452\n\t\tralpha = /alpha\\([^)]*\\)/i,                                                                                        // 6453\n\tropacity = /opacity\\s*=\\s*([^)]*)/,                                                                                 // 6454\n                                                                                                                     // 6455\n\t// swappable if display is none or starts with table except \"table\", \"table-cell\", or \"table-caption\"               // 6456\n\t// see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display                                // 6457\n\trdisplayswap = /^(none|table(?!-c[ea]).+)/,                                                                         // 6458\n\trnumsplit = new RegExp( \"^(\" + pnum + \")(.*)$\", \"i\" ),                                                              // 6459\n\trrelNum = new RegExp( \"^([+-])=(\" + pnum + \")\", \"i\" ),                                                              // 6460\n                                                                                                                     // 6461\n\tcssShow = { position: \"absolute\", visibility: \"hidden\", display: \"block\" },                                         // 6462\n\tcssNormalTransform = {                                                                                              // 6463\n\t\tletterSpacing: 0,                                                                                                  // 6464\n\t\tfontWeight: 400                                                                                                    // 6465\n\t},                                                                                                                  // 6466\n                                                                                                                     // 6467\n\tcssPrefixes = [ \"Webkit\", \"O\", \"Moz\", \"ms\" ];                                                                       // 6468\n                                                                                                                     // 6469\n                                                                                                                     // 6470\n// return a css property mapped to a potentially vendor prefixed property                                            // 6471\nfunction vendorPropName( style, name ) {                                                                             // 6472\n                                                                                                                     // 6473\n\t// shortcut for names that are not vendor prefixed                                                                  // 6474\n\tif ( name in style ) {                                                                                              // 6475\n\t\treturn name;                                                                                                       // 6476\n\t}                                                                                                                   // 6477\n                                                                                                                     // 6478\n\t// check for vendor prefixed names                                                                                  // 6479\n\tvar capName = name.charAt(0).toUpperCase() + name.slice(1),                                                         // 6480\n\t\torigName = name,                                                                                                   // 6481\n\t\ti = cssPrefixes.length;                                                                                            // 6482\n                                                                                                                     // 6483\n\twhile ( i-- ) {                                                                                                     // 6484\n\t\tname = cssPrefixes[ i ] + capName;                                                                                 // 6485\n\t\tif ( name in style ) {                                                                                             // 6486\n\t\t\treturn name;                                                                                                      // 6487\n\t\t}                                                                                                                  // 6488\n\t}                                                                                                                   // 6489\n                                                                                                                     // 6490\n\treturn origName;                                                                                                    // 6491\n}                                                                                                                    // 6492\n                                                                                                                     // 6493\nfunction showHide( elements, show ) {                                                                                // 6494\n\tvar display, elem, hidden,                                                                                          // 6495\n\t\tvalues = [],                                                                                                       // 6496\n\t\tindex = 0,                                                                                                         // 6497\n\t\tlength = elements.length;                                                                                          // 6498\n                                                                                                                     // 6499\n\tfor ( ; index < length; index++ ) {                                                                                 // 6500\n\t\telem = elements[ index ];                                                                                          // 6501\n\t\tif ( !elem.style ) {                                                                                               // 6502\n\t\t\tcontinue;                                                                                                         // 6503\n\t\t}                                                                                                                  // 6504\n                                                                                                                     // 6505\n\t\tvalues[ index ] = jQuery._data( elem, \"olddisplay\" );                                                              // 6506\n\t\tdisplay = elem.style.display;                                                                                      // 6507\n\t\tif ( show ) {                                                                                                      // 6508\n\t\t\t// Reset the inline display of this element to learn if it is                                                     // 6509\n\t\t\t// being hidden by cascaded rules or not                                                                          // 6510\n\t\t\tif ( !values[ index ] && display === \"none\" ) {                                                                   // 6511\n\t\t\t\telem.style.display = \"\";                                                                                         // 6512\n\t\t\t}                                                                                                                 // 6513\n                                                                                                                     // 6514\n\t\t\t// Set elements which have been overridden with display: none                                                     // 6515\n\t\t\t// in a stylesheet to whatever the default browser style is                                                       // 6516\n\t\t\t// for such an element                                                                                            // 6517\n\t\t\tif ( elem.style.display === \"\" && isHidden( elem ) ) {                                                            // 6518\n\t\t\t\tvalues[ index ] = jQuery._data( elem, \"olddisplay\", defaultDisplay(elem.nodeName) );                             // 6519\n\t\t\t}                                                                                                                 // 6520\n\t\t} else {                                                                                                           // 6521\n                                                                                                                     // 6522\n\t\t\tif ( !values[ index ] ) {                                                                                         // 6523\n\t\t\t\thidden = isHidden( elem );                                                                                       // 6524\n                                                                                                                     // 6525\n\t\t\t\tif ( display && display !== \"none\" || !hidden ) {                                                                // 6526\n\t\t\t\t\tjQuery._data( elem, \"olddisplay\", hidden ? display : jQuery.css( elem, \"display\" ) );                           // 6527\n\t\t\t\t}                                                                                                                // 6528\n\t\t\t}                                                                                                                 // 6529\n\t\t}                                                                                                                  // 6530\n\t}                                                                                                                   // 6531\n                                                                                                                     // 6532\n\t// Set the display of most of the elements in a second loop                                                         // 6533\n\t// to avoid the constant reflow                                                                                     // 6534\n\tfor ( index = 0; index < length; index++ ) {                                                                        // 6535\n\t\telem = elements[ index ];                                                                                          // 6536\n\t\tif ( !elem.style ) {                                                                                               // 6537\n\t\t\tcontinue;                                                                                                         // 6538\n\t\t}                                                                                                                  // 6539\n\t\tif ( !show || elem.style.display === \"none\" || elem.style.display === \"\" ) {                                       // 6540\n\t\t\telem.style.display = show ? values[ index ] || \"\" : \"none\";                                                       // 6541\n\t\t}                                                                                                                  // 6542\n\t}                                                                                                                   // 6543\n                                                                                                                     // 6544\n\treturn elements;                                                                                                    // 6545\n}                                                                                                                    // 6546\n                                                                                                                     // 6547\nfunction setPositiveNumber( elem, value, subtract ) {                                                                // 6548\n\tvar matches = rnumsplit.exec( value );                                                                              // 6549\n\treturn matches ?                                                                                                    // 6550\n\t\t// Guard against undefined \"subtract\", e.g., when used as in cssHooks                                              // 6551\n\t\tMath.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || \"px\" ) :                                       // 6552\n\t\tvalue;                                                                                                             // 6553\n}                                                                                                                    // 6554\n                                                                                                                     // 6555\nfunction augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {                                            // 6556\n\tvar i = extra === ( isBorderBox ? \"border\" : \"content\" ) ?                                                          // 6557\n\t\t// If we already have the right measurement, avoid augmentation                                                    // 6558\n\t\t4 :                                                                                                                // 6559\n\t\t// Otherwise initialize for horizontal or vertical properties                                                      // 6560\n\t\tname === \"width\" ? 1 : 0,                                                                                          // 6561\n                                                                                                                     // 6562\n\t\tval = 0;                                                                                                           // 6563\n                                                                                                                     // 6564\n\tfor ( ; i < 4; i += 2 ) {                                                                                           // 6565\n\t\t// both box models exclude margin, so add it if we want it                                                         // 6566\n\t\tif ( extra === \"margin\" ) {                                                                                        // 6567\n\t\t\tval += jQuery.css( elem, extra + cssExpand[ i ], true, styles );                                                  // 6568\n\t\t}                                                                                                                  // 6569\n                                                                                                                     // 6570\n\t\tif ( isBorderBox ) {                                                                                               // 6571\n\t\t\t// border-box includes padding, so remove it if we want content                                                   // 6572\n\t\t\tif ( extra === \"content\" ) {                                                                                      // 6573\n\t\t\t\tval -= jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );                                             // 6574\n\t\t\t}                                                                                                                 // 6575\n                                                                                                                     // 6576\n\t\t\t// at this point, extra isn't border nor margin, so remove border                                                 // 6577\n\t\t\tif ( extra !== \"margin\" ) {                                                                                       // 6578\n\t\t\t\tval -= jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );                                    // 6579\n\t\t\t}                                                                                                                 // 6580\n\t\t} else {                                                                                                           // 6581\n\t\t\t// at this point, extra isn't content, so add padding                                                             // 6582\n\t\t\tval += jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );                                              // 6583\n                                                                                                                     // 6584\n\t\t\t// at this point, extra isn't content nor padding, so add border                                                  // 6585\n\t\t\tif ( extra !== \"padding\" ) {                                                                                      // 6586\n\t\t\t\tval += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );                                    // 6587\n\t\t\t}                                                                                                                 // 6588\n\t\t}                                                                                                                  // 6589\n\t}                                                                                                                   // 6590\n                                                                                                                     // 6591\n\treturn val;                                                                                                         // 6592\n}                                                                                                                    // 6593\n                                                                                                                     // 6594\nfunction getWidthOrHeight( elem, name, extra ) {                                                                     // 6595\n                                                                                                                     // 6596\n\t// Start with offset property, which is equivalent to the border-box value                                          // 6597\n\tvar valueIsBorderBox = true,                                                                                        // 6598\n\t\tval = name === \"width\" ? elem.offsetWidth : elem.offsetHeight,                                                     // 6599\n\t\tstyles = getStyles( elem ),                                                                                        // 6600\n\t\tisBorderBox = support.boxSizing() && jQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\";              // 6601\n                                                                                                                     // 6602\n\t// some non-html elements return undefined for offsetWidth, so check for null/undefined                             // 6603\n\t// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285                                                        // 6604\n\t// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668                                                     // 6605\n\tif ( val <= 0 || val == null ) {                                                                                    // 6606\n\t\t// Fall back to computed then uncomputed css if necessary                                                          // 6607\n\t\tval = curCSS( elem, name, styles );                                                                                // 6608\n\t\tif ( val < 0 || val == null ) {                                                                                    // 6609\n\t\t\tval = elem.style[ name ];                                                                                         // 6610\n\t\t}                                                                                                                  // 6611\n                                                                                                                     // 6612\n\t\t// Computed unit is not pixels. Stop here and return.                                                              // 6613\n\t\tif ( rnumnonpx.test(val) ) {                                                                                       // 6614\n\t\t\treturn val;                                                                                                       // 6615\n\t\t}                                                                                                                  // 6616\n                                                                                                                     // 6617\n\t\t// we need the check for style in case a browser which returns unreliable values                                   // 6618\n\t\t// for getComputedStyle silently falls back to the reliable elem.style                                             // 6619\n\t\tvalueIsBorderBox = isBorderBox && ( support.boxSizingReliable() || val === elem.style[ name ] );                   // 6620\n                                                                                                                     // 6621\n\t\t// Normalize \"\", auto, and prepare for extra                                                                       // 6622\n\t\tval = parseFloat( val ) || 0;                                                                                      // 6623\n\t}                                                                                                                   // 6624\n                                                                                                                     // 6625\n\t// use the active box-sizing model to add/subtract irrelevant styles                                                // 6626\n\treturn ( val +                                                                                                      // 6627\n\t\taugmentWidthOrHeight(                                                                                              // 6628\n\t\t\telem,                                                                                                             // 6629\n\t\t\tname,                                                                                                             // 6630\n\t\t\textra || ( isBorderBox ? \"border\" : \"content\" ),                                                                  // 6631\n\t\t\tvalueIsBorderBox,                                                                                                 // 6632\n\t\t\tstyles                                                                                                            // 6633\n\t\t)                                                                                                                  // 6634\n\t) + \"px\";                                                                                                           // 6635\n}                                                                                                                    // 6636\n                                                                                                                     // 6637\njQuery.extend({                                                                                                      // 6638\n\t// Add in style property hooks for overriding the default                                                           // 6639\n\t// behavior of getting and setting a style property                                                                 // 6640\n\tcssHooks: {                                                                                                         // 6641\n\t\topacity: {                                                                                                         // 6642\n\t\t\tget: function( elem, computed ) {                                                                                 // 6643\n\t\t\t\tif ( computed ) {                                                                                                // 6644\n\t\t\t\t\t// We should always get a number back from opacity                                                              // 6645\n\t\t\t\t\tvar ret = curCSS( elem, \"opacity\" );                                                                            // 6646\n\t\t\t\t\treturn ret === \"\" ? \"1\" : ret;                                                                                  // 6647\n\t\t\t\t}                                                                                                                // 6648\n\t\t\t}                                                                                                                 // 6649\n\t\t}                                                                                                                  // 6650\n\t},                                                                                                                  // 6651\n                                                                                                                     // 6652\n\t// Don't automatically add \"px\" to these possibly-unitless properties                                               // 6653\n\tcssNumber: {                                                                                                        // 6654\n\t\t\"columnCount\": true,                                                                                               // 6655\n\t\t\"fillOpacity\": true,                                                                                               // 6656\n\t\t\"fontWeight\": true,                                                                                                // 6657\n\t\t\"lineHeight\": true,                                                                                                // 6658\n\t\t\"opacity\": true,                                                                                                   // 6659\n\t\t\"order\": true,                                                                                                     // 6660\n\t\t\"orphans\": true,                                                                                                   // 6661\n\t\t\"widows\": true,                                                                                                    // 6662\n\t\t\"zIndex\": true,                                                                                                    // 6663\n\t\t\"zoom\": true                                                                                                       // 6664\n\t},                                                                                                                  // 6665\n                                                                                                                     // 6666\n\t// Add in properties whose names you wish to fix before                                                             // 6667\n\t// setting or getting the value                                                                                     // 6668\n\tcssProps: {                                                                                                         // 6669\n\t\t// normalize float css property                                                                                    // 6670\n\t\t\"float\": support.cssFloat ? \"cssFloat\" : \"styleFloat\"                                                              // 6671\n\t},                                                                                                                  // 6672\n                                                                                                                     // 6673\n\t// Get and set the style property on a DOM Node                                                                     // 6674\n\tstyle: function( elem, name, value, extra ) {                                                                       // 6675\n\t\t// Don't set styles on text and comment nodes                                                                      // 6676\n\t\tif ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {                                        // 6677\n\t\t\treturn;                                                                                                           // 6678\n\t\t}                                                                                                                  // 6679\n                                                                                                                     // 6680\n\t\t// Make sure that we're working with the right name                                                                // 6681\n\t\tvar ret, type, hooks,                                                                                              // 6682\n\t\t\torigName = jQuery.camelCase( name ),                                                                              // 6683\n\t\t\tstyle = elem.style;                                                                                               // 6684\n                                                                                                                     // 6685\n\t\tname = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );         // 6686\n                                                                                                                     // 6687\n\t\t// gets hook for the prefixed version                                                                              // 6688\n\t\t// followed by the unprefixed version                                                                              // 6689\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];                                                    // 6690\n                                                                                                                     // 6691\n\t\t// Check if we're setting a value                                                                                  // 6692\n\t\tif ( value !== undefined ) {                                                                                       // 6693\n\t\t\ttype = typeof value;                                                                                              // 6694\n                                                                                                                     // 6695\n\t\t\t// convert relative number strings (+= or -=) to relative numbers. #7345                                          // 6696\n\t\t\tif ( type === \"string\" && (ret = rrelNum.exec( value )) ) {                                                       // 6697\n\t\t\t\tvalue = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );                                        // 6698\n\t\t\t\t// Fixes bug #9237                                                                                               // 6699\n\t\t\t\ttype = \"number\";                                                                                                 // 6700\n\t\t\t}                                                                                                                 // 6701\n                                                                                                                     // 6702\n\t\t\t// Make sure that null and NaN values aren't set. See: #7116                                                      // 6703\n\t\t\tif ( value == null || value !== value ) {                                                                         // 6704\n\t\t\t\treturn;                                                                                                          // 6705\n\t\t\t}                                                                                                                 // 6706\n                                                                                                                     // 6707\n\t\t\t// If a number was passed in, add 'px' to the (except for certain CSS properties)                                 // 6708\n\t\t\tif ( type === \"number\" && !jQuery.cssNumber[ origName ] ) {                                                       // 6709\n\t\t\t\tvalue += \"px\";                                                                                                   // 6710\n\t\t\t}                                                                                                                 // 6711\n                                                                                                                     // 6712\n\t\t\t// Fixes #8908, it can be done more correctly by specifing setters in cssHooks,                                   // 6713\n\t\t\t// but it would mean to define eight (for every problematic property) identical functions                         // 6714\n\t\t\tif ( !support.clearCloneStyle && value === \"\" && name.indexOf(\"background\") === 0 ) {                             // 6715\n\t\t\t\tstyle[ name ] = \"inherit\";                                                                                       // 6716\n\t\t\t}                                                                                                                 // 6717\n                                                                                                                     // 6718\n\t\t\t// If a hook was provided, use that value, otherwise just set the specified value                                 // 6719\n\t\t\tif ( !hooks || !(\"set\" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {                   // 6720\n                                                                                                                     // 6721\n\t\t\t\t// Support: IE                                                                                                   // 6722\n\t\t\t\t// Swallow errors from 'invalid' CSS values (#5509)                                                              // 6723\n\t\t\t\ttry {                                                                                                            // 6724\n\t\t\t\t\t// Support: Chrome, Safari                                                                                      // 6725\n\t\t\t\t\t// Setting style to blank string required to delete \"style: x !important;\"                                      // 6726\n\t\t\t\t\tstyle[ name ] = \"\";                                                                                             // 6727\n\t\t\t\t\tstyle[ name ] = value;                                                                                          // 6728\n\t\t\t\t} catch(e) {}                                                                                                    // 6729\n\t\t\t}                                                                                                                 // 6730\n                                                                                                                     // 6731\n\t\t} else {                                                                                                           // 6732\n\t\t\t// If a hook was provided get the non-computed value from there                                                   // 6733\n\t\t\tif ( hooks && \"get\" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {                         // 6734\n\t\t\t\treturn ret;                                                                                                      // 6735\n\t\t\t}                                                                                                                 // 6736\n                                                                                                                     // 6737\n\t\t\t// Otherwise just get the value from the style object                                                             // 6738\n\t\t\treturn style[ name ];                                                                                             // 6739\n\t\t}                                                                                                                  // 6740\n\t},                                                                                                                  // 6741\n                                                                                                                     // 6742\n\tcss: function( elem, name, extra, styles ) {                                                                        // 6743\n\t\tvar num, val, hooks,                                                                                               // 6744\n\t\t\torigName = jQuery.camelCase( name );                                                                              // 6745\n                                                                                                                     // 6746\n\t\t// Make sure that we're working with the right name                                                                // 6747\n\t\tname = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );    // 6748\n                                                                                                                     // 6749\n\t\t// gets hook for the prefixed version                                                                              // 6750\n\t\t// followed by the unprefixed version                                                                              // 6751\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];                                                    // 6752\n                                                                                                                     // 6753\n\t\t// If a hook was provided get the computed value from there                                                        // 6754\n\t\tif ( hooks && \"get\" in hooks ) {                                                                                   // 6755\n\t\t\tval = hooks.get( elem, true, extra );                                                                             // 6756\n\t\t}                                                                                                                  // 6757\n                                                                                                                     // 6758\n\t\t// Otherwise, if a way to get the computed value exists, use that                                                  // 6759\n\t\tif ( val === undefined ) {                                                                                         // 6760\n\t\t\tval = curCSS( elem, name, styles );                                                                               // 6761\n\t\t}                                                                                                                  // 6762\n                                                                                                                     // 6763\n\t\t//convert \"normal\" to computed value                                                                               // 6764\n\t\tif ( val === \"normal\" && name in cssNormalTransform ) {                                                            // 6765\n\t\t\tval = cssNormalTransform[ name ];                                                                                 // 6766\n\t\t}                                                                                                                  // 6767\n                                                                                                                     // 6768\n\t\t// Return, converting to number if forced or a qualifier was provided and val looks numeric                        // 6769\n\t\tif ( extra === \"\" || extra ) {                                                                                     // 6770\n\t\t\tnum = parseFloat( val );                                                                                          // 6771\n\t\t\treturn extra === true || jQuery.isNumeric( num ) ? num || 0 : val;                                                // 6772\n\t\t}                                                                                                                  // 6773\n\t\treturn val;                                                                                                        // 6774\n\t}                                                                                                                   // 6775\n});                                                                                                                  // 6776\n                                                                                                                     // 6777\njQuery.each([ \"height\", \"width\" ], function( i, name ) {                                                             // 6778\n\tjQuery.cssHooks[ name ] = {                                                                                         // 6779\n\t\tget: function( elem, computed, extra ) {                                                                           // 6780\n\t\t\tif ( computed ) {                                                                                                 // 6781\n\t\t\t\t// certain elements can have dimension info if we invisibly show them                                            // 6782\n\t\t\t\t// however, it must have a current display style that would benefit from this                                    // 6783\n\t\t\t\treturn elem.offsetWidth === 0 && rdisplayswap.test( jQuery.css( elem, \"display\" ) ) ?                            // 6784\n\t\t\t\t\tjQuery.swap( elem, cssShow, function() {                                                                        // 6785\n\t\t\t\t\t\treturn getWidthOrHeight( elem, name, extra );                                                                  // 6786\n\t\t\t\t\t}) :                                                                                                            // 6787\n\t\t\t\t\tgetWidthOrHeight( elem, name, extra );                                                                          // 6788\n\t\t\t}                                                                                                                 // 6789\n\t\t},                                                                                                                 // 6790\n                                                                                                                     // 6791\n\t\tset: function( elem, value, extra ) {                                                                              // 6792\n\t\t\tvar styles = extra && getStyles( elem );                                                                          // 6793\n\t\t\treturn setPositiveNumber( elem, value, extra ?                                                                    // 6794\n\t\t\t\taugmentWidthOrHeight(                                                                                            // 6795\n\t\t\t\t\telem,                                                                                                           // 6796\n\t\t\t\t\tname,                                                                                                           // 6797\n\t\t\t\t\textra,                                                                                                          // 6798\n\t\t\t\t\tsupport.boxSizing() && jQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",                         // 6799\n\t\t\t\t\tstyles                                                                                                          // 6800\n\t\t\t\t) : 0                                                                                                            // 6801\n\t\t\t);                                                                                                                // 6802\n\t\t}                                                                                                                  // 6803\n\t};                                                                                                                  // 6804\n});                                                                                                                  // 6805\n                                                                                                                     // 6806\nif ( !support.opacity ) {                                                                                            // 6807\n\tjQuery.cssHooks.opacity = {                                                                                         // 6808\n\t\tget: function( elem, computed ) {                                                                                  // 6809\n\t\t\t// IE uses filters for opacity                                                                                    // 6810\n\t\t\treturn ropacity.test( (computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || \"\" ) ?    // 6811\n\t\t\t\t( 0.01 * parseFloat( RegExp.$1 ) ) + \"\" :                                                                        // 6812\n\t\t\t\tcomputed ? \"1\" : \"\";                                                                                             // 6813\n\t\t},                                                                                                                 // 6814\n                                                                                                                     // 6815\n\t\tset: function( elem, value ) {                                                                                     // 6816\n\t\t\tvar style = elem.style,                                                                                           // 6817\n\t\t\t\tcurrentStyle = elem.currentStyle,                                                                                // 6818\n\t\t\t\topacity = jQuery.isNumeric( value ) ? \"alpha(opacity=\" + value * 100 + \")\" : \"\",                                 // 6819\n\t\t\t\tfilter = currentStyle && currentStyle.filter || style.filter || \"\";                                              // 6820\n                                                                                                                     // 6821\n\t\t\t// IE has trouble with opacity if it does not have layout                                                         // 6822\n\t\t\t// Force it by setting the zoom level                                                                             // 6823\n\t\t\tstyle.zoom = 1;                                                                                                   // 6824\n                                                                                                                     // 6825\n\t\t\t// if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652                 // 6826\n\t\t\t// if value === \"\", then remove inline opacity #12685                                                             // 6827\n\t\t\tif ( ( value >= 1 || value === \"\" ) &&                                                                            // 6828\n\t\t\t\t\tjQuery.trim( filter.replace( ralpha, \"\" ) ) === \"\" &&                                                           // 6829\n\t\t\t\t\tstyle.removeAttribute ) {                                                                                       // 6830\n                                                                                                                     // 6831\n\t\t\t\t// Setting style.filter to null, \"\" & \" \" still leave \"filter:\" in the cssText                                   // 6832\n\t\t\t\t// if \"filter:\" is present at all, clearType is disabled, we want to avoid this                                  // 6833\n\t\t\t\t// style.removeAttribute is IE Only, but so apparently is this code path...                                      // 6834\n\t\t\t\tstyle.removeAttribute( \"filter\" );                                                                               // 6835\n                                                                                                                     // 6836\n\t\t\t\t// if there is no filter style applied in a css rule or unset inline opacity, we are done                        // 6837\n\t\t\t\tif ( value === \"\" || currentStyle && !currentStyle.filter ) {                                                    // 6838\n\t\t\t\t\treturn;                                                                                                         // 6839\n\t\t\t\t}                                                                                                                // 6840\n\t\t\t}                                                                                                                 // 6841\n                                                                                                                     // 6842\n\t\t\t// otherwise, set new filter values                                                                               // 6843\n\t\t\tstyle.filter = ralpha.test( filter ) ?                                                                            // 6844\n\t\t\t\tfilter.replace( ralpha, opacity ) :                                                                              // 6845\n\t\t\t\tfilter + \" \" + opacity;                                                                                          // 6846\n\t\t}                                                                                                                  // 6847\n\t};                                                                                                                  // 6848\n}                                                                                                                    // 6849\n                                                                                                                     // 6850\njQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,                                             // 6851\n\tfunction( elem, computed ) {                                                                                        // 6852\n\t\tif ( computed ) {                                                                                                  // 6853\n\t\t\t// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right                                       // 6854\n\t\t\t// Work around by temporarily setting element display to inline-block                                             // 6855\n\t\t\treturn jQuery.swap( elem, { \"display\": \"inline-block\" },                                                          // 6856\n\t\t\t\tcurCSS, [ elem, \"marginRight\" ] );                                                                               // 6857\n\t\t}                                                                                                                  // 6858\n\t}                                                                                                                   // 6859\n);                                                                                                                   // 6860\n                                                                                                                     // 6861\n// These hooks are used by animate to expand properties                                                              // 6862\njQuery.each({                                                                                                        // 6863\n\tmargin: \"\",                                                                                                         // 6864\n\tpadding: \"\",                                                                                                        // 6865\n\tborder: \"Width\"                                                                                                     // 6866\n}, function( prefix, suffix ) {                                                                                      // 6867\n\tjQuery.cssHooks[ prefix + suffix ] = {                                                                              // 6868\n\t\texpand: function( value ) {                                                                                        // 6869\n\t\t\tvar i = 0,                                                                                                        // 6870\n\t\t\t\texpanded = {},                                                                                                   // 6871\n                                                                                                                     // 6872\n\t\t\t\t// assumes a single number if not a string                                                                       // 6873\n\t\t\t\tparts = typeof value === \"string\" ? value.split(\" \") : [ value ];                                                // 6874\n                                                                                                                     // 6875\n\t\t\tfor ( ; i < 4; i++ ) {                                                                                            // 6876\n\t\t\t\texpanded[ prefix + cssExpand[ i ] + suffix ] =                                                                   // 6877\n\t\t\t\t\tparts[ i ] || parts[ i - 2 ] || parts[ 0 ];                                                                     // 6878\n\t\t\t}                                                                                                                 // 6879\n                                                                                                                     // 6880\n\t\t\treturn expanded;                                                                                                  // 6881\n\t\t}                                                                                                                  // 6882\n\t};                                                                                                                  // 6883\n                                                                                                                     // 6884\n\tif ( !rmargin.test( prefix ) ) {                                                                                    // 6885\n\t\tjQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;                                                        // 6886\n\t}                                                                                                                   // 6887\n});                                                                                                                  // 6888\n                                                                                                                     // 6889\njQuery.fn.extend({                                                                                                   // 6890\n\tcss: function( name, value ) {                                                                                      // 6891\n\t\treturn access( this, function( elem, name, value ) {                                                               // 6892\n\t\t\tvar styles, len,                                                                                                  // 6893\n\t\t\t\tmap = {},                                                                                                        // 6894\n\t\t\t\ti = 0;                                                                                                           // 6895\n                                                                                                                     // 6896\n\t\t\tif ( jQuery.isArray( name ) ) {                                                                                   // 6897\n\t\t\t\tstyles = getStyles( elem );                                                                                      // 6898\n\t\t\t\tlen = name.length;                                                                                               // 6899\n                                                                                                                     // 6900\n\t\t\t\tfor ( ; i < len; i++ ) {                                                                                         // 6901\n\t\t\t\t\tmap[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );                                                // 6902\n\t\t\t\t}                                                                                                                // 6903\n                                                                                                                     // 6904\n\t\t\t\treturn map;                                                                                                      // 6905\n\t\t\t}                                                                                                                 // 6906\n                                                                                                                     // 6907\n\t\t\treturn value !== undefined ?                                                                                      // 6908\n\t\t\t\tjQuery.style( elem, name, value ) :                                                                              // 6909\n\t\t\t\tjQuery.css( elem, name );                                                                                        // 6910\n\t\t}, name, value, arguments.length > 1 );                                                                            // 6911\n\t},                                                                                                                  // 6912\n\tshow: function() {                                                                                                  // 6913\n\t\treturn showHide( this, true );                                                                                     // 6914\n\t},                                                                                                                  // 6915\n\thide: function() {                                                                                                  // 6916\n\t\treturn showHide( this );                                                                                           // 6917\n\t},                                                                                                                  // 6918\n\ttoggle: function( state ) {                                                                                         // 6919\n\t\tif ( typeof state === \"boolean\" ) {                                                                                // 6920\n\t\t\treturn state ? this.show() : this.hide();                                                                         // 6921\n\t\t}                                                                                                                  // 6922\n                                                                                                                     // 6923\n\t\treturn this.each(function() {                                                                                      // 6924\n\t\t\tif ( isHidden( this ) ) {                                                                                         // 6925\n\t\t\t\tjQuery( this ).show();                                                                                           // 6926\n\t\t\t} else {                                                                                                          // 6927\n\t\t\t\tjQuery( this ).hide();                                                                                           // 6928\n\t\t\t}                                                                                                                 // 6929\n\t\t});                                                                                                                // 6930\n\t}                                                                                                                   // 6931\n});                                                                                                                  // 6932\n                                                                                                                     // 6933\n                                                                                                                     // 6934\nfunction Tween( elem, options, prop, end, easing ) {                                                                 // 6935\n\treturn new Tween.prototype.init( elem, options, prop, end, easing );                                                // 6936\n}                                                                                                                    // 6937\njQuery.Tween = Tween;                                                                                                // 6938\n                                                                                                                     // 6939\nTween.prototype = {                                                                                                  // 6940\n\tconstructor: Tween,                                                                                                 // 6941\n\tinit: function( elem, options, prop, end, easing, unit ) {                                                          // 6942\n\t\tthis.elem = elem;                                                                                                  // 6943\n\t\tthis.prop = prop;                                                                                                  // 6944\n\t\tthis.easing = easing || \"swing\";                                                                                   // 6945\n\t\tthis.options = options;                                                                                            // 6946\n\t\tthis.start = this.now = this.cur();                                                                                // 6947\n\t\tthis.end = end;                                                                                                    // 6948\n\t\tthis.unit = unit || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" );                                                      // 6949\n\t},                                                                                                                  // 6950\n\tcur: function() {                                                                                                   // 6951\n\t\tvar hooks = Tween.propHooks[ this.prop ];                                                                          // 6952\n                                                                                                                     // 6953\n\t\treturn hooks && hooks.get ?                                                                                        // 6954\n\t\t\thooks.get( this ) :                                                                                               // 6955\n\t\t\tTween.propHooks._default.get( this );                                                                             // 6956\n\t},                                                                                                                  // 6957\n\trun: function( percent ) {                                                                                          // 6958\n\t\tvar eased,                                                                                                         // 6959\n\t\t\thooks = Tween.propHooks[ this.prop ];                                                                             // 6960\n                                                                                                                     // 6961\n\t\tif ( this.options.duration ) {                                                                                     // 6962\n\t\t\tthis.pos = eased = jQuery.easing[ this.easing ](                                                                  // 6963\n\t\t\t\tpercent, this.options.duration * percent, 0, 1, this.options.duration                                            // 6964\n\t\t\t);                                                                                                                // 6965\n\t\t} else {                                                                                                           // 6966\n\t\t\tthis.pos = eased = percent;                                                                                       // 6967\n\t\t}                                                                                                                  // 6968\n\t\tthis.now = ( this.end - this.start ) * eased + this.start;                                                         // 6969\n                                                                                                                     // 6970\n\t\tif ( this.options.step ) {                                                                                         // 6971\n\t\t\tthis.options.step.call( this.elem, this.now, this );                                                              // 6972\n\t\t}                                                                                                                  // 6973\n                                                                                                                     // 6974\n\t\tif ( hooks && hooks.set ) {                                                                                        // 6975\n\t\t\thooks.set( this );                                                                                                // 6976\n\t\t} else {                                                                                                           // 6977\n\t\t\tTween.propHooks._default.set( this );                                                                             // 6978\n\t\t}                                                                                                                  // 6979\n\t\treturn this;                                                                                                       // 6980\n\t}                                                                                                                   // 6981\n};                                                                                                                   // 6982\n                                                                                                                     // 6983\nTween.prototype.init.prototype = Tween.prototype;                                                                    // 6984\n                                                                                                                     // 6985\nTween.propHooks = {                                                                                                  // 6986\n\t_default: {                                                                                                         // 6987\n\t\tget: function( tween ) {                                                                                           // 6988\n\t\t\tvar result;                                                                                                       // 6989\n                                                                                                                     // 6990\n\t\t\tif ( tween.elem[ tween.prop ] != null &&                                                                          // 6991\n\t\t\t\t(!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {                                                // 6992\n\t\t\t\treturn tween.elem[ tween.prop ];                                                                                 // 6993\n\t\t\t}                                                                                                                 // 6994\n                                                                                                                     // 6995\n\t\t\t// passing an empty string as a 3rd parameter to .css will automatically                                          // 6996\n\t\t\t// attempt a parseFloat and fallback to a string if the parse fails                                               // 6997\n\t\t\t// so, simple values such as \"10px\" are parsed to Float.                                                          // 6998\n\t\t\t// complex values such as \"rotate(1rad)\" are returned as is.                                                      // 6999\n\t\t\tresult = jQuery.css( tween.elem, tween.prop, \"\" );                                                                // 7000\n\t\t\t// Empty strings, null, undefined and \"auto\" are converted to 0.                                                  // 7001\n\t\t\treturn !result || result === \"auto\" ? 0 : result;                                                                 // 7002\n\t\t},                                                                                                                 // 7003\n\t\tset: function( tween ) {                                                                                           // 7004\n\t\t\t// use step hook for back compat - use cssHook if its there - use .style if its                                   // 7005\n\t\t\t// available and use plain properties where available                                                             // 7006\n\t\t\tif ( jQuery.fx.step[ tween.prop ] ) {                                                                             // 7007\n\t\t\t\tjQuery.fx.step[ tween.prop ]( tween );                                                                           // 7008\n\t\t\t} else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {\n\t\t\t\tjQuery.style( tween.elem, tween.prop, tween.now + tween.unit );                                                  // 7010\n\t\t\t} else {                                                                                                          // 7011\n\t\t\t\ttween.elem[ tween.prop ] = tween.now;                                                                            // 7012\n\t\t\t}                                                                                                                 // 7013\n\t\t}                                                                                                                  // 7014\n\t}                                                                                                                   // 7015\n};                                                                                                                   // 7016\n                                                                                                                     // 7017\n// Support: IE <=9                                                                                                   // 7018\n// Panic based approach to setting things on disconnected nodes                                                      // 7019\n                                                                                                                     // 7020\nTween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {                                                           // 7021\n\tset: function( tween ) {                                                                                            // 7022\n\t\tif ( tween.elem.nodeType && tween.elem.parentNode ) {                                                              // 7023\n\t\t\ttween.elem[ tween.prop ] = tween.now;                                                                             // 7024\n\t\t}                                                                                                                  // 7025\n\t}                                                                                                                   // 7026\n};                                                                                                                   // 7027\n                                                                                                                     // 7028\njQuery.easing = {                                                                                                    // 7029\n\tlinear: function( p ) {                                                                                             // 7030\n\t\treturn p;                                                                                                          // 7031\n\t},                                                                                                                  // 7032\n\tswing: function( p ) {                                                                                              // 7033\n\t\treturn 0.5 - Math.cos( p * Math.PI ) / 2;                                                                          // 7034\n\t}                                                                                                                   // 7035\n};                                                                                                                   // 7036\n                                                                                                                     // 7037\njQuery.fx = Tween.prototype.init;                                                                                    // 7038\n                                                                                                                     // 7039\n// Back Compat <1.8 extension point                                                                                  // 7040\njQuery.fx.step = {};                                                                                                 // 7041\n                                                                                                                     // 7042\n                                                                                                                     // 7043\n                                                                                                                     // 7044\n                                                                                                                     // 7045\nvar                                                                                                                  // 7046\n\tfxNow, timerId,                                                                                                     // 7047\n\trfxtypes = /^(?:toggle|show|hide)$/,                                                                                // 7048\n\trfxnum = new RegExp( \"^(?:([+-])=|)(\" + pnum + \")([a-z%]*)$\", \"i\" ),                                                // 7049\n\trrun = /queueHooks$/,                                                                                               // 7050\n\tanimationPrefilters = [ defaultPrefilter ],                                                                         // 7051\n\ttweeners = {                                                                                                        // 7052\n\t\t\"*\": [ function( prop, value ) {                                                                                   // 7053\n\t\t\tvar tween = this.createTween( prop, value ),                                                                      // 7054\n\t\t\t\ttarget = tween.cur(),                                                                                            // 7055\n\t\t\t\tparts = rfxnum.exec( value ),                                                                                    // 7056\n\t\t\t\tunit = parts && parts[ 3 ] || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" ),                                          // 7057\n                                                                                                                     // 7058\n\t\t\t\t// Starting value computation is required for potential unit mismatches                                          // 7059\n\t\t\t\tstart = ( jQuery.cssNumber[ prop ] || unit !== \"px\" && +target ) &&                                              // 7060\n\t\t\t\t\trfxnum.exec( jQuery.css( tween.elem, prop ) ),                                                                  // 7061\n\t\t\t\tscale = 1,                                                                                                       // 7062\n\t\t\t\tmaxIterations = 20;                                                                                              // 7063\n                                                                                                                     // 7064\n\t\t\tif ( start && start[ 3 ] !== unit ) {                                                                             // 7065\n\t\t\t\t// Trust units reported by jQuery.css                                                                            // 7066\n\t\t\t\tunit = unit || start[ 3 ];                                                                                       // 7067\n                                                                                                                     // 7068\n\t\t\t\t// Make sure we update the tween properties later on                                                             // 7069\n\t\t\t\tparts = parts || [];                                                                                             // 7070\n                                                                                                                     // 7071\n\t\t\t\t// Iteratively approximate from a nonzero starting point                                                         // 7072\n\t\t\t\tstart = +target || 1;                                                                                            // 7073\n                                                                                                                     // 7074\n\t\t\t\tdo {                                                                                                             // 7075\n\t\t\t\t\t// If previous iteration zeroed out, double until we get *something*                                            // 7076\n\t\t\t\t\t// Use a string for doubling factor so we don't accidentally see scale as unchanged below                       // 7077\n\t\t\t\t\tscale = scale || \".5\";                                                                                          // 7078\n                                                                                                                     // 7079\n\t\t\t\t\t// Adjust and apply                                                                                             // 7080\n\t\t\t\t\tstart = start / scale;                                                                                          // 7081\n\t\t\t\t\tjQuery.style( tween.elem, prop, start + unit );                                                                 // 7082\n                                                                                                                     // 7083\n\t\t\t\t// Update scale, tolerating zero or NaN from tween.cur()                                                         // 7084\n\t\t\t\t// And breaking the loop if scale is unchanged or perfect, or if we've just had enough                           // 7085\n\t\t\t\t} while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );                          // 7086\n\t\t\t}                                                                                                                 // 7087\n                                                                                                                     // 7088\n\t\t\t// Update tween properties                                                                                        // 7089\n\t\t\tif ( parts ) {                                                                                                    // 7090\n\t\t\t\tstart = tween.start = +start || +target || 0;                                                                    // 7091\n\t\t\t\ttween.unit = unit;                                                                                               // 7092\n\t\t\t\t// If a +=/-= token was provided, we're doing a relative animation                                               // 7093\n\t\t\t\ttween.end = parts[ 1 ] ?                                                                                         // 7094\n\t\t\t\t\tstart + ( parts[ 1 ] + 1 ) * parts[ 2 ] :                                                                       // 7095\n\t\t\t\t\t+parts[ 2 ];                                                                                                    // 7096\n\t\t\t}                                                                                                                 // 7097\n                                                                                                                     // 7098\n\t\t\treturn tween;                                                                                                     // 7099\n\t\t} ]                                                                                                                // 7100\n\t};                                                                                                                  // 7101\n                                                                                                                     // 7102\n// Animations created synchronously will run synchronously                                                           // 7103\nfunction createFxNow() {                                                                                             // 7104\n\tsetTimeout(function() {                                                                                             // 7105\n\t\tfxNow = undefined;                                                                                                 // 7106\n\t});                                                                                                                 // 7107\n\treturn ( fxNow = jQuery.now() );                                                                                    // 7108\n}                                                                                                                    // 7109\n                                                                                                                     // 7110\n// Generate parameters to create a standard animation                                                                // 7111\nfunction genFx( type, includeWidth ) {                                                                               // 7112\n\tvar which,                                                                                                          // 7113\n\t\tattrs = { height: type },                                                                                          // 7114\n\t\ti = 0;                                                                                                             // 7115\n                                                                                                                     // 7116\n\t// if we include width, step value is 1 to do all cssExpand values,                                                 // 7117\n\t// if we don't include width, step value is 2 to skip over Left and Right                                           // 7118\n\tincludeWidth = includeWidth ? 1 : 0;                                                                                // 7119\n\tfor ( ; i < 4 ; i += 2 - includeWidth ) {                                                                           // 7120\n\t\twhich = cssExpand[ i ];                                                                                            // 7121\n\t\tattrs[ \"margin\" + which ] = attrs[ \"padding\" + which ] = type;                                                     // 7122\n\t}                                                                                                                   // 7123\n                                                                                                                     // 7124\n\tif ( includeWidth ) {                                                                                               // 7125\n\t\tattrs.opacity = attrs.width = type;                                                                                // 7126\n\t}                                                                                                                   // 7127\n                                                                                                                     // 7128\n\treturn attrs;                                                                                                       // 7129\n}                                                                                                                    // 7130\n                                                                                                                     // 7131\nfunction createTween( value, prop, animation ) {                                                                     // 7132\n\tvar tween,                                                                                                          // 7133\n\t\tcollection = ( tweeners[ prop ] || [] ).concat( tweeners[ \"*\" ] ),                                                 // 7134\n\t\tindex = 0,                                                                                                         // 7135\n\t\tlength = collection.length;                                                                                        // 7136\n\tfor ( ; index < length; index++ ) {                                                                                 // 7137\n\t\tif ( (tween = collection[ index ].call( animation, prop, value )) ) {                                              // 7138\n                                                                                                                     // 7139\n\t\t\t// we're done with this property                                                                                  // 7140\n\t\t\treturn tween;                                                                                                     // 7141\n\t\t}                                                                                                                  // 7142\n\t}                                                                                                                   // 7143\n}                                                                                                                    // 7144\n                                                                                                                     // 7145\nfunction defaultPrefilter( elem, props, opts ) {                                                                     // 7146\n\t/* jshint validthis: true */                                                                                        // 7147\n\tvar prop, value, toggle, tween, hooks, oldfire, display, dDisplay,                                                  // 7148\n\t\tanim = this,                                                                                                       // 7149\n\t\torig = {},                                                                                                         // 7150\n\t\tstyle = elem.style,                                                                                                // 7151\n\t\thidden = elem.nodeType && isHidden( elem ),                                                                        // 7152\n\t\tdataShow = jQuery._data( elem, \"fxshow\" );                                                                         // 7153\n                                                                                                                     // 7154\n\t// handle queue: false promises                                                                                     // 7155\n\tif ( !opts.queue ) {                                                                                                // 7156\n\t\thooks = jQuery._queueHooks( elem, \"fx\" );                                                                          // 7157\n\t\tif ( hooks.unqueued == null ) {                                                                                    // 7158\n\t\t\thooks.unqueued = 0;                                                                                               // 7159\n\t\t\toldfire = hooks.empty.fire;                                                                                       // 7160\n\t\t\thooks.empty.fire = function() {                                                                                   // 7161\n\t\t\t\tif ( !hooks.unqueued ) {                                                                                         // 7162\n\t\t\t\t\toldfire();                                                                                                      // 7163\n\t\t\t\t}                                                                                                                // 7164\n\t\t\t};                                                                                                                // 7165\n\t\t}                                                                                                                  // 7166\n\t\thooks.unqueued++;                                                                                                  // 7167\n                                                                                                                     // 7168\n\t\tanim.always(function() {                                                                                           // 7169\n\t\t\t// doing this makes sure that the complete handler will be called                                                 // 7170\n\t\t\t// before this completes                                                                                          // 7171\n\t\t\tanim.always(function() {                                                                                          // 7172\n\t\t\t\thooks.unqueued--;                                                                                                // 7173\n\t\t\t\tif ( !jQuery.queue( elem, \"fx\" ).length ) {                                                                      // 7174\n\t\t\t\t\thooks.empty.fire();                                                                                             // 7175\n\t\t\t\t}                                                                                                                // 7176\n\t\t\t});                                                                                                               // 7177\n\t\t});                                                                                                                // 7178\n\t}                                                                                                                   // 7179\n                                                                                                                     // 7180\n\t// height/width overflow pass                                                                                       // 7181\n\tif ( elem.nodeType === 1 && ( \"height\" in props || \"width\" in props ) ) {                                           // 7182\n\t\t// Make sure that nothing sneaks out                                                                               // 7183\n\t\t// Record all 3 overflow attributes because IE does not                                                            // 7184\n\t\t// change the overflow attribute when overflowX and                                                                // 7185\n\t\t// overflowY are set to the same value                                                                             // 7186\n\t\topts.overflow = [ style.overflow, style.overflowX, style.overflowY ];                                              // 7187\n                                                                                                                     // 7188\n\t\t// Set display property to inline-block for height/width                                                           // 7189\n\t\t// animations on inline elements that are having width/height animated                                             // 7190\n\t\tdisplay = jQuery.css( elem, \"display\" );                                                                           // 7191\n\t\tdDisplay = defaultDisplay( elem.nodeName );                                                                        // 7192\n\t\tif ( display === \"none\" ) {                                                                                        // 7193\n\t\t\tdisplay = dDisplay;                                                                                               // 7194\n\t\t}                                                                                                                  // 7195\n\t\tif ( display === \"inline\" &&                                                                                       // 7196\n\t\t\t\tjQuery.css( elem, \"float\" ) === \"none\" ) {                                                                       // 7197\n                                                                                                                     // 7198\n\t\t\t// inline-level elements accept inline-block;                                                                     // 7199\n\t\t\t// block-level elements need to be inline with layout                                                             // 7200\n\t\t\tif ( !support.inlineBlockNeedsLayout || dDisplay === \"inline\" ) {                                                 // 7201\n\t\t\t\tstyle.display = \"inline-block\";                                                                                  // 7202\n\t\t\t} else {                                                                                                          // 7203\n\t\t\t\tstyle.zoom = 1;                                                                                                  // 7204\n\t\t\t}                                                                                                                 // 7205\n\t\t}                                                                                                                  // 7206\n\t}                                                                                                                   // 7207\n                                                                                                                     // 7208\n\tif ( opts.overflow ) {                                                                                              // 7209\n\t\tstyle.overflow = \"hidden\";                                                                                         // 7210\n\t\tif ( !support.shrinkWrapBlocks() ) {                                                                               // 7211\n\t\t\tanim.always(function() {                                                                                          // 7212\n\t\t\t\tstyle.overflow = opts.overflow[ 0 ];                                                                             // 7213\n\t\t\t\tstyle.overflowX = opts.overflow[ 1 ];                                                                            // 7214\n\t\t\t\tstyle.overflowY = opts.overflow[ 2 ];                                                                            // 7215\n\t\t\t});                                                                                                               // 7216\n\t\t}                                                                                                                  // 7217\n\t}                                                                                                                   // 7218\n                                                                                                                     // 7219\n\t// show/hide pass                                                                                                   // 7220\n\tfor ( prop in props ) {                                                                                             // 7221\n\t\tvalue = props[ prop ];                                                                                             // 7222\n\t\tif ( rfxtypes.exec( value ) ) {                                                                                    // 7223\n\t\t\tdelete props[ prop ];                                                                                             // 7224\n\t\t\ttoggle = toggle || value === \"toggle\";                                                                            // 7225\n\t\t\tif ( value === ( hidden ? \"hide\" : \"show\" ) ) {                                                                   // 7226\n                                                                                                                     // 7227\n\t\t\t\t// If there is dataShow left over from a stopped hide or show and we are going to proceed with show, we should pretend to be hidden\n\t\t\t\tif ( value === \"show\" && dataShow && dataShow[ prop ] !== undefined ) {                                          // 7229\n\t\t\t\t\thidden = true;                                                                                                  // 7230\n\t\t\t\t} else {                                                                                                         // 7231\n\t\t\t\t\tcontinue;                                                                                                       // 7232\n\t\t\t\t}                                                                                                                // 7233\n\t\t\t}                                                                                                                 // 7234\n\t\t\torig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );                                        // 7235\n\t\t}                                                                                                                  // 7236\n\t}                                                                                                                   // 7237\n                                                                                                                     // 7238\n\tif ( !jQuery.isEmptyObject( orig ) ) {                                                                              // 7239\n\t\tif ( dataShow ) {                                                                                                  // 7240\n\t\t\tif ( \"hidden\" in dataShow ) {                                                                                     // 7241\n\t\t\t\thidden = dataShow.hidden;                                                                                        // 7242\n\t\t\t}                                                                                                                 // 7243\n\t\t} else {                                                                                                           // 7244\n\t\t\tdataShow = jQuery._data( elem, \"fxshow\", {} );                                                                    // 7245\n\t\t}                                                                                                                  // 7246\n                                                                                                                     // 7247\n\t\t// store state if its toggle - enables .stop().toggle() to \"reverse\"                                               // 7248\n\t\tif ( toggle ) {                                                                                                    // 7249\n\t\t\tdataShow.hidden = !hidden;                                                                                        // 7250\n\t\t}                                                                                                                  // 7251\n\t\tif ( hidden ) {                                                                                                    // 7252\n\t\t\tjQuery( elem ).show();                                                                                            // 7253\n\t\t} else {                                                                                                           // 7254\n\t\t\tanim.done(function() {                                                                                            // 7255\n\t\t\t\tjQuery( elem ).hide();                                                                                           // 7256\n\t\t\t});                                                                                                               // 7257\n\t\t}                                                                                                                  // 7258\n\t\tanim.done(function() {                                                                                             // 7259\n\t\t\tvar prop;                                                                                                         // 7260\n\t\t\tjQuery._removeData( elem, \"fxshow\" );                                                                             // 7261\n\t\t\tfor ( prop in orig ) {                                                                                            // 7262\n\t\t\t\tjQuery.style( elem, prop, orig[ prop ] );                                                                        // 7263\n\t\t\t}                                                                                                                 // 7264\n\t\t});                                                                                                                // 7265\n\t\tfor ( prop in orig ) {                                                                                             // 7266\n\t\t\ttween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );                                                 // 7267\n                                                                                                                     // 7268\n\t\t\tif ( !( prop in dataShow ) ) {                                                                                    // 7269\n\t\t\t\tdataShow[ prop ] = tween.start;                                                                                  // 7270\n\t\t\t\tif ( hidden ) {                                                                                                  // 7271\n\t\t\t\t\ttween.end = tween.start;                                                                                        // 7272\n\t\t\t\t\ttween.start = prop === \"width\" || prop === \"height\" ? 1 : 0;                                                    // 7273\n\t\t\t\t}                                                                                                                // 7274\n\t\t\t}                                                                                                                 // 7275\n\t\t}                                                                                                                  // 7276\n\t}                                                                                                                   // 7277\n}                                                                                                                    // 7278\n                                                                                                                     // 7279\nfunction propFilter( props, specialEasing ) {                                                                        // 7280\n\tvar index, name, easing, value, hooks;                                                                              // 7281\n                                                                                                                     // 7282\n\t// camelCase, specialEasing and expand cssHook pass                                                                 // 7283\n\tfor ( index in props ) {                                                                                            // 7284\n\t\tname = jQuery.camelCase( index );                                                                                  // 7285\n\t\teasing = specialEasing[ name ];                                                                                    // 7286\n\t\tvalue = props[ index ];                                                                                            // 7287\n\t\tif ( jQuery.isArray( value ) ) {                                                                                   // 7288\n\t\t\teasing = value[ 1 ];                                                                                              // 7289\n\t\t\tvalue = props[ index ] = value[ 0 ];                                                                              // 7290\n\t\t}                                                                                                                  // 7291\n                                                                                                                     // 7292\n\t\tif ( index !== name ) {                                                                                            // 7293\n\t\t\tprops[ name ] = value;                                                                                            // 7294\n\t\t\tdelete props[ index ];                                                                                            // 7295\n\t\t}                                                                                                                  // 7296\n                                                                                                                     // 7297\n\t\thooks = jQuery.cssHooks[ name ];                                                                                   // 7298\n\t\tif ( hooks && \"expand\" in hooks ) {                                                                                // 7299\n\t\t\tvalue = hooks.expand( value );                                                                                    // 7300\n\t\t\tdelete props[ name ];                                                                                             // 7301\n                                                                                                                     // 7302\n\t\t\t// not quite $.extend, this wont overwrite keys already present.                                                  // 7303\n\t\t\t// also - reusing 'index' from above because we have the correct \"name\"                                           // 7304\n\t\t\tfor ( index in value ) {                                                                                          // 7305\n\t\t\t\tif ( !( index in props ) ) {                                                                                     // 7306\n\t\t\t\t\tprops[ index ] = value[ index ];                                                                                // 7307\n\t\t\t\t\tspecialEasing[ index ] = easing;                                                                                // 7308\n\t\t\t\t}                                                                                                                // 7309\n\t\t\t}                                                                                                                 // 7310\n\t\t} else {                                                                                                           // 7311\n\t\t\tspecialEasing[ name ] = easing;                                                                                   // 7312\n\t\t}                                                                                                                  // 7313\n\t}                                                                                                                   // 7314\n}                                                                                                                    // 7315\n                                                                                                                     // 7316\nfunction Animation( elem, properties, options ) {                                                                    // 7317\n\tvar result,                                                                                                         // 7318\n\t\tstopped,                                                                                                           // 7319\n\t\tindex = 0,                                                                                                         // 7320\n\t\tlength = animationPrefilters.length,                                                                               // 7321\n\t\tdeferred = jQuery.Deferred().always( function() {                                                                  // 7322\n\t\t\t// don't match elem in the :animated selector                                                                     // 7323\n\t\t\tdelete tick.elem;                                                                                                 // 7324\n\t\t}),                                                                                                                // 7325\n\t\ttick = function() {                                                                                                // 7326\n\t\t\tif ( stopped ) {                                                                                                  // 7327\n\t\t\t\treturn false;                                                                                                    // 7328\n\t\t\t}                                                                                                                 // 7329\n\t\t\tvar currentTime = fxNow || createFxNow(),                                                                         // 7330\n\t\t\t\tremaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),                               // 7331\n\t\t\t\t// archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)                                             // 7332\n\t\t\t\ttemp = remaining / animation.duration || 0,                                                                      // 7333\n\t\t\t\tpercent = 1 - temp,                                                                                              // 7334\n\t\t\t\tindex = 0,                                                                                                       // 7335\n\t\t\t\tlength = animation.tweens.length;                                                                                // 7336\n                                                                                                                     // 7337\n\t\t\tfor ( ; index < length ; index++ ) {                                                                              // 7338\n\t\t\t\tanimation.tweens[ index ].run( percent );                                                                        // 7339\n\t\t\t}                                                                                                                 // 7340\n                                                                                                                     // 7341\n\t\t\tdeferred.notifyWith( elem, [ animation, percent, remaining ]);                                                    // 7342\n                                                                                                                     // 7343\n\t\t\tif ( percent < 1 && length ) {                                                                                    // 7344\n\t\t\t\treturn remaining;                                                                                                // 7345\n\t\t\t} else {                                                                                                          // 7346\n\t\t\t\tdeferred.resolveWith( elem, [ animation ] );                                                                     // 7347\n\t\t\t\treturn false;                                                                                                    // 7348\n\t\t\t}                                                                                                                 // 7349\n\t\t},                                                                                                                 // 7350\n\t\tanimation = deferred.promise({                                                                                     // 7351\n\t\t\telem: elem,                                                                                                       // 7352\n\t\t\tprops: jQuery.extend( {}, properties ),                                                                           // 7353\n\t\t\topts: jQuery.extend( true, { specialEasing: {} }, options ),                                                      // 7354\n\t\t\toriginalProperties: properties,                                                                                   // 7355\n\t\t\toriginalOptions: options,                                                                                         // 7356\n\t\t\tstartTime: fxNow || createFxNow(),                                                                                // 7357\n\t\t\tduration: options.duration,                                                                                       // 7358\n\t\t\ttweens: [],                                                                                                       // 7359\n\t\t\tcreateTween: function( prop, end ) {                                                                              // 7360\n\t\t\t\tvar tween = jQuery.Tween( elem, animation.opts, prop, end,                                                       // 7361\n\t\t\t\t\t\tanimation.opts.specialEasing[ prop ] || animation.opts.easing );                                               // 7362\n\t\t\t\tanimation.tweens.push( tween );                                                                                  // 7363\n\t\t\t\treturn tween;                                                                                                    // 7364\n\t\t\t},                                                                                                                // 7365\n\t\t\tstop: function( gotoEnd ) {                                                                                       // 7366\n\t\t\t\tvar index = 0,                                                                                                   // 7367\n\t\t\t\t\t// if we are going to the end, we want to run all the tweens                                                    // 7368\n\t\t\t\t\t// otherwise we skip this part                                                                                  // 7369\n\t\t\t\t\tlength = gotoEnd ? animation.tweens.length : 0;                                                                 // 7370\n\t\t\t\tif ( stopped ) {                                                                                                 // 7371\n\t\t\t\t\treturn this;                                                                                                    // 7372\n\t\t\t\t}                                                                                                                // 7373\n\t\t\t\tstopped = true;                                                                                                  // 7374\n\t\t\t\tfor ( ; index < length ; index++ ) {                                                                             // 7375\n\t\t\t\t\tanimation.tweens[ index ].run( 1 );                                                                             // 7376\n\t\t\t\t}                                                                                                                // 7377\n                                                                                                                     // 7378\n\t\t\t\t// resolve when we played the last frame                                                                         // 7379\n\t\t\t\t// otherwise, reject                                                                                             // 7380\n\t\t\t\tif ( gotoEnd ) {                                                                                                 // 7381\n\t\t\t\t\tdeferred.resolveWith( elem, [ animation, gotoEnd ] );                                                           // 7382\n\t\t\t\t} else {                                                                                                         // 7383\n\t\t\t\t\tdeferred.rejectWith( elem, [ animation, gotoEnd ] );                                                            // 7384\n\t\t\t\t}                                                                                                                // 7385\n\t\t\t\treturn this;                                                                                                     // 7386\n\t\t\t}                                                                                                                 // 7387\n\t\t}),                                                                                                                // 7388\n\t\tprops = animation.props;                                                                                           // 7389\n                                                                                                                     // 7390\n\tpropFilter( props, animation.opts.specialEasing );                                                                  // 7391\n                                                                                                                     // 7392\n\tfor ( ; index < length ; index++ ) {                                                                                // 7393\n\t\tresult = animationPrefilters[ index ].call( animation, elem, props, animation.opts );                              // 7394\n\t\tif ( result ) {                                                                                                    // 7395\n\t\t\treturn result;                                                                                                    // 7396\n\t\t}                                                                                                                  // 7397\n\t}                                                                                                                   // 7398\n                                                                                                                     // 7399\n\tjQuery.map( props, createTween, animation );                                                                        // 7400\n                                                                                                                     // 7401\n\tif ( jQuery.isFunction( animation.opts.start ) ) {                                                                  // 7402\n\t\tanimation.opts.start.call( elem, animation );                                                                      // 7403\n\t}                                                                                                                   // 7404\n                                                                                                                     // 7405\n\tjQuery.fx.timer(                                                                                                    // 7406\n\t\tjQuery.extend( tick, {                                                                                             // 7407\n\t\t\telem: elem,                                                                                                       // 7408\n\t\t\tanim: animation,                                                                                                  // 7409\n\t\t\tqueue: animation.opts.queue                                                                                       // 7410\n\t\t})                                                                                                                 // 7411\n\t);                                                                                                                  // 7412\n                                                                                                                     // 7413\n\t// attach callbacks from options                                                                                    // 7414\n\treturn animation.progress( animation.opts.progress )                                                                // 7415\n\t\t.done( animation.opts.done, animation.opts.complete )                                                              // 7416\n\t\t.fail( animation.opts.fail )                                                                                       // 7417\n\t\t.always( animation.opts.always );                                                                                  // 7418\n}                                                                                                                    // 7419\n                                                                                                                     // 7420\njQuery.Animation = jQuery.extend( Animation, {                                                                       // 7421\n\ttweener: function( props, callback ) {                                                                              // 7422\n\t\tif ( jQuery.isFunction( props ) ) {                                                                                // 7423\n\t\t\tcallback = props;                                                                                                 // 7424\n\t\t\tprops = [ \"*\" ];                                                                                                  // 7425\n\t\t} else {                                                                                                           // 7426\n\t\t\tprops = props.split(\" \");                                                                                         // 7427\n\t\t}                                                                                                                  // 7428\n                                                                                                                     // 7429\n\t\tvar prop,                                                                                                          // 7430\n\t\t\tindex = 0,                                                                                                        // 7431\n\t\t\tlength = props.length;                                                                                            // 7432\n                                                                                                                     // 7433\n\t\tfor ( ; index < length ; index++ ) {                                                                               // 7434\n\t\t\tprop = props[ index ];                                                                                            // 7435\n\t\t\ttweeners[ prop ] = tweeners[ prop ] || [];                                                                        // 7436\n\t\t\ttweeners[ prop ].unshift( callback );                                                                             // 7437\n\t\t}                                                                                                                  // 7438\n\t},                                                                                                                  // 7439\n                                                                                                                     // 7440\n\tprefilter: function( callback, prepend ) {                                                                          // 7441\n\t\tif ( prepend ) {                                                                                                   // 7442\n\t\t\tanimationPrefilters.unshift( callback );                                                                          // 7443\n\t\t} else {                                                                                                           // 7444\n\t\t\tanimationPrefilters.push( callback );                                                                             // 7445\n\t\t}                                                                                                                  // 7446\n\t}                                                                                                                   // 7447\n});                                                                                                                  // 7448\n                                                                                                                     // 7449\njQuery.speed = function( speed, easing, fn ) {                                                                       // 7450\n\tvar opt = speed && typeof speed === \"object\" ? jQuery.extend( {}, speed ) : {                                       // 7451\n\t\tcomplete: fn || !fn && easing ||                                                                                   // 7452\n\t\t\tjQuery.isFunction( speed ) && speed,                                                                              // 7453\n\t\tduration: speed,                                                                                                   // 7454\n\t\teasing: fn && easing || easing && !jQuery.isFunction( easing ) && easing                                           // 7455\n\t};                                                                                                                  // 7456\n                                                                                                                     // 7457\n\topt.duration = jQuery.fx.off ? 0 : typeof opt.duration === \"number\" ? opt.duration :                                // 7458\n\t\topt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;                   // 7459\n                                                                                                                     // 7460\n\t// normalize opt.queue - true/undefined/null -> \"fx\"                                                                // 7461\n\tif ( opt.queue == null || opt.queue === true ) {                                                                    // 7462\n\t\topt.queue = \"fx\";                                                                                                  // 7463\n\t}                                                                                                                   // 7464\n                                                                                                                     // 7465\n\t// Queueing                                                                                                         // 7466\n\topt.old = opt.complete;                                                                                             // 7467\n                                                                                                                     // 7468\n\topt.complete = function() {                                                                                         // 7469\n\t\tif ( jQuery.isFunction( opt.old ) ) {                                                                              // 7470\n\t\t\topt.old.call( this );                                                                                             // 7471\n\t\t}                                                                                                                  // 7472\n                                                                                                                     // 7473\n\t\tif ( opt.queue ) {                                                                                                 // 7474\n\t\t\tjQuery.dequeue( this, opt.queue );                                                                                // 7475\n\t\t}                                                                                                                  // 7476\n\t};                                                                                                                  // 7477\n                                                                                                                     // 7478\n\treturn opt;                                                                                                         // 7479\n};                                                                                                                   // 7480\n                                                                                                                     // 7481\njQuery.fn.extend({                                                                                                   // 7482\n\tfadeTo: function( speed, to, easing, callback ) {                                                                   // 7483\n                                                                                                                     // 7484\n\t\t// show any hidden elements after setting opacity to 0                                                             // 7485\n\t\treturn this.filter( isHidden ).css( \"opacity\", 0 ).show()                                                          // 7486\n                                                                                                                     // 7487\n\t\t\t// animate to the value specified                                                                                 // 7488\n\t\t\t.end().animate({ opacity: to }, speed, easing, callback );                                                        // 7489\n\t},                                                                                                                  // 7490\n\tanimate: function( prop, speed, easing, callback ) {                                                                // 7491\n\t\tvar empty = jQuery.isEmptyObject( prop ),                                                                          // 7492\n\t\t\toptall = jQuery.speed( speed, easing, callback ),                                                                 // 7493\n\t\t\tdoAnimation = function() {                                                                                        // 7494\n\t\t\t\t// Operate on a copy of prop so per-property easing won't be lost                                                // 7495\n\t\t\t\tvar anim = Animation( this, jQuery.extend( {}, prop ), optall );                                                 // 7496\n                                                                                                                     // 7497\n\t\t\t\t// Empty animations, or finishing resolves immediately                                                           // 7498\n\t\t\t\tif ( empty || jQuery._data( this, \"finish\" ) ) {                                                                 // 7499\n\t\t\t\t\tanim.stop( true );                                                                                              // 7500\n\t\t\t\t}                                                                                                                // 7501\n\t\t\t};                                                                                                                // 7502\n\t\t\tdoAnimation.finish = doAnimation;                                                                                 // 7503\n                                                                                                                     // 7504\n\t\treturn empty || optall.queue === false ?                                                                           // 7505\n\t\t\tthis.each( doAnimation ) :                                                                                        // 7506\n\t\t\tthis.queue( optall.queue, doAnimation );                                                                          // 7507\n\t},                                                                                                                  // 7508\n\tstop: function( type, clearQueue, gotoEnd ) {                                                                       // 7509\n\t\tvar stopQueue = function( hooks ) {                                                                                // 7510\n\t\t\tvar stop = hooks.stop;                                                                                            // 7511\n\t\t\tdelete hooks.stop;                                                                                                // 7512\n\t\t\tstop( gotoEnd );                                                                                                  // 7513\n\t\t};                                                                                                                 // 7514\n                                                                                                                     // 7515\n\t\tif ( typeof type !== \"string\" ) {                                                                                  // 7516\n\t\t\tgotoEnd = clearQueue;                                                                                             // 7517\n\t\t\tclearQueue = type;                                                                                                // 7518\n\t\t\ttype = undefined;                                                                                                 // 7519\n\t\t}                                                                                                                  // 7520\n\t\tif ( clearQueue && type !== false ) {                                                                              // 7521\n\t\t\tthis.queue( type || \"fx\", [] );                                                                                   // 7522\n\t\t}                                                                                                                  // 7523\n                                                                                                                     // 7524\n\t\treturn this.each(function() {                                                                                      // 7525\n\t\t\tvar dequeue = true,                                                                                               // 7526\n\t\t\t\tindex = type != null && type + \"queueHooks\",                                                                     // 7527\n\t\t\t\ttimers = jQuery.timers,                                                                                          // 7528\n\t\t\t\tdata = jQuery._data( this );                                                                                     // 7529\n                                                                                                                     // 7530\n\t\t\tif ( index ) {                                                                                                    // 7531\n\t\t\t\tif ( data[ index ] && data[ index ].stop ) {                                                                     // 7532\n\t\t\t\t\tstopQueue( data[ index ] );                                                                                     // 7533\n\t\t\t\t}                                                                                                                // 7534\n\t\t\t} else {                                                                                                          // 7535\n\t\t\t\tfor ( index in data ) {                                                                                          // 7536\n\t\t\t\t\tif ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {                                              // 7537\n\t\t\t\t\t\tstopQueue( data[ index ] );                                                                                    // 7538\n\t\t\t\t\t}                                                                                                               // 7539\n\t\t\t\t}                                                                                                                // 7540\n\t\t\t}                                                                                                                 // 7541\n                                                                                                                     // 7542\n\t\t\tfor ( index = timers.length; index--; ) {                                                                         // 7543\n\t\t\t\tif ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {                       // 7544\n\t\t\t\t\ttimers[ index ].anim.stop( gotoEnd );                                                                           // 7545\n\t\t\t\t\tdequeue = false;                                                                                                // 7546\n\t\t\t\t\ttimers.splice( index, 1 );                                                                                      // 7547\n\t\t\t\t}                                                                                                                // 7548\n\t\t\t}                                                                                                                 // 7549\n                                                                                                                     // 7550\n\t\t\t// start the next in the queue if the last step wasn't forced                                                     // 7551\n\t\t\t// timers currently will call their complete callbacks, which will dequeue                                        // 7552\n\t\t\t// but only if they were gotoEnd                                                                                  // 7553\n\t\t\tif ( dequeue || !gotoEnd ) {                                                                                      // 7554\n\t\t\t\tjQuery.dequeue( this, type );                                                                                    // 7555\n\t\t\t}                                                                                                                 // 7556\n\t\t});                                                                                                                // 7557\n\t},                                                                                                                  // 7558\n\tfinish: function( type ) {                                                                                          // 7559\n\t\tif ( type !== false ) {                                                                                            // 7560\n\t\t\ttype = type || \"fx\";                                                                                              // 7561\n\t\t}                                                                                                                  // 7562\n\t\treturn this.each(function() {                                                                                      // 7563\n\t\t\tvar index,                                                                                                        // 7564\n\t\t\t\tdata = jQuery._data( this ),                                                                                     // 7565\n\t\t\t\tqueue = data[ type + \"queue\" ],                                                                                  // 7566\n\t\t\t\thooks = data[ type + \"queueHooks\" ],                                                                             // 7567\n\t\t\t\ttimers = jQuery.timers,                                                                                          // 7568\n\t\t\t\tlength = queue ? queue.length : 0;                                                                               // 7569\n                                                                                                                     // 7570\n\t\t\t// enable finishing flag on private data                                                                          // 7571\n\t\t\tdata.finish = true;                                                                                               // 7572\n                                                                                                                     // 7573\n\t\t\t// empty the queue first                                                                                          // 7574\n\t\t\tjQuery.queue( this, type, [] );                                                                                   // 7575\n                                                                                                                     // 7576\n\t\t\tif ( hooks && hooks.stop ) {                                                                                      // 7577\n\t\t\t\thooks.stop.call( this, true );                                                                                   // 7578\n\t\t\t}                                                                                                                 // 7579\n                                                                                                                     // 7580\n\t\t\t// look for any active animations, and finish them                                                                // 7581\n\t\t\tfor ( index = timers.length; index--; ) {                                                                         // 7582\n\t\t\t\tif ( timers[ index ].elem === this && timers[ index ].queue === type ) {                                         // 7583\n\t\t\t\t\ttimers[ index ].anim.stop( true );                                                                              // 7584\n\t\t\t\t\ttimers.splice( index, 1 );                                                                                      // 7585\n\t\t\t\t}                                                                                                                // 7586\n\t\t\t}                                                                                                                 // 7587\n                                                                                                                     // 7588\n\t\t\t// look for any animations in the old queue and finish them                                                       // 7589\n\t\t\tfor ( index = 0; index < length; index++ ) {                                                                      // 7590\n\t\t\t\tif ( queue[ index ] && queue[ index ].finish ) {                                                                 // 7591\n\t\t\t\t\tqueue[ index ].finish.call( this );                                                                             // 7592\n\t\t\t\t}                                                                                                                // 7593\n\t\t\t}                                                                                                                 // 7594\n                                                                                                                     // 7595\n\t\t\t// turn off finishing flag                                                                                        // 7596\n\t\t\tdelete data.finish;                                                                                               // 7597\n\t\t});                                                                                                                // 7598\n\t}                                                                                                                   // 7599\n});                                                                                                                  // 7600\n                                                                                                                     // 7601\njQuery.each([ \"toggle\", \"show\", \"hide\" ], function( i, name ) {                                                      // 7602\n\tvar cssFn = jQuery.fn[ name ];                                                                                      // 7603\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {                                                           // 7604\n\t\treturn speed == null || typeof speed === \"boolean\" ?                                                               // 7605\n\t\t\tcssFn.apply( this, arguments ) :                                                                                  // 7606\n\t\t\tthis.animate( genFx( name, true ), speed, easing, callback );                                                     // 7607\n\t};                                                                                                                  // 7608\n});                                                                                                                  // 7609\n                                                                                                                     // 7610\n// Generate shortcuts for custom animations                                                                          // 7611\njQuery.each({                                                                                                        // 7612\n\tslideDown: genFx(\"show\"),                                                                                           // 7613\n\tslideUp: genFx(\"hide\"),                                                                                             // 7614\n\tslideToggle: genFx(\"toggle\"),                                                                                       // 7615\n\tfadeIn: { opacity: \"show\" },                                                                                        // 7616\n\tfadeOut: { opacity: \"hide\" },                                                                                       // 7617\n\tfadeToggle: { opacity: \"toggle\" }                                                                                   // 7618\n}, function( name, props ) {                                                                                         // 7619\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {                                                           // 7620\n\t\treturn this.animate( props, speed, easing, callback );                                                             // 7621\n\t};                                                                                                                  // 7622\n});                                                                                                                  // 7623\n                                                                                                                     // 7624\njQuery.timers = [];                                                                                                  // 7625\njQuery.fx.tick = function() {                                                                                        // 7626\n\tvar timer,                                                                                                          // 7627\n\t\ttimers = jQuery.timers,                                                                                            // 7628\n\t\ti = 0;                                                                                                             // 7629\n                                                                                                                     // 7630\n\tfxNow = jQuery.now();                                                                                               // 7631\n                                                                                                                     // 7632\n\tfor ( ; i < timers.length; i++ ) {                                                                                  // 7633\n\t\ttimer = timers[ i ];                                                                                               // 7634\n\t\t// Checks the timer has not already been removed                                                                   // 7635\n\t\tif ( !timer() && timers[ i ] === timer ) {                                                                         // 7636\n\t\t\ttimers.splice( i--, 1 );                                                                                          // 7637\n\t\t}                                                                                                                  // 7638\n\t}                                                                                                                   // 7639\n                                                                                                                     // 7640\n\tif ( !timers.length ) {                                                                                             // 7641\n\t\tjQuery.fx.stop();                                                                                                  // 7642\n\t}                                                                                                                   // 7643\n\tfxNow = undefined;                                                                                                  // 7644\n};                                                                                                                   // 7645\n                                                                                                                     // 7646\njQuery.fx.timer = function( timer ) {                                                                                // 7647\n\tjQuery.timers.push( timer );                                                                                        // 7648\n\tif ( timer() ) {                                                                                                    // 7649\n\t\tjQuery.fx.start();                                                                                                 // 7650\n\t} else {                                                                                                            // 7651\n\t\tjQuery.timers.pop();                                                                                               // 7652\n\t}                                                                                                                   // 7653\n};                                                                                                                   // 7654\n                                                                                                                     // 7655\njQuery.fx.interval = 13;                                                                                             // 7656\n                                                                                                                     // 7657\njQuery.fx.start = function() {                                                                                       // 7658\n\tif ( !timerId ) {                                                                                                   // 7659\n\t\ttimerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );                                                       // 7660\n\t}                                                                                                                   // 7661\n};                                                                                                                   // 7662\n                                                                                                                     // 7663\njQuery.fx.stop = function() {                                                                                        // 7664\n\tclearInterval( timerId );                                                                                           // 7665\n\ttimerId = null;                                                                                                     // 7666\n};                                                                                                                   // 7667\n                                                                                                                     // 7668\njQuery.fx.speeds = {                                                                                                 // 7669\n\tslow: 600,                                                                                                          // 7670\n\tfast: 200,                                                                                                          // 7671\n\t// Default speed                                                                                                    // 7672\n\t_default: 400                                                                                                       // 7673\n};                                                                                                                   // 7674\n                                                                                                                     // 7675\n                                                                                                                     // 7676\n// Based off of the plugin by Clint Helfers, with permission.                                                        // 7677\n// http://blindsignals.com/index.php/2009/07/jquery-delay/                                                           // 7678\njQuery.fn.delay = function( time, type ) {                                                                           // 7679\n\ttime = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;                                                         // 7680\n\ttype = type || \"fx\";                                                                                                // 7681\n                                                                                                                     // 7682\n\treturn this.queue( type, function( next, hooks ) {                                                                  // 7683\n\t\tvar timeout = setTimeout( next, time );                                                                            // 7684\n\t\thooks.stop = function() {                                                                                          // 7685\n\t\t\tclearTimeout( timeout );                                                                                          // 7686\n\t\t};                                                                                                                 // 7687\n\t});                                                                                                                 // 7688\n};                                                                                                                   // 7689\n                                                                                                                     // 7690\n                                                                                                                     // 7691\n(function() {                                                                                                        // 7692\n\tvar a, input, select, opt,                                                                                          // 7693\n\t\tdiv = document.createElement(\"div\" );                                                                              // 7694\n                                                                                                                     // 7695\n\t// Setup                                                                                                            // 7696\n\tdiv.setAttribute( \"className\", \"t\" );                                                                               // 7697\n\tdiv.innerHTML = \"  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>\";                               // 7698\n\ta = div.getElementsByTagName(\"a\")[ 0 ];                                                                             // 7699\n                                                                                                                     // 7700\n\t// First batch of tests.                                                                                            // 7701\n\tselect = document.createElement(\"select\");                                                                          // 7702\n\topt = select.appendChild( document.createElement(\"option\") );                                                       // 7703\n\tinput = div.getElementsByTagName(\"input\")[ 0 ];                                                                     // 7704\n                                                                                                                     // 7705\n\ta.style.cssText = \"top:1px\";                                                                                        // 7706\n                                                                                                                     // 7707\n\t// Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)         // 7708\n\tsupport.getSetAttribute = div.className !== \"t\";                                                                    // 7709\n                                                                                                                     // 7710\n\t// Get the style information from getAttribute                                                                      // 7711\n\t// (IE uses .cssText instead)                                                                                       // 7712\n\tsupport.style = /top/.test( a.getAttribute(\"style\") );                                                              // 7713\n                                                                                                                     // 7714\n\t// Make sure that URLs aren't manipulated                                                                           // 7715\n\t// (IE normalizes it by default)                                                                                    // 7716\n\tsupport.hrefNormalized = a.getAttribute(\"href\") === \"/a\";                                                           // 7717\n                                                                                                                     // 7718\n\t// Check the default checkbox/radio value (\"\" on WebKit; \"on\" elsewhere)                                            // 7719\n\tsupport.checkOn = !!input.value;                                                                                    // 7720\n                                                                                                                     // 7721\n\t// Make sure that a selected-by-default option has a working selected property.                                     // 7722\n\t// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)                                       // 7723\n\tsupport.optSelected = opt.selected;                                                                                 // 7724\n                                                                                                                     // 7725\n\t// Tests for enctype support on a form (#6743)                                                                      // 7726\n\tsupport.enctype = !!document.createElement(\"form\").enctype;                                                         // 7727\n                                                                                                                     // 7728\n\t// Make sure that the options inside disabled selects aren't marked as disabled                                     // 7729\n\t// (WebKit marks them as disabled)                                                                                  // 7730\n\tselect.disabled = true;                                                                                             // 7731\n\tsupport.optDisabled = !opt.disabled;                                                                                // 7732\n                                                                                                                     // 7733\n\t// Support: IE8 only                                                                                                // 7734\n\t// Check if we can trust getAttribute(\"value\")                                                                      // 7735\n\tinput = document.createElement( \"input\" );                                                                          // 7736\n\tinput.setAttribute( \"value\", \"\" );                                                                                  // 7737\n\tsupport.input = input.getAttribute( \"value\" ) === \"\";                                                               // 7738\n                                                                                                                     // 7739\n\t// Check if an input maintains its value after becoming a radio                                                     // 7740\n\tinput.value = \"t\";                                                                                                  // 7741\n\tinput.setAttribute( \"type\", \"radio\" );                                                                              // 7742\n\tsupport.radioValue = input.value === \"t\";                                                                           // 7743\n                                                                                                                     // 7744\n\t// Null elements to avoid leaks in IE.                                                                              // 7745\n\ta = input = select = opt = div = null;                                                                              // 7746\n})();                                                                                                                // 7747\n                                                                                                                     // 7748\n                                                                                                                     // 7749\nvar rreturn = /\\r/g;                                                                                                 // 7750\n                                                                                                                     // 7751\njQuery.fn.extend({                                                                                                   // 7752\n\tval: function( value ) {                                                                                            // 7753\n\t\tvar hooks, ret, isFunction,                                                                                        // 7754\n\t\t\telem = this[0];                                                                                                   // 7755\n                                                                                                                     // 7756\n\t\tif ( !arguments.length ) {                                                                                         // 7757\n\t\t\tif ( elem ) {                                                                                                     // 7758\n\t\t\t\thooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];                          // 7759\n                                                                                                                     // 7760\n\t\t\t\tif ( hooks && \"get\" in hooks && (ret = hooks.get( elem, \"value\" )) !== undefined ) {                             // 7761\n\t\t\t\t\treturn ret;                                                                                                     // 7762\n\t\t\t\t}                                                                                                                // 7763\n                                                                                                                     // 7764\n\t\t\t\tret = elem.value;                                                                                                // 7765\n                                                                                                                     // 7766\n\t\t\t\treturn typeof ret === \"string\" ?                                                                                 // 7767\n\t\t\t\t\t// handle most common string cases                                                                              // 7768\n\t\t\t\t\tret.replace(rreturn, \"\") :                                                                                      // 7769\n\t\t\t\t\t// handle cases where value is null/undef or number                                                             // 7770\n\t\t\t\t\tret == null ? \"\" : ret;                                                                                         // 7771\n\t\t\t}                                                                                                                 // 7772\n                                                                                                                     // 7773\n\t\t\treturn;                                                                                                           // 7774\n\t\t}                                                                                                                  // 7775\n                                                                                                                     // 7776\n\t\tisFunction = jQuery.isFunction( value );                                                                           // 7777\n                                                                                                                     // 7778\n\t\treturn this.each(function( i ) {                                                                                   // 7779\n\t\t\tvar val;                                                                                                          // 7780\n                                                                                                                     // 7781\n\t\t\tif ( this.nodeType !== 1 ) {                                                                                      // 7782\n\t\t\t\treturn;                                                                                                          // 7783\n\t\t\t}                                                                                                                 // 7784\n                                                                                                                     // 7785\n\t\t\tif ( isFunction ) {                                                                                               // 7786\n\t\t\t\tval = value.call( this, i, jQuery( this ).val() );                                                               // 7787\n\t\t\t} else {                                                                                                          // 7788\n\t\t\t\tval = value;                                                                                                     // 7789\n\t\t\t}                                                                                                                 // 7790\n                                                                                                                     // 7791\n\t\t\t// Treat null/undefined as \"\"; convert numbers to string                                                          // 7792\n\t\t\tif ( val == null ) {                                                                                              // 7793\n\t\t\t\tval = \"\";                                                                                                        // 7794\n\t\t\t} else if ( typeof val === \"number\" ) {                                                                           // 7795\n\t\t\t\tval += \"\";                                                                                                       // 7796\n\t\t\t} else if ( jQuery.isArray( val ) ) {                                                                             // 7797\n\t\t\t\tval = jQuery.map( val, function( value ) {                                                                       // 7798\n\t\t\t\t\treturn value == null ? \"\" : value + \"\";                                                                         // 7799\n\t\t\t\t});                                                                                                              // 7800\n\t\t\t}                                                                                                                 // 7801\n                                                                                                                     // 7802\n\t\t\thooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];                           // 7803\n                                                                                                                     // 7804\n\t\t\t// If set returns undefined, fall back to normal setting                                                          // 7805\n\t\t\tif ( !hooks || !(\"set\" in hooks) || hooks.set( this, val, \"value\" ) === undefined ) {                             // 7806\n\t\t\t\tthis.value = val;                                                                                                // 7807\n\t\t\t}                                                                                                                 // 7808\n\t\t});                                                                                                                // 7809\n\t}                                                                                                                   // 7810\n});                                                                                                                  // 7811\n                                                                                                                     // 7812\njQuery.extend({                                                                                                      // 7813\n\tvalHooks: {                                                                                                         // 7814\n\t\toption: {                                                                                                          // 7815\n\t\t\tget: function( elem ) {                                                                                           // 7816\n\t\t\t\tvar val = jQuery.find.attr( elem, \"value\" );                                                                     // 7817\n\t\t\t\treturn val != null ?                                                                                             // 7818\n\t\t\t\t\tval :                                                                                                           // 7819\n\t\t\t\t\tjQuery.text( elem );                                                                                            // 7820\n\t\t\t}                                                                                                                 // 7821\n\t\t},                                                                                                                 // 7822\n\t\tselect: {                                                                                                          // 7823\n\t\t\tget: function( elem ) {                                                                                           // 7824\n\t\t\t\tvar value, option,                                                                                               // 7825\n\t\t\t\t\toptions = elem.options,                                                                                         // 7826\n\t\t\t\t\tindex = elem.selectedIndex,                                                                                     // 7827\n\t\t\t\t\tone = elem.type === \"select-one\" || index < 0,                                                                  // 7828\n\t\t\t\t\tvalues = one ? null : [],                                                                                       // 7829\n\t\t\t\t\tmax = one ? index + 1 : options.length,                                                                         // 7830\n\t\t\t\t\ti = index < 0 ?                                                                                                 // 7831\n\t\t\t\t\t\tmax :                                                                                                          // 7832\n\t\t\t\t\t\tone ? index : 0;                                                                                               // 7833\n                                                                                                                     // 7834\n\t\t\t\t// Loop through all the selected options                                                                         // 7835\n\t\t\t\tfor ( ; i < max; i++ ) {                                                                                         // 7836\n\t\t\t\t\toption = options[ i ];                                                                                          // 7837\n                                                                                                                     // 7838\n\t\t\t\t\t// oldIE doesn't update selected after form reset (#2551)                                                       // 7839\n\t\t\t\t\tif ( ( option.selected || i === index ) &&                                                                      // 7840\n\t\t\t\t\t\t\t// Don't return options that are disabled or in a disabled optgroup                                           // 7841\n\t\t\t\t\t\t\t( support.optDisabled ? !option.disabled : option.getAttribute(\"disabled\") === null ) &&                      // 7842\n\t\t\t\t\t\t\t( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, \"optgroup\" ) ) ) {                      // 7843\n                                                                                                                     // 7844\n\t\t\t\t\t\t// Get the specific value for the option                                                                       // 7845\n\t\t\t\t\t\tvalue = jQuery( option ).val();                                                                                // 7846\n                                                                                                                     // 7847\n\t\t\t\t\t\t// We don't need an array for one selects                                                                      // 7848\n\t\t\t\t\t\tif ( one ) {                                                                                                   // 7849\n\t\t\t\t\t\t\treturn value;                                                                                                 // 7850\n\t\t\t\t\t\t}                                                                                                              // 7851\n                                                                                                                     // 7852\n\t\t\t\t\t\t// Multi-Selects return an array                                                                               // 7853\n\t\t\t\t\t\tvalues.push( value );                                                                                          // 7854\n\t\t\t\t\t}                                                                                                               // 7855\n\t\t\t\t}                                                                                                                // 7856\n                                                                                                                     // 7857\n\t\t\t\treturn values;                                                                                                   // 7858\n\t\t\t},                                                                                                                // 7859\n                                                                                                                     // 7860\n\t\t\tset: function( elem, value ) {                                                                                    // 7861\n\t\t\t\tvar optionSet, option,                                                                                           // 7862\n\t\t\t\t\toptions = elem.options,                                                                                         // 7863\n\t\t\t\t\tvalues = jQuery.makeArray( value ),                                                                             // 7864\n\t\t\t\t\ti = options.length;                                                                                             // 7865\n                                                                                                                     // 7866\n\t\t\t\twhile ( i-- ) {                                                                                                  // 7867\n\t\t\t\t\toption = options[ i ];                                                                                          // 7868\n                                                                                                                     // 7869\n\t\t\t\t\tif ( jQuery.inArray( jQuery.valHooks.option.get( option ), values ) >= 0 ) {                                    // 7870\n                                                                                                                     // 7871\n\t\t\t\t\t\t// Support: IE6                                                                                                // 7872\n\t\t\t\t\t\t// When new option element is added to select box we need to                                                   // 7873\n\t\t\t\t\t\t// force reflow of newly added node in order to workaround delay                                               // 7874\n\t\t\t\t\t\t// of initialization properties                                                                                // 7875\n\t\t\t\t\t\ttry {                                                                                                          // 7876\n\t\t\t\t\t\t\toption.selected = optionSet = true;                                                                           // 7877\n                                                                                                                     // 7878\n\t\t\t\t\t\t} catch ( _ ) {                                                                                                // 7879\n                                                                                                                     // 7880\n\t\t\t\t\t\t\t// Will be executed only in IE6                                                                               // 7881\n\t\t\t\t\t\t\toption.scrollHeight;                                                                                          // 7882\n\t\t\t\t\t\t}                                                                                                              // 7883\n                                                                                                                     // 7884\n\t\t\t\t\t} else {                                                                                                        // 7885\n\t\t\t\t\t\toption.selected = false;                                                                                       // 7886\n\t\t\t\t\t}                                                                                                               // 7887\n\t\t\t\t}                                                                                                                // 7888\n                                                                                                                     // 7889\n\t\t\t\t// Force browsers to behave consistently when non-matching value is set                                          // 7890\n\t\t\t\tif ( !optionSet ) {                                                                                              // 7891\n\t\t\t\t\telem.selectedIndex = -1;                                                                                        // 7892\n\t\t\t\t}                                                                                                                // 7893\n                                                                                                                     // 7894\n\t\t\t\treturn options;                                                                                                  // 7895\n\t\t\t}                                                                                                                 // 7896\n\t\t}                                                                                                                  // 7897\n\t}                                                                                                                   // 7898\n});                                                                                                                  // 7899\n                                                                                                                     // 7900\n// Radios and checkboxes getter/setter                                                                               // 7901\njQuery.each([ \"radio\", \"checkbox\" ], function() {                                                                    // 7902\n\tjQuery.valHooks[ this ] = {                                                                                         // 7903\n\t\tset: function( elem, value ) {                                                                                     // 7904\n\t\t\tif ( jQuery.isArray( value ) ) {                                                                                  // 7905\n\t\t\t\treturn ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );                                      // 7906\n\t\t\t}                                                                                                                 // 7907\n\t\t}                                                                                                                  // 7908\n\t};                                                                                                                  // 7909\n\tif ( !support.checkOn ) {                                                                                           // 7910\n\t\tjQuery.valHooks[ this ].get = function( elem ) {                                                                   // 7911\n\t\t\t// Support: Webkit                                                                                                // 7912\n\t\t\t// \"\" is returned instead of \"on\" if a value isn't specified                                                      // 7913\n\t\t\treturn elem.getAttribute(\"value\") === null ? \"on\" : elem.value;                                                   // 7914\n\t\t};                                                                                                                 // 7915\n\t}                                                                                                                   // 7916\n});                                                                                                                  // 7917\n                                                                                                                     // 7918\n                                                                                                                     // 7919\n                                                                                                                     // 7920\n                                                                                                                     // 7921\nvar nodeHook, boolHook,                                                                                              // 7922\n\tattrHandle = jQuery.expr.attrHandle,                                                                                // 7923\n\truseDefault = /^(?:checked|selected)$/i,                                                                            // 7924\n\tgetSetAttribute = support.getSetAttribute,                                                                          // 7925\n\tgetSetInput = support.input;                                                                                        // 7926\n                                                                                                                     // 7927\njQuery.fn.extend({                                                                                                   // 7928\n\tattr: function( name, value ) {                                                                                     // 7929\n\t\treturn access( this, jQuery.attr, name, value, arguments.length > 1 );                                             // 7930\n\t},                                                                                                                  // 7931\n                                                                                                                     // 7932\n\tremoveAttr: function( name ) {                                                                                      // 7933\n\t\treturn this.each(function() {                                                                                      // 7934\n\t\t\tjQuery.removeAttr( this, name );                                                                                  // 7935\n\t\t});                                                                                                                // 7936\n\t}                                                                                                                   // 7937\n});                                                                                                                  // 7938\n                                                                                                                     // 7939\njQuery.extend({                                                                                                      // 7940\n\tattr: function( elem, name, value ) {                                                                               // 7941\n\t\tvar hooks, ret,                                                                                                    // 7942\n\t\t\tnType = elem.nodeType;                                                                                            // 7943\n                                                                                                                     // 7944\n\t\t// don't get/set attributes on text, comment and attribute nodes                                                   // 7945\n\t\tif ( !elem || nType === 3 || nType === 8 || nType === 2 ) {                                                        // 7946\n\t\t\treturn;                                                                                                           // 7947\n\t\t}                                                                                                                  // 7948\n                                                                                                                     // 7949\n\t\t// Fallback to prop when attributes are not supported                                                              // 7950\n\t\tif ( typeof elem.getAttribute === strundefined ) {                                                                 // 7951\n\t\t\treturn jQuery.prop( elem, name, value );                                                                          // 7952\n\t\t}                                                                                                                  // 7953\n                                                                                                                     // 7954\n\t\t// All attributes are lowercase                                                                                    // 7955\n\t\t// Grab necessary hook if one is defined                                                                           // 7956\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {                                                                   // 7957\n\t\t\tname = name.toLowerCase();                                                                                        // 7958\n\t\t\thooks = jQuery.attrHooks[ name ] ||                                                                               // 7959\n\t\t\t\t( jQuery.expr.match.bool.test( name ) ? boolHook : nodeHook );                                                   // 7960\n\t\t}                                                                                                                  // 7961\n                                                                                                                     // 7962\n\t\tif ( value !== undefined ) {                                                                                       // 7963\n                                                                                                                     // 7964\n\t\t\tif ( value === null ) {                                                                                           // 7965\n\t\t\t\tjQuery.removeAttr( elem, name );                                                                                 // 7966\n                                                                                                                     // 7967\n\t\t\t} else if ( hooks && \"set\" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {                   // 7968\n\t\t\t\treturn ret;                                                                                                      // 7969\n                                                                                                                     // 7970\n\t\t\t} else {                                                                                                          // 7971\n\t\t\t\telem.setAttribute( name, value + \"\" );                                                                           // 7972\n\t\t\t\treturn value;                                                                                                    // 7973\n\t\t\t}                                                                                                                 // 7974\n                                                                                                                     // 7975\n\t\t} else if ( hooks && \"get\" in hooks && (ret = hooks.get( elem, name )) !== null ) {                                // 7976\n\t\t\treturn ret;                                                                                                       // 7977\n                                                                                                                     // 7978\n\t\t} else {                                                                                                           // 7979\n\t\t\tret = jQuery.find.attr( elem, name );                                                                             // 7980\n                                                                                                                     // 7981\n\t\t\t// Non-existent attributes return null, we normalize to undefined                                                 // 7982\n\t\t\treturn ret == null ?                                                                                              // 7983\n\t\t\t\tundefined :                                                                                                      // 7984\n\t\t\t\tret;                                                                                                             // 7985\n\t\t}                                                                                                                  // 7986\n\t},                                                                                                                  // 7987\n                                                                                                                     // 7988\n\tremoveAttr: function( elem, value ) {                                                                               // 7989\n\t\tvar name, propName,                                                                                                // 7990\n\t\t\ti = 0,                                                                                                            // 7991\n\t\t\tattrNames = value && value.match( rnotwhite );                                                                    // 7992\n                                                                                                                     // 7993\n\t\tif ( attrNames && elem.nodeType === 1 ) {                                                                          // 7994\n\t\t\twhile ( (name = attrNames[i++]) ) {                                                                               // 7995\n\t\t\t\tpropName = jQuery.propFix[ name ] || name;                                                                       // 7996\n                                                                                                                     // 7997\n\t\t\t\t// Boolean attributes get special treatment (#10870)                                                             // 7998\n\t\t\t\tif ( jQuery.expr.match.bool.test( name ) ) {                                                                     // 7999\n\t\t\t\t\t// Set corresponding property to false                                                                          // 8000\n\t\t\t\t\tif ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {                                            // 8001\n\t\t\t\t\t\telem[ propName ] = false;                                                                                      // 8002\n\t\t\t\t\t// Support: IE<9                                                                                                // 8003\n\t\t\t\t\t// Also clear defaultChecked/defaultSelected (if appropriate)                                                   // 8004\n\t\t\t\t\t} else {                                                                                                        // 8005\n\t\t\t\t\t\telem[ jQuery.camelCase( \"default-\" + name ) ] =                                                                // 8006\n\t\t\t\t\t\t\telem[ propName ] = false;                                                                                     // 8007\n\t\t\t\t\t}                                                                                                               // 8008\n                                                                                                                     // 8009\n\t\t\t\t// See #9699 for explanation of this approach (setting first, then removal)                                      // 8010\n\t\t\t\t} else {                                                                                                         // 8011\n\t\t\t\t\tjQuery.attr( elem, name, \"\" );                                                                                  // 8012\n\t\t\t\t}                                                                                                                // 8013\n                                                                                                                     // 8014\n\t\t\t\telem.removeAttribute( getSetAttribute ? name : propName );                                                       // 8015\n\t\t\t}                                                                                                                 // 8016\n\t\t}                                                                                                                  // 8017\n\t},                                                                                                                  // 8018\n                                                                                                                     // 8019\n\tattrHooks: {                                                                                                        // 8020\n\t\ttype: {                                                                                                            // 8021\n\t\t\tset: function( elem, value ) {                                                                                    // 8022\n\t\t\t\tif ( !support.radioValue && value === \"radio\" && jQuery.nodeName(elem, \"input\") ) {                              // 8023\n\t\t\t\t\t// Setting the type on a radio button after the value resets the value in IE6-9                                 // 8024\n\t\t\t\t\t// Reset value to default in case type is set after value during creation                                       // 8025\n\t\t\t\t\tvar val = elem.value;                                                                                           // 8026\n\t\t\t\t\telem.setAttribute( \"type\", value );                                                                             // 8027\n\t\t\t\t\tif ( val ) {                                                                                                    // 8028\n\t\t\t\t\t\telem.value = val;                                                                                              // 8029\n\t\t\t\t\t}                                                                                                               // 8030\n\t\t\t\t\treturn value;                                                                                                   // 8031\n\t\t\t\t}                                                                                                                // 8032\n\t\t\t}                                                                                                                 // 8033\n\t\t}                                                                                                                  // 8034\n\t}                                                                                                                   // 8035\n});                                                                                                                  // 8036\n                                                                                                                     // 8037\n// Hook for boolean attributes                                                                                       // 8038\nboolHook = {                                                                                                         // 8039\n\tset: function( elem, value, name ) {                                                                                // 8040\n\t\tif ( value === false ) {                                                                                           // 8041\n\t\t\t// Remove boolean attributes when set to false                                                                    // 8042\n\t\t\tjQuery.removeAttr( elem, name );                                                                                  // 8043\n\t\t} else if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {                                        // 8044\n\t\t\t// IE<8 needs the *property* name                                                                                 // 8045\n\t\t\telem.setAttribute( !getSetAttribute && jQuery.propFix[ name ] || name, name );                                    // 8046\n                                                                                                                     // 8047\n\t\t// Use defaultChecked and defaultSelected for oldIE                                                                // 8048\n\t\t} else {                                                                                                           // 8049\n\t\t\telem[ jQuery.camelCase( \"default-\" + name ) ] = elem[ name ] = true;                                              // 8050\n\t\t}                                                                                                                  // 8051\n                                                                                                                     // 8052\n\t\treturn name;                                                                                                       // 8053\n\t}                                                                                                                   // 8054\n};                                                                                                                   // 8055\n                                                                                                                     // 8056\n// Retrieve booleans specially                                                                                       // 8057\njQuery.each( jQuery.expr.match.bool.source.match( /\\w+/g ), function( i, name ) {                                    // 8058\n                                                                                                                     // 8059\n\tvar getter = attrHandle[ name ] || jQuery.find.attr;                                                                // 8060\n                                                                                                                     // 8061\n\tattrHandle[ name ] = getSetInput && getSetAttribute || !ruseDefault.test( name ) ?                                  // 8062\n\t\tfunction( elem, name, isXML ) {                                                                                    // 8063\n\t\t\tvar ret, handle;                                                                                                  // 8064\n\t\t\tif ( !isXML ) {                                                                                                   // 8065\n\t\t\t\t// Avoid an infinite loop by temporarily removing this function from the getter                                  // 8066\n\t\t\t\thandle = attrHandle[ name ];                                                                                     // 8067\n\t\t\t\tattrHandle[ name ] = ret;                                                                                        // 8068\n\t\t\t\tret = getter( elem, name, isXML ) != null ?                                                                      // 8069\n\t\t\t\t\tname.toLowerCase() :                                                                                            // 8070\n\t\t\t\t\tnull;                                                                                                           // 8071\n\t\t\t\tattrHandle[ name ] = handle;                                                                                     // 8072\n\t\t\t}                                                                                                                 // 8073\n\t\t\treturn ret;                                                                                                       // 8074\n\t\t} :                                                                                                                // 8075\n\t\tfunction( elem, name, isXML ) {                                                                                    // 8076\n\t\t\tif ( !isXML ) {                                                                                                   // 8077\n\t\t\t\treturn elem[ jQuery.camelCase( \"default-\" + name ) ] ?                                                           // 8078\n\t\t\t\t\tname.toLowerCase() :                                                                                            // 8079\n\t\t\t\t\tnull;                                                                                                           // 8080\n\t\t\t}                                                                                                                 // 8081\n\t\t};                                                                                                                 // 8082\n});                                                                                                                  // 8083\n                                                                                                                     // 8084\n// fix oldIE attroperties                                                                                            // 8085\nif ( !getSetInput || !getSetAttribute ) {                                                                            // 8086\n\tjQuery.attrHooks.value = {                                                                                          // 8087\n\t\tset: function( elem, value, name ) {                                                                               // 8088\n\t\t\tif ( jQuery.nodeName( elem, \"input\" ) ) {                                                                         // 8089\n\t\t\t\t// Does not return so that setAttribute is also used                                                             // 8090\n\t\t\t\telem.defaultValue = value;                                                                                       // 8091\n\t\t\t} else {                                                                                                          // 8092\n\t\t\t\t// Use nodeHook if defined (#1954); otherwise setAttribute is fine                                               // 8093\n\t\t\t\treturn nodeHook && nodeHook.set( elem, value, name );                                                            // 8094\n\t\t\t}                                                                                                                 // 8095\n\t\t}                                                                                                                  // 8096\n\t};                                                                                                                  // 8097\n}                                                                                                                    // 8098\n                                                                                                                     // 8099\n// IE6/7 do not support getting/setting some attributes with get/setAttribute                                        // 8100\nif ( !getSetAttribute ) {                                                                                            // 8101\n                                                                                                                     // 8102\n\t// Use this for any attribute in IE6/7                                                                              // 8103\n\t// This fixes almost every IE6/7 issue                                                                              // 8104\n\tnodeHook = {                                                                                                        // 8105\n\t\tset: function( elem, value, name ) {                                                                               // 8106\n\t\t\t// Set the existing or create a new attribute node                                                                // 8107\n\t\t\tvar ret = elem.getAttributeNode( name );                                                                          // 8108\n\t\t\tif ( !ret ) {                                                                                                     // 8109\n\t\t\t\telem.setAttributeNode(                                                                                           // 8110\n\t\t\t\t\t(ret = elem.ownerDocument.createAttribute( name ))                                                              // 8111\n\t\t\t\t);                                                                                                               // 8112\n\t\t\t}                                                                                                                 // 8113\n                                                                                                                     // 8114\n\t\t\tret.value = value += \"\";                                                                                          // 8115\n                                                                                                                     // 8116\n\t\t\t// Break association with cloned elements by also using setAttribute (#9646)                                      // 8117\n\t\t\tif ( name === \"value\" || value === elem.getAttribute( name ) ) {                                                  // 8118\n\t\t\t\treturn value;                                                                                                    // 8119\n\t\t\t}                                                                                                                 // 8120\n\t\t}                                                                                                                  // 8121\n\t};                                                                                                                  // 8122\n                                                                                                                     // 8123\n\t// Some attributes are constructed with empty-string values when not defined                                        // 8124\n\tattrHandle.id = attrHandle.name = attrHandle.coords =                                                               // 8125\n\t\tfunction( elem, name, isXML ) {                                                                                    // 8126\n\t\t\tvar ret;                                                                                                          // 8127\n\t\t\tif ( !isXML ) {                                                                                                   // 8128\n\t\t\t\treturn (ret = elem.getAttributeNode( name )) && ret.value !== \"\" ?                                               // 8129\n\t\t\t\t\tret.value :                                                                                                     // 8130\n\t\t\t\t\tnull;                                                                                                           // 8131\n\t\t\t}                                                                                                                 // 8132\n\t\t};                                                                                                                 // 8133\n                                                                                                                     // 8134\n\t// Fixing value retrieval on a button requires this module                                                          // 8135\n\tjQuery.valHooks.button = {                                                                                          // 8136\n\t\tget: function( elem, name ) {                                                                                      // 8137\n\t\t\tvar ret = elem.getAttributeNode( name );                                                                          // 8138\n\t\t\tif ( ret && ret.specified ) {                                                                                     // 8139\n\t\t\t\treturn ret.value;                                                                                                // 8140\n\t\t\t}                                                                                                                 // 8141\n\t\t},                                                                                                                 // 8142\n\t\tset: nodeHook.set                                                                                                  // 8143\n\t};                                                                                                                  // 8144\n                                                                                                                     // 8145\n\t// Set contenteditable to false on removals(#10429)                                                                 // 8146\n\t// Setting to empty string throws an error as an invalid value                                                      // 8147\n\tjQuery.attrHooks.contenteditable = {                                                                                // 8148\n\t\tset: function( elem, value, name ) {                                                                               // 8149\n\t\t\tnodeHook.set( elem, value === \"\" ? false : value, name );                                                         // 8150\n\t\t}                                                                                                                  // 8151\n\t};                                                                                                                  // 8152\n                                                                                                                     // 8153\n\t// Set width and height to auto instead of 0 on empty string( Bug #8150 )                                           // 8154\n\t// This is for removals                                                                                             // 8155\n\tjQuery.each([ \"width\", \"height\" ], function( i, name ) {                                                            // 8156\n\t\tjQuery.attrHooks[ name ] = {                                                                                       // 8157\n\t\t\tset: function( elem, value ) {                                                                                    // 8158\n\t\t\t\tif ( value === \"\" ) {                                                                                            // 8159\n\t\t\t\t\telem.setAttribute( name, \"auto\" );                                                                              // 8160\n\t\t\t\t\treturn value;                                                                                                   // 8161\n\t\t\t\t}                                                                                                                // 8162\n\t\t\t}                                                                                                                 // 8163\n\t\t};                                                                                                                 // 8164\n\t});                                                                                                                 // 8165\n}                                                                                                                    // 8166\n                                                                                                                     // 8167\nif ( !support.style ) {                                                                                              // 8168\n\tjQuery.attrHooks.style = {                                                                                          // 8169\n\t\tget: function( elem ) {                                                                                            // 8170\n\t\t\t// Return undefined in the case of empty string                                                                   // 8171\n\t\t\t// Note: IE uppercases css property names, but if we were to .toLowerCase()                                       // 8172\n\t\t\t// .cssText, that would destroy case senstitivity in URL's, like in \"background\"                                  // 8173\n\t\t\treturn elem.style.cssText || undefined;                                                                           // 8174\n\t\t},                                                                                                                 // 8175\n\t\tset: function( elem, value ) {                                                                                     // 8176\n\t\t\treturn ( elem.style.cssText = value + \"\" );                                                                       // 8177\n\t\t}                                                                                                                  // 8178\n\t};                                                                                                                  // 8179\n}                                                                                                                    // 8180\n                                                                                                                     // 8181\n                                                                                                                     // 8182\n                                                                                                                     // 8183\n                                                                                                                     // 8184\nvar rfocusable = /^(?:input|select|textarea|button|object)$/i,                                                       // 8185\n\trclickable = /^(?:a|area)$/i;                                                                                       // 8186\n                                                                                                                     // 8187\njQuery.fn.extend({                                                                                                   // 8188\n\tprop: function( name, value ) {                                                                                     // 8189\n\t\treturn access( this, jQuery.prop, name, value, arguments.length > 1 );                                             // 8190\n\t},                                                                                                                  // 8191\n                                                                                                                     // 8192\n\tremoveProp: function( name ) {                                                                                      // 8193\n\t\tname = jQuery.propFix[ name ] || name;                                                                             // 8194\n\t\treturn this.each(function() {                                                                                      // 8195\n\t\t\t// try/catch handles cases where IE balks (such as removing a property on window)                                 // 8196\n\t\t\ttry {                                                                                                             // 8197\n\t\t\t\tthis[ name ] = undefined;                                                                                        // 8198\n\t\t\t\tdelete this[ name ];                                                                                             // 8199\n\t\t\t} catch( e ) {}                                                                                                   // 8200\n\t\t});                                                                                                                // 8201\n\t}                                                                                                                   // 8202\n});                                                                                                                  // 8203\n                                                                                                                     // 8204\njQuery.extend({                                                                                                      // 8205\n\tpropFix: {                                                                                                          // 8206\n\t\t\"for\": \"htmlFor\",                                                                                                  // 8207\n\t\t\"class\": \"className\"                                                                                               // 8208\n\t},                                                                                                                  // 8209\n                                                                                                                     // 8210\n\tprop: function( elem, name, value ) {                                                                               // 8211\n\t\tvar ret, hooks, notxml,                                                                                            // 8212\n\t\t\tnType = elem.nodeType;                                                                                            // 8213\n                                                                                                                     // 8214\n\t\t// don't get/set properties on text, comment and attribute nodes                                                   // 8215\n\t\tif ( !elem || nType === 3 || nType === 8 || nType === 2 ) {                                                        // 8216\n\t\t\treturn;                                                                                                           // 8217\n\t\t}                                                                                                                  // 8218\n                                                                                                                     // 8219\n\t\tnotxml = nType !== 1 || !jQuery.isXMLDoc( elem );                                                                  // 8220\n                                                                                                                     // 8221\n\t\tif ( notxml ) {                                                                                                    // 8222\n\t\t\t// Fix name and attach hooks                                                                                      // 8223\n\t\t\tname = jQuery.propFix[ name ] || name;                                                                            // 8224\n\t\t\thooks = jQuery.propHooks[ name ];                                                                                 // 8225\n\t\t}                                                                                                                  // 8226\n                                                                                                                     // 8227\n\t\tif ( value !== undefined ) {                                                                                       // 8228\n\t\t\treturn hooks && \"set\" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ?                          // 8229\n\t\t\t\tret :                                                                                                            // 8230\n\t\t\t\t( elem[ name ] = value );                                                                                        // 8231\n                                                                                                                     // 8232\n\t\t} else {                                                                                                           // 8233\n\t\t\treturn hooks && \"get\" in hooks && (ret = hooks.get( elem, name )) !== null ?                                      // 8234\n\t\t\t\tret :                                                                                                            // 8235\n\t\t\t\telem[ name ];                                                                                                    // 8236\n\t\t}                                                                                                                  // 8237\n\t},                                                                                                                  // 8238\n                                                                                                                     // 8239\n\tpropHooks: {                                                                                                        // 8240\n\t\ttabIndex: {                                                                                                        // 8241\n\t\t\tget: function( elem ) {                                                                                           // 8242\n\t\t\t\t// elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set                      // 8243\n\t\t\t\t// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/         // 8244\n\t\t\t\t// Use proper attribute retrieval(#12072)                                                                        // 8245\n\t\t\t\tvar tabindex = jQuery.find.attr( elem, \"tabindex\" );                                                             // 8246\n                                                                                                                     // 8247\n\t\t\t\treturn tabindex ?                                                                                                // 8248\n\t\t\t\t\tparseInt( tabindex, 10 ) :                                                                                      // 8249\n\t\t\t\t\trfocusable.test( elem.nodeName ) || rclickable.test( elem.nodeName ) && elem.href ?                             // 8250\n\t\t\t\t\t\t0 :                                                                                                            // 8251\n\t\t\t\t\t\t-1;                                                                                                            // 8252\n\t\t\t}                                                                                                                 // 8253\n\t\t}                                                                                                                  // 8254\n\t}                                                                                                                   // 8255\n});                                                                                                                  // 8256\n                                                                                                                     // 8257\n// Some attributes require a special call on IE                                                                      // 8258\n// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx                                                  // 8259\nif ( !support.hrefNormalized ) {                                                                                     // 8260\n\t// href/src property should get the full normalized URL (#10299/#12915)                                             // 8261\n\tjQuery.each([ \"href\", \"src\" ], function( i, name ) {                                                                // 8262\n\t\tjQuery.propHooks[ name ] = {                                                                                       // 8263\n\t\t\tget: function( elem ) {                                                                                           // 8264\n\t\t\t\treturn elem.getAttribute( name, 4 );                                                                             // 8265\n\t\t\t}                                                                                                                 // 8266\n\t\t};                                                                                                                 // 8267\n\t});                                                                                                                 // 8268\n}                                                                                                                    // 8269\n                                                                                                                     // 8270\n// Support: Safari, IE9+                                                                                             // 8271\n// mis-reports the default selected property of an option                                                            // 8272\n// Accessing the parent's selectedIndex property fixes it                                                            // 8273\nif ( !support.optSelected ) {                                                                                        // 8274\n\tjQuery.propHooks.selected = {                                                                                       // 8275\n\t\tget: function( elem ) {                                                                                            // 8276\n\t\t\tvar parent = elem.parentNode;                                                                                     // 8277\n                                                                                                                     // 8278\n\t\t\tif ( parent ) {                                                                                                   // 8279\n\t\t\t\tparent.selectedIndex;                                                                                            // 8280\n                                                                                                                     // 8281\n\t\t\t\t// Make sure that it also works with optgroups, see #5701                                                        // 8282\n\t\t\t\tif ( parent.parentNode ) {                                                                                       // 8283\n\t\t\t\t\tparent.parentNode.selectedIndex;                                                                                // 8284\n\t\t\t\t}                                                                                                                // 8285\n\t\t\t}                                                                                                                 // 8286\n\t\t\treturn null;                                                                                                      // 8287\n\t\t}                                                                                                                  // 8288\n\t};                                                                                                                  // 8289\n}                                                                                                                    // 8290\n                                                                                                                     // 8291\njQuery.each([                                                                                                        // 8292\n\t\"tabIndex\",                                                                                                         // 8293\n\t\"readOnly\",                                                                                                         // 8294\n\t\"maxLength\",                                                                                                        // 8295\n\t\"cellSpacing\",                                                                                                      // 8296\n\t\"cellPadding\",                                                                                                      // 8297\n\t\"rowSpan\",                                                                                                          // 8298\n\t\"colSpan\",                                                                                                          // 8299\n\t\"useMap\",                                                                                                           // 8300\n\t\"frameBorder\",                                                                                                      // 8301\n\t\"contentEditable\"                                                                                                   // 8302\n], function() {                                                                                                      // 8303\n\tjQuery.propFix[ this.toLowerCase() ] = this;                                                                        // 8304\n});                                                                                                                  // 8305\n                                                                                                                     // 8306\n// IE6/7 call enctype encoding                                                                                       // 8307\nif ( !support.enctype ) {                                                                                            // 8308\n\tjQuery.propFix.enctype = \"encoding\";                                                                                // 8309\n}                                                                                                                    // 8310\n                                                                                                                     // 8311\n                                                                                                                     // 8312\n                                                                                                                     // 8313\n                                                                                                                     // 8314\nvar rclass = /[\\t\\r\\n\\f]/g;                                                                                          // 8315\n                                                                                                                     // 8316\njQuery.fn.extend({                                                                                                   // 8317\n\taddClass: function( value ) {                                                                                       // 8318\n\t\tvar classes, elem, cur, clazz, j, finalValue,                                                                      // 8319\n\t\t\ti = 0,                                                                                                            // 8320\n\t\t\tlen = this.length,                                                                                                // 8321\n\t\t\tproceed = typeof value === \"string\" && value;                                                                     // 8322\n                                                                                                                     // 8323\n\t\tif ( jQuery.isFunction( value ) ) {                                                                                // 8324\n\t\t\treturn this.each(function( j ) {                                                                                  // 8325\n\t\t\t\tjQuery( this ).addClass( value.call( this, j, this.className ) );                                                // 8326\n\t\t\t});                                                                                                               // 8327\n\t\t}                                                                                                                  // 8328\n                                                                                                                     // 8329\n\t\tif ( proceed ) {                                                                                                   // 8330\n\t\t\t// The disjunction here is for better compressibility (see removeClass)                                           // 8331\n\t\t\tclasses = ( value || \"\" ).match( rnotwhite ) || [];                                                               // 8332\n                                                                                                                     // 8333\n\t\t\tfor ( ; i < len; i++ ) {                                                                                          // 8334\n\t\t\t\telem = this[ i ];                                                                                                // 8335\n\t\t\t\tcur = elem.nodeType === 1 && ( elem.className ?                                                                  // 8336\n\t\t\t\t\t( \" \" + elem.className + \" \" ).replace( rclass, \" \" ) :                                                         // 8337\n\t\t\t\t\t\" \"                                                                                                             // 8338\n\t\t\t\t);                                                                                                               // 8339\n                                                                                                                     // 8340\n\t\t\t\tif ( cur ) {                                                                                                     // 8341\n\t\t\t\t\tj = 0;                                                                                                          // 8342\n\t\t\t\t\twhile ( (clazz = classes[j++]) ) {                                                                              // 8343\n\t\t\t\t\t\tif ( cur.indexOf( \" \" + clazz + \" \" ) < 0 ) {                                                                  // 8344\n\t\t\t\t\t\t\tcur += clazz + \" \";                                                                                           // 8345\n\t\t\t\t\t\t}                                                                                                              // 8346\n\t\t\t\t\t}                                                                                                               // 8347\n                                                                                                                     // 8348\n\t\t\t\t\t// only assign if different to avoid unneeded rendering.                                                        // 8349\n\t\t\t\t\tfinalValue = jQuery.trim( cur );                                                                                // 8350\n\t\t\t\t\tif ( elem.className !== finalValue ) {                                                                          // 8351\n\t\t\t\t\t\telem.className = finalValue;                                                                                   // 8352\n\t\t\t\t\t}                                                                                                               // 8353\n\t\t\t\t}                                                                                                                // 8354\n\t\t\t}                                                                                                                 // 8355\n\t\t}                                                                                                                  // 8356\n                                                                                                                     // 8357\n\t\treturn this;                                                                                                       // 8358\n\t},                                                                                                                  // 8359\n                                                                                                                     // 8360\n\tremoveClass: function( value ) {                                                                                    // 8361\n\t\tvar classes, elem, cur, clazz, j, finalValue,                                                                      // 8362\n\t\t\ti = 0,                                                                                                            // 8363\n\t\t\tlen = this.length,                                                                                                // 8364\n\t\t\tproceed = arguments.length === 0 || typeof value === \"string\" && value;                                           // 8365\n                                                                                                                     // 8366\n\t\tif ( jQuery.isFunction( value ) ) {                                                                                // 8367\n\t\t\treturn this.each(function( j ) {                                                                                  // 8368\n\t\t\t\tjQuery( this ).removeClass( value.call( this, j, this.className ) );                                             // 8369\n\t\t\t});                                                                                                               // 8370\n\t\t}                                                                                                                  // 8371\n\t\tif ( proceed ) {                                                                                                   // 8372\n\t\t\tclasses = ( value || \"\" ).match( rnotwhite ) || [];                                                               // 8373\n                                                                                                                     // 8374\n\t\t\tfor ( ; i < len; i++ ) {                                                                                          // 8375\n\t\t\t\telem = this[ i ];                                                                                                // 8376\n\t\t\t\t// This expression is here for better compressibility (see addClass)                                             // 8377\n\t\t\t\tcur = elem.nodeType === 1 && ( elem.className ?                                                                  // 8378\n\t\t\t\t\t( \" \" + elem.className + \" \" ).replace( rclass, \" \" ) :                                                         // 8379\n\t\t\t\t\t\"\"                                                                                                              // 8380\n\t\t\t\t);                                                                                                               // 8381\n                                                                                                                     // 8382\n\t\t\t\tif ( cur ) {                                                                                                     // 8383\n\t\t\t\t\tj = 0;                                                                                                          // 8384\n\t\t\t\t\twhile ( (clazz = classes[j++]) ) {                                                                              // 8385\n\t\t\t\t\t\t// Remove *all* instances                                                                                      // 8386\n\t\t\t\t\t\twhile ( cur.indexOf( \" \" + clazz + \" \" ) >= 0 ) {                                                              // 8387\n\t\t\t\t\t\t\tcur = cur.replace( \" \" + clazz + \" \", \" \" );                                                                  // 8388\n\t\t\t\t\t\t}                                                                                                              // 8389\n\t\t\t\t\t}                                                                                                               // 8390\n                                                                                                                     // 8391\n\t\t\t\t\t// only assign if different to avoid unneeded rendering.                                                        // 8392\n\t\t\t\t\tfinalValue = value ? jQuery.trim( cur ) : \"\";                                                                   // 8393\n\t\t\t\t\tif ( elem.className !== finalValue ) {                                                                          // 8394\n\t\t\t\t\t\telem.className = finalValue;                                                                                   // 8395\n\t\t\t\t\t}                                                                                                               // 8396\n\t\t\t\t}                                                                                                                // 8397\n\t\t\t}                                                                                                                 // 8398\n\t\t}                                                                                                                  // 8399\n                                                                                                                     // 8400\n\t\treturn this;                                                                                                       // 8401\n\t},                                                                                                                  // 8402\n                                                                                                                     // 8403\n\ttoggleClass: function( value, stateVal ) {                                                                          // 8404\n\t\tvar type = typeof value;                                                                                           // 8405\n                                                                                                                     // 8406\n\t\tif ( typeof stateVal === \"boolean\" && type === \"string\" ) {                                                        // 8407\n\t\t\treturn stateVal ? this.addClass( value ) : this.removeClass( value );                                             // 8408\n\t\t}                                                                                                                  // 8409\n                                                                                                                     // 8410\n\t\tif ( jQuery.isFunction( value ) ) {                                                                                // 8411\n\t\t\treturn this.each(function( i ) {                                                                                  // 8412\n\t\t\t\tjQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );                           // 8413\n\t\t\t});                                                                                                               // 8414\n\t\t}                                                                                                                  // 8415\n                                                                                                                     // 8416\n\t\treturn this.each(function() {                                                                                      // 8417\n\t\t\tif ( type === \"string\" ) {                                                                                        // 8418\n\t\t\t\t// toggle individual class names                                                                                 // 8419\n\t\t\t\tvar className,                                                                                                   // 8420\n\t\t\t\t\ti = 0,                                                                                                          // 8421\n\t\t\t\t\tself = jQuery( this ),                                                                                          // 8422\n\t\t\t\t\tclassNames = value.match( rnotwhite ) || [];                                                                    // 8423\n                                                                                                                     // 8424\n\t\t\t\twhile ( (className = classNames[ i++ ]) ) {                                                                      // 8425\n\t\t\t\t\t// check each className given, space separated list                                                             // 8426\n\t\t\t\t\tif ( self.hasClass( className ) ) {                                                                             // 8427\n\t\t\t\t\t\tself.removeClass( className );                                                                                 // 8428\n\t\t\t\t\t} else {                                                                                                        // 8429\n\t\t\t\t\t\tself.addClass( className );                                                                                    // 8430\n\t\t\t\t\t}                                                                                                               // 8431\n\t\t\t\t}                                                                                                                // 8432\n                                                                                                                     // 8433\n\t\t\t// Toggle whole class name                                                                                        // 8434\n\t\t\t} else if ( type === strundefined || type === \"boolean\" ) {                                                       // 8435\n\t\t\t\tif ( this.className ) {                                                                                          // 8436\n\t\t\t\t\t// store className if set                                                                                       // 8437\n\t\t\t\t\tjQuery._data( this, \"__className__\", this.className );                                                          // 8438\n\t\t\t\t}                                                                                                                // 8439\n                                                                                                                     // 8440\n\t\t\t\t// If the element has a class name or if we're passed \"false\",                                                   // 8441\n\t\t\t\t// then remove the whole classname (if there was one, the above saved it).                                       // 8442\n\t\t\t\t// Otherwise bring back whatever was previously saved (if anything),                                             // 8443\n\t\t\t\t// falling back to the empty string if nothing was stored.                                                       // 8444\n\t\t\t\tthis.className = this.className || value === false ? \"\" : jQuery._data( this, \"__className__\" ) || \"\";           // 8445\n\t\t\t}                                                                                                                 // 8446\n\t\t});                                                                                                                // 8447\n\t},                                                                                                                  // 8448\n                                                                                                                     // 8449\n\thasClass: function( selector ) {                                                                                    // 8450\n\t\tvar className = \" \" + selector + \" \",                                                                              // 8451\n\t\t\ti = 0,                                                                                                            // 8452\n\t\t\tl = this.length;                                                                                                  // 8453\n\t\tfor ( ; i < l; i++ ) {                                                                                             // 8454\n\t\t\tif ( this[i].nodeType === 1 && (\" \" + this[i].className + \" \").replace(rclass, \" \").indexOf( className ) >= 0 ) { // 8455\n\t\t\t\treturn true;                                                                                                     // 8456\n\t\t\t}                                                                                                                 // 8457\n\t\t}                                                                                                                  // 8458\n                                                                                                                     // 8459\n\t\treturn false;                                                                                                      // 8460\n\t}                                                                                                                   // 8461\n});                                                                                                                  // 8462\n                                                                                                                     // 8463\n                                                                                                                     // 8464\n                                                                                                                     // 8465\n                                                                                                                     // 8466\n// Return jQuery for attributes-only inclusion                                                                       // 8467\n                                                                                                                     // 8468\n                                                                                                                     // 8469\njQuery.each( (\"blur focus focusin focusout load resize scroll unload click dblclick \" +                              // 8470\n\t\"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave \" +                                           // 8471\n\t\"change select submit keydown keypress keyup error contextmenu\").split(\" \"), function( i, name ) {                  // 8472\n                                                                                                                     // 8473\n\t// Handle event binding                                                                                             // 8474\n\tjQuery.fn[ name ] = function( data, fn ) {                                                                          // 8475\n\t\treturn arguments.length > 0 ?                                                                                      // 8476\n\t\t\tthis.on( name, null, data, fn ) :                                                                                 // 8477\n\t\t\tthis.trigger( name );                                                                                             // 8478\n\t};                                                                                                                  // 8479\n});                                                                                                                  // 8480\n                                                                                                                     // 8481\njQuery.fn.extend({                                                                                                   // 8482\n\thover: function( fnOver, fnOut ) {                                                                                  // 8483\n\t\treturn this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );                                                    // 8484\n\t},                                                                                                                  // 8485\n                                                                                                                     // 8486\n\tbind: function( types, data, fn ) {                                                                                 // 8487\n\t\treturn this.on( types, null, data, fn );                                                                           // 8488\n\t},                                                                                                                  // 8489\n\tunbind: function( types, fn ) {                                                                                     // 8490\n\t\treturn this.off( types, null, fn );                                                                                // 8491\n\t},                                                                                                                  // 8492\n                                                                                                                     // 8493\n\tdelegate: function( selector, types, data, fn ) {                                                                   // 8494\n\t\treturn this.on( types, selector, data, fn );                                                                       // 8495\n\t},                                                                                                                  // 8496\n\tundelegate: function( selector, types, fn ) {                                                                       // 8497\n\t\t// ( namespace ) or ( selector, types [, fn] )                                                                     // 8498\n\t\treturn arguments.length === 1 ? this.off( selector, \"**\" ) : this.off( types, selector || \"**\", fn );              // 8499\n\t}                                                                                                                   // 8500\n});                                                                                                                  // 8501\n                                                                                                                     // 8502\n                                                                                                                     // 8503\nvar nonce = jQuery.now();                                                                                            // 8504\n                                                                                                                     // 8505\nvar rquery = (/\\?/);                                                                                                 // 8506\n                                                                                                                     // 8507\n                                                                                                                     // 8508\n                                                                                                                     // 8509\nvar rvalidtokens = /(,)|(\\[|{)|(}|])|\"(?:[^\"\\\\\\r\\n]|\\\\[\"\\\\\\/bfnrt]|\\\\u[\\da-fA-F]{4})*\"\\s*:?|true|false|null|-?(?!0\\d)\\d+(?:\\.\\d+|)(?:[eE][+-]?\\d+|)/g;\n                                                                                                                     // 8511\njQuery.parseJSON = function( data ) {                                                                                // 8512\n\t// Attempt to parse using the native JSON parser first                                                              // 8513\n\tif ( window.JSON && window.JSON.parse ) {                                                                           // 8514\n\t\t// Support: Android 2.3                                                                                            // 8515\n\t\t// Workaround failure to string-cast null input                                                                    // 8516\n\t\treturn window.JSON.parse( data + \"\" );                                                                             // 8517\n\t}                                                                                                                   // 8518\n                                                                                                                     // 8519\n\tvar requireNonComma,                                                                                                // 8520\n\t\tdepth = null,                                                                                                      // 8521\n\t\tstr = jQuery.trim( data + \"\" );                                                                                    // 8522\n                                                                                                                     // 8523\n\t// Guard against invalid (and possibly dangerous) input by ensuring that nothing remains                            // 8524\n\t// after removing valid tokens                                                                                      // 8525\n\treturn str && !jQuery.trim( str.replace( rvalidtokens, function( token, comma, open, close ) {                      // 8526\n                                                                                                                     // 8527\n\t\t// Force termination if we see a misplaced comma                                                                   // 8528\n\t\tif ( requireNonComma && comma ) {                                                                                  // 8529\n\t\t\tdepth = 0;                                                                                                        // 8530\n\t\t}                                                                                                                  // 8531\n                                                                                                                     // 8532\n\t\t// Perform no more replacements after returning to outermost depth                                                 // 8533\n\t\tif ( depth === 0 ) {                                                                                               // 8534\n\t\t\treturn token;                                                                                                     // 8535\n\t\t}                                                                                                                  // 8536\n                                                                                                                     // 8537\n\t\t// Commas must not follow \"[\", \"{\", or \",\"                                                                         // 8538\n\t\trequireNonComma = open || comma;                                                                                   // 8539\n                                                                                                                     // 8540\n\t\t// Determine new depth                                                                                             // 8541\n\t\t// array/object open (\"[\" or \"{\"): depth += true - false (increment)                                               // 8542\n\t\t// array/object close (\"]\" or \"}\"): depth += false - true (decrement)                                              // 8543\n\t\t// other cases (\",\" or primitive): depth += true - true (numeric cast)                                             // 8544\n\t\tdepth += !close - !open;                                                                                           // 8545\n                                                                                                                     // 8546\n\t\t// Remove this token                                                                                               // 8547\n\t\treturn \"\";                                                                                                         // 8548\n\t}) ) ?                                                                                                              // 8549\n\t\t( Function( \"return \" + str ) )() :                                                                                // 8550\n\t\tjQuery.error( \"Invalid JSON: \" + data );                                                                           // 8551\n};                                                                                                                   // 8552\n                                                                                                                     // 8553\n                                                                                                                     // 8554\n// Cross-browser xml parsing                                                                                         // 8555\njQuery.parseXML = function( data ) {                                                                                 // 8556\n\tvar xml, tmp;                                                                                                       // 8557\n\tif ( !data || typeof data !== \"string\" ) {                                                                          // 8558\n\t\treturn null;                                                                                                       // 8559\n\t}                                                                                                                   // 8560\n\ttry {                                                                                                               // 8561\n\t\tif ( window.DOMParser ) { // Standard                                                                              // 8562\n\t\t\ttmp = new DOMParser();                                                                                            // 8563\n\t\t\txml = tmp.parseFromString( data, \"text/xml\" );                                                                    // 8564\n\t\t} else { // IE                                                                                                     // 8565\n\t\t\txml = new ActiveXObject( \"Microsoft.XMLDOM\" );                                                                    // 8566\n\t\t\txml.async = \"false\";                                                                                              // 8567\n\t\t\txml.loadXML( data );                                                                                              // 8568\n\t\t}                                                                                                                  // 8569\n\t} catch( e ) {                                                                                                      // 8570\n\t\txml = undefined;                                                                                                   // 8571\n\t}                                                                                                                   // 8572\n\tif ( !xml || !xml.documentElement || xml.getElementsByTagName( \"parsererror\" ).length ) {                           // 8573\n\t\tjQuery.error( \"Invalid XML: \" + data );                                                                            // 8574\n\t}                                                                                                                   // 8575\n\treturn xml;                                                                                                         // 8576\n};                                                                                                                   // 8577\n                                                                                                                     // 8578\n                                                                                                                     // 8579\nvar                                                                                                                  // 8580\n\t// Document location                                                                                                // 8581\n\tajaxLocParts,                                                                                                       // 8582\n\tajaxLocation,                                                                                                       // 8583\n                                                                                                                     // 8584\n\trhash = /#.*$/,                                                                                                     // 8585\n\trts = /([?&])_=[^&]*/,                                                                                              // 8586\n\trheaders = /^(.*?):[ \\t]*([^\\r\\n]*)\\r?$/mg, // IE leaves an \\r character at EOL                                     // 8587\n\t// #7653, #8125, #8152: local protocol detection                                                                    // 8588\n\trlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,                                       // 8589\n\trnoContent = /^(?:GET|HEAD)$/,                                                                                      // 8590\n\trprotocol = /^\\/\\//,                                                                                                // 8591\n\trurl = /^([\\w.+-]+:)(?:\\/\\/(?:[^\\/?#]*@|)([^\\/?#:]*)(?::(\\d+)|)|)/,                                                 // 8592\n                                                                                                                     // 8593\n\t/* Prefilters                                                                                                       // 8594\n\t * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)                              // 8595\n\t * 2) These are called:                                                                                             // 8596\n\t *    - BEFORE asking for a transport                                                                               // 8597\n\t *    - AFTER param serialization (s.data is a string if s.processData is true)                                     // 8598\n\t * 3) key is the dataType                                                                                           // 8599\n\t * 4) the catchall symbol \"*\" can be used                                                                           // 8600\n\t * 5) execution will start with transport dataType and THEN continue down to \"*\" if needed                          // 8601\n\t */                                                                                                                 // 8602\n\tprefilters = {},                                                                                                    // 8603\n                                                                                                                     // 8604\n\t/* Transports bindings                                                                                              // 8605\n\t * 1) key is the dataType                                                                                           // 8606\n\t * 2) the catchall symbol \"*\" can be used                                                                           // 8607\n\t * 3) selection will start with transport dataType and THEN go to \"*\" if needed                                     // 8608\n\t */                                                                                                                 // 8609\n\ttransports = {},                                                                                                    // 8610\n                                                                                                                     // 8611\n\t// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression                             // 8612\n\tallTypes = \"*/\".concat(\"*\");                                                                                        // 8613\n                                                                                                                     // 8614\n// #8138, IE may throw an exception when accessing                                                                   // 8615\n// a field from window.location if document.domain has been set                                                      // 8616\ntry {                                                                                                                // 8617\n\tajaxLocation = location.href;                                                                                       // 8618\n} catch( e ) {                                                                                                       // 8619\n\t// Use the href attribute of an A element                                                                           // 8620\n\t// since IE will modify it given document.location                                                                  // 8621\n\tajaxLocation = document.createElement( \"a\" );                                                                       // 8622\n\tajaxLocation.href = \"\";                                                                                             // 8623\n\tajaxLocation = ajaxLocation.href;                                                                                   // 8624\n}                                                                                                                    // 8625\n                                                                                                                     // 8626\n// Segment location into parts                                                                                       // 8627\najaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];                                                        // 8628\n                                                                                                                     // 8629\n// Base \"constructor\" for jQuery.ajaxPrefilter and jQuery.ajaxTransport                                              // 8630\nfunction addToPrefiltersOrTransports( structure ) {                                                                  // 8631\n                                                                                                                     // 8632\n\t// dataTypeExpression is optional and defaults to \"*\"                                                               // 8633\n\treturn function( dataTypeExpression, func ) {                                                                       // 8634\n                                                                                                                     // 8635\n\t\tif ( typeof dataTypeExpression !== \"string\" ) {                                                                    // 8636\n\t\t\tfunc = dataTypeExpression;                                                                                        // 8637\n\t\t\tdataTypeExpression = \"*\";                                                                                         // 8638\n\t\t}                                                                                                                  // 8639\n                                                                                                                     // 8640\n\t\tvar dataType,                                                                                                      // 8641\n\t\t\ti = 0,                                                                                                            // 8642\n\t\t\tdataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];                                            // 8643\n                                                                                                                     // 8644\n\t\tif ( jQuery.isFunction( func ) ) {                                                                                 // 8645\n\t\t\t// For each dataType in the dataTypeExpression                                                                    // 8646\n\t\t\twhile ( (dataType = dataTypes[i++]) ) {                                                                           // 8647\n\t\t\t\t// Prepend if requested                                                                                          // 8648\n\t\t\t\tif ( dataType.charAt( 0 ) === \"+\" ) {                                                                            // 8649\n\t\t\t\t\tdataType = dataType.slice( 1 ) || \"*\";                                                                          // 8650\n\t\t\t\t\t(structure[ dataType ] = structure[ dataType ] || []).unshift( func );                                          // 8651\n                                                                                                                     // 8652\n\t\t\t\t// Otherwise append                                                                                              // 8653\n\t\t\t\t} else {                                                                                                         // 8654\n\t\t\t\t\t(structure[ dataType ] = structure[ dataType ] || []).push( func );                                             // 8655\n\t\t\t\t}                                                                                                                // 8656\n\t\t\t}                                                                                                                 // 8657\n\t\t}                                                                                                                  // 8658\n\t};                                                                                                                  // 8659\n}                                                                                                                    // 8660\n                                                                                                                     // 8661\n// Base inspection function for prefilters and transports                                                            // 8662\nfunction inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {                               // 8663\n                                                                                                                     // 8664\n\tvar inspected = {},                                                                                                 // 8665\n\t\tseekingTransport = ( structure === transports );                                                                   // 8666\n                                                                                                                     // 8667\n\tfunction inspect( dataType ) {                                                                                      // 8668\n\t\tvar selected;                                                                                                      // 8669\n\t\tinspected[ dataType ] = true;                                                                                      // 8670\n\t\tjQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {                                      // 8671\n\t\t\tvar dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );                                  // 8672\n\t\t\tif ( typeof dataTypeOrTransport === \"string\" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {        // 8673\n\t\t\t\toptions.dataTypes.unshift( dataTypeOrTransport );                                                                // 8674\n\t\t\t\tinspect( dataTypeOrTransport );                                                                                  // 8675\n\t\t\t\treturn false;                                                                                                    // 8676\n\t\t\t} else if ( seekingTransport ) {                                                                                  // 8677\n\t\t\t\treturn !( selected = dataTypeOrTransport );                                                                      // 8678\n\t\t\t}                                                                                                                 // 8679\n\t\t});                                                                                                                // 8680\n\t\treturn selected;                                                                                                   // 8681\n\t}                                                                                                                   // 8682\n                                                                                                                     // 8683\n\treturn inspect( options.dataTypes[ 0 ] ) || !inspected[ \"*\" ] && inspect( \"*\" );                                    // 8684\n}                                                                                                                    // 8685\n                                                                                                                     // 8686\n// A special extend for ajax options                                                                                 // 8687\n// that takes \"flat\" options (not to be deep extended)                                                               // 8688\n// Fixes #9887                                                                                                       // 8689\nfunction ajaxExtend( target, src ) {                                                                                 // 8690\n\tvar deep, key,                                                                                                      // 8691\n\t\tflatOptions = jQuery.ajaxSettings.flatOptions || {};                                                               // 8692\n                                                                                                                     // 8693\n\tfor ( key in src ) {                                                                                                // 8694\n\t\tif ( src[ key ] !== undefined ) {                                                                                  // 8695\n\t\t\t( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];                                    // 8696\n\t\t}                                                                                                                  // 8697\n\t}                                                                                                                   // 8698\n\tif ( deep ) {                                                                                                       // 8699\n\t\tjQuery.extend( true, target, deep );                                                                               // 8700\n\t}                                                                                                                   // 8701\n                                                                                                                     // 8702\n\treturn target;                                                                                                      // 8703\n}                                                                                                                    // 8704\n                                                                                                                     // 8705\n/* Handles responses to an ajax request:                                                                             // 8706\n * - finds the right dataType (mediates between content-type and expected dataType)                                  // 8707\n * - returns the corresponding response                                                                              // 8708\n */                                                                                                                  // 8709\nfunction ajaxHandleResponses( s, jqXHR, responses ) {                                                                // 8710\n\tvar firstDataType, ct, finalDataType, type,                                                                         // 8711\n\t\tcontents = s.contents,                                                                                             // 8712\n\t\tdataTypes = s.dataTypes;                                                                                           // 8713\n                                                                                                                     // 8714\n\t// Remove auto dataType and get content-type in the process                                                         // 8715\n\twhile ( dataTypes[ 0 ] === \"*\" ) {                                                                                  // 8716\n\t\tdataTypes.shift();                                                                                                 // 8717\n\t\tif ( ct === undefined ) {                                                                                          // 8718\n\t\t\tct = s.mimeType || jqXHR.getResponseHeader(\"Content-Type\");                                                       // 8719\n\t\t}                                                                                                                  // 8720\n\t}                                                                                                                   // 8721\n                                                                                                                     // 8722\n\t// Check if we're dealing with a known content-type                                                                 // 8723\n\tif ( ct ) {                                                                                                         // 8724\n\t\tfor ( type in contents ) {                                                                                         // 8725\n\t\t\tif ( contents[ type ] && contents[ type ].test( ct ) ) {                                                          // 8726\n\t\t\t\tdataTypes.unshift( type );                                                                                       // 8727\n\t\t\t\tbreak;                                                                                                           // 8728\n\t\t\t}                                                                                                                 // 8729\n\t\t}                                                                                                                  // 8730\n\t}                                                                                                                   // 8731\n                                                                                                                     // 8732\n\t// Check to see if we have a response for the expected dataType                                                     // 8733\n\tif ( dataTypes[ 0 ] in responses ) {                                                                                // 8734\n\t\tfinalDataType = dataTypes[ 0 ];                                                                                    // 8735\n\t} else {                                                                                                            // 8736\n\t\t// Try convertible dataTypes                                                                                       // 8737\n\t\tfor ( type in responses ) {                                                                                        // 8738\n\t\t\tif ( !dataTypes[ 0 ] || s.converters[ type + \" \" + dataTypes[0] ] ) {                                             // 8739\n\t\t\t\tfinalDataType = type;                                                                                            // 8740\n\t\t\t\tbreak;                                                                                                           // 8741\n\t\t\t}                                                                                                                 // 8742\n\t\t\tif ( !firstDataType ) {                                                                                           // 8743\n\t\t\t\tfirstDataType = type;                                                                                            // 8744\n\t\t\t}                                                                                                                 // 8745\n\t\t}                                                                                                                  // 8746\n\t\t// Or just use first one                                                                                           // 8747\n\t\tfinalDataType = finalDataType || firstDataType;                                                                    // 8748\n\t}                                                                                                                   // 8749\n                                                                                                                     // 8750\n\t// If we found a dataType                                                                                           // 8751\n\t// We add the dataType to the list if needed                                                                        // 8752\n\t// and return the corresponding response                                                                            // 8753\n\tif ( finalDataType ) {                                                                                              // 8754\n\t\tif ( finalDataType !== dataTypes[ 0 ] ) {                                                                          // 8755\n\t\t\tdataTypes.unshift( finalDataType );                                                                               // 8756\n\t\t}                                                                                                                  // 8757\n\t\treturn responses[ finalDataType ];                                                                                 // 8758\n\t}                                                                                                                   // 8759\n}                                                                                                                    // 8760\n                                                                                                                     // 8761\n/* Chain conversions given the request and the original response                                                     // 8762\n * Also sets the responseXXX fields on the jqXHR instance                                                            // 8763\n */                                                                                                                  // 8764\nfunction ajaxConvert( s, response, jqXHR, isSuccess ) {                                                              // 8765\n\tvar conv2, current, conv, tmp, prev,                                                                                // 8766\n\t\tconverters = {},                                                                                                   // 8767\n\t\t// Work with a copy of dataTypes in case we need to modify it for conversion                                       // 8768\n\t\tdataTypes = s.dataTypes.slice();                                                                                   // 8769\n                                                                                                                     // 8770\n\t// Create converters map with lowercased keys                                                                       // 8771\n\tif ( dataTypes[ 1 ] ) {                                                                                             // 8772\n\t\tfor ( conv in s.converters ) {                                                                                     // 8773\n\t\t\tconverters[ conv.toLowerCase() ] = s.converters[ conv ];                                                          // 8774\n\t\t}                                                                                                                  // 8775\n\t}                                                                                                                   // 8776\n                                                                                                                     // 8777\n\tcurrent = dataTypes.shift();                                                                                        // 8778\n                                                                                                                     // 8779\n\t// Convert to each sequential dataType                                                                              // 8780\n\twhile ( current ) {                                                                                                 // 8781\n                                                                                                                     // 8782\n\t\tif ( s.responseFields[ current ] ) {                                                                               // 8783\n\t\t\tjqXHR[ s.responseFields[ current ] ] = response;                                                                  // 8784\n\t\t}                                                                                                                  // 8785\n                                                                                                                     // 8786\n\t\t// Apply the dataFilter if provided                                                                                // 8787\n\t\tif ( !prev && isSuccess && s.dataFilter ) {                                                                        // 8788\n\t\t\tresponse = s.dataFilter( response, s.dataType );                                                                  // 8789\n\t\t}                                                                                                                  // 8790\n                                                                                                                     // 8791\n\t\tprev = current;                                                                                                    // 8792\n\t\tcurrent = dataTypes.shift();                                                                                       // 8793\n                                                                                                                     // 8794\n\t\tif ( current ) {                                                                                                   // 8795\n                                                                                                                     // 8796\n\t\t\t// There's only work to do if current dataType is non-auto                                                        // 8797\n\t\t\tif ( current === \"*\" ) {                                                                                          // 8798\n                                                                                                                     // 8799\n\t\t\t\tcurrent = prev;                                                                                                  // 8800\n                                                                                                                     // 8801\n\t\t\t// Convert response if prev dataType is non-auto and differs from current                                         // 8802\n\t\t\t} else if ( prev !== \"*\" && prev !== current ) {                                                                  // 8803\n                                                                                                                     // 8804\n\t\t\t\t// Seek a direct converter                                                                                       // 8805\n\t\t\t\tconv = converters[ prev + \" \" + current ] || converters[ \"* \" + current ];                                       // 8806\n                                                                                                                     // 8807\n\t\t\t\t// If none found, seek a pair                                                                                    // 8808\n\t\t\t\tif ( !conv ) {                                                                                                   // 8809\n\t\t\t\t\tfor ( conv2 in converters ) {                                                                                   // 8810\n                                                                                                                     // 8811\n\t\t\t\t\t\t// If conv2 outputs current                                                                                    // 8812\n\t\t\t\t\t\ttmp = conv2.split( \" \" );                                                                                      // 8813\n\t\t\t\t\t\tif ( tmp[ 1 ] === current ) {                                                                                  // 8814\n                                                                                                                     // 8815\n\t\t\t\t\t\t\t// If prev can be converted to accepted input                                                                 // 8816\n\t\t\t\t\t\t\tconv = converters[ prev + \" \" + tmp[ 0 ] ] ||                                                                 // 8817\n\t\t\t\t\t\t\t\tconverters[ \"* \" + tmp[ 0 ] ];                                                                               // 8818\n\t\t\t\t\t\t\tif ( conv ) {                                                                                                 // 8819\n\t\t\t\t\t\t\t\t// Condense equivalence converters                                                                           // 8820\n\t\t\t\t\t\t\t\tif ( conv === true ) {                                                                                       // 8821\n\t\t\t\t\t\t\t\t\tconv = converters[ conv2 ];                                                                                 // 8822\n                                                                                                                     // 8823\n\t\t\t\t\t\t\t\t// Otherwise, insert the intermediate dataType                                                               // 8824\n\t\t\t\t\t\t\t\t} else if ( converters[ conv2 ] !== true ) {                                                                 // 8825\n\t\t\t\t\t\t\t\t\tcurrent = tmp[ 0 ];                                                                                         // 8826\n\t\t\t\t\t\t\t\t\tdataTypes.unshift( tmp[ 1 ] );                                                                              // 8827\n\t\t\t\t\t\t\t\t}                                                                                                            // 8828\n\t\t\t\t\t\t\t\tbreak;                                                                                                       // 8829\n\t\t\t\t\t\t\t}                                                                                                             // 8830\n\t\t\t\t\t\t}                                                                                                              // 8831\n\t\t\t\t\t}                                                                                                               // 8832\n\t\t\t\t}                                                                                                                // 8833\n                                                                                                                     // 8834\n\t\t\t\t// Apply converter (if not an equivalence)                                                                       // 8835\n\t\t\t\tif ( conv !== true ) {                                                                                           // 8836\n                                                                                                                     // 8837\n\t\t\t\t\t// Unless errors are allowed to bubble, catch and return them                                                   // 8838\n\t\t\t\t\tif ( conv && s[ \"throws\" ] ) {                                                                                  // 8839\n\t\t\t\t\t\tresponse = conv( response );                                                                                   // 8840\n\t\t\t\t\t} else {                                                                                                        // 8841\n\t\t\t\t\t\ttry {                                                                                                          // 8842\n\t\t\t\t\t\t\tresponse = conv( response );                                                                                  // 8843\n\t\t\t\t\t\t} catch ( e ) {                                                                                                // 8844\n\t\t\t\t\t\t\treturn { state: \"parsererror\", error: conv ? e : \"No conversion from \" + prev + \" to \" + current };           // 8845\n\t\t\t\t\t\t}                                                                                                              // 8846\n\t\t\t\t\t}                                                                                                               // 8847\n\t\t\t\t}                                                                                                                // 8848\n\t\t\t}                                                                                                                 // 8849\n\t\t}                                                                                                                  // 8850\n\t}                                                                                                                   // 8851\n                                                                                                                     // 8852\n\treturn { state: \"success\", data: response };                                                                        // 8853\n}                                                                                                                    // 8854\n                                                                                                                     // 8855\njQuery.extend({                                                                                                      // 8856\n                                                                                                                     // 8857\n\t// Counter for holding the number of active queries                                                                 // 8858\n\tactive: 0,                                                                                                          // 8859\n                                                                                                                     // 8860\n\t// Last-Modified header cache for next request                                                                      // 8861\n\tlastModified: {},                                                                                                   // 8862\n\tetag: {},                                                                                                           // 8863\n                                                                                                                     // 8864\n\tajaxSettings: {                                                                                                     // 8865\n\t\turl: ajaxLocation,                                                                                                 // 8866\n\t\ttype: \"GET\",                                                                                                       // 8867\n\t\tisLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),                                                                 // 8868\n\t\tglobal: true,                                                                                                      // 8869\n\t\tprocessData: true,                                                                                                 // 8870\n\t\tasync: true,                                                                                                       // 8871\n\t\tcontentType: \"application/x-www-form-urlencoded; charset=UTF-8\",                                                   // 8872\n\t\t/*                                                                                                                 // 8873\n\t\ttimeout: 0,                                                                                                        // 8874\n\t\tdata: null,                                                                                                        // 8875\n\t\tdataType: null,                                                                                                    // 8876\n\t\tusername: null,                                                                                                    // 8877\n\t\tpassword: null,                                                                                                    // 8878\n\t\tcache: null,                                                                                                       // 8879\n\t\tthrows: false,                                                                                                     // 8880\n\t\ttraditional: false,                                                                                                // 8881\n\t\theaders: {},                                                                                                       // 8882\n\t\t*/                                                                                                                 // 8883\n                                                                                                                     // 8884\n\t\taccepts: {                                                                                                         // 8885\n\t\t\t\"*\": allTypes,                                                                                                    // 8886\n\t\t\ttext: \"text/plain\",                                                                                               // 8887\n\t\t\thtml: \"text/html\",                                                                                                // 8888\n\t\t\txml: \"application/xml, text/xml\",                                                                                 // 8889\n\t\t\tjson: \"application/json, text/javascript\"                                                                         // 8890\n\t\t},                                                                                                                 // 8891\n                                                                                                                     // 8892\n\t\tcontents: {                                                                                                        // 8893\n\t\t\txml: /xml/,                                                                                                       // 8894\n\t\t\thtml: /html/,                                                                                                     // 8895\n\t\t\tjson: /json/                                                                                                      // 8896\n\t\t},                                                                                                                 // 8897\n                                                                                                                     // 8898\n\t\tresponseFields: {                                                                                                  // 8899\n\t\t\txml: \"responseXML\",                                                                                               // 8900\n\t\t\ttext: \"responseText\",                                                                                             // 8901\n\t\t\tjson: \"responseJSON\"                                                                                              // 8902\n\t\t},                                                                                                                 // 8903\n                                                                                                                     // 8904\n\t\t// Data converters                                                                                                 // 8905\n\t\t// Keys separate source (or catchall \"*\") and destination types with a single space                                // 8906\n\t\tconverters: {                                                                                                      // 8907\n                                                                                                                     // 8908\n\t\t\t// Convert anything to text                                                                                       // 8909\n\t\t\t\"* text\": String,                                                                                                 // 8910\n                                                                                                                     // 8911\n\t\t\t// Text to html (true = no transformation)                                                                        // 8912\n\t\t\t\"text html\": true,                                                                                                // 8913\n                                                                                                                     // 8914\n\t\t\t// Evaluate text as a json expression                                                                             // 8915\n\t\t\t\"text json\": jQuery.parseJSON,                                                                                    // 8916\n                                                                                                                     // 8917\n\t\t\t// Parse text as xml                                                                                              // 8918\n\t\t\t\"text xml\": jQuery.parseXML                                                                                       // 8919\n\t\t},                                                                                                                 // 8920\n                                                                                                                     // 8921\n\t\t// For options that shouldn't be deep extended:                                                                    // 8922\n\t\t// you can add your own custom options here if                                                                     // 8923\n\t\t// and when you create one that shouldn't be                                                                       // 8924\n\t\t// deep extended (see ajaxExtend)                                                                                  // 8925\n\t\tflatOptions: {                                                                                                     // 8926\n\t\t\turl: true,                                                                                                        // 8927\n\t\t\tcontext: true                                                                                                     // 8928\n\t\t}                                                                                                                  // 8929\n\t},                                                                                                                  // 8930\n                                                                                                                     // 8931\n\t// Creates a full fledged settings object into target                                                               // 8932\n\t// with both ajaxSettings and settings fields.                                                                      // 8933\n\t// If target is omitted, writes into ajaxSettings.                                                                  // 8934\n\tajaxSetup: function( target, settings ) {                                                                           // 8935\n\t\treturn settings ?                                                                                                  // 8936\n                                                                                                                     // 8937\n\t\t\t// Building a settings object                                                                                     // 8938\n\t\t\tajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :                                               // 8939\n                                                                                                                     // 8940\n\t\t\t// Extending ajaxSettings                                                                                         // 8941\n\t\t\tajaxExtend( jQuery.ajaxSettings, target );                                                                        // 8942\n\t},                                                                                                                  // 8943\n                                                                                                                     // 8944\n\tajaxPrefilter: addToPrefiltersOrTransports( prefilters ),                                                           // 8945\n\tajaxTransport: addToPrefiltersOrTransports( transports ),                                                           // 8946\n                                                                                                                     // 8947\n\t// Main method                                                                                                      // 8948\n\tajax: function( url, options ) {                                                                                    // 8949\n                                                                                                                     // 8950\n\t\t// If url is an object, simulate pre-1.5 signature                                                                 // 8951\n\t\tif ( typeof url === \"object\" ) {                                                                                   // 8952\n\t\t\toptions = url;                                                                                                    // 8953\n\t\t\turl = undefined;                                                                                                  // 8954\n\t\t}                                                                                                                  // 8955\n                                                                                                                     // 8956\n\t\t// Force options to be an object                                                                                   // 8957\n\t\toptions = options || {};                                                                                           // 8958\n                                                                                                                     // 8959\n\t\tvar // Cross-domain detection vars                                                                                 // 8960\n\t\t\tparts,                                                                                                            // 8961\n\t\t\t// Loop variable                                                                                                  // 8962\n\t\t\ti,                                                                                                                // 8963\n\t\t\t// URL without anti-cache param                                                                                   // 8964\n\t\t\tcacheURL,                                                                                                         // 8965\n\t\t\t// Response headers as string                                                                                     // 8966\n\t\t\tresponseHeadersString,                                                                                            // 8967\n\t\t\t// timeout handle                                                                                                 // 8968\n\t\t\ttimeoutTimer,                                                                                                     // 8969\n                                                                                                                     // 8970\n\t\t\t// To know if global events are to be dispatched                                                                  // 8971\n\t\t\tfireGlobals,                                                                                                      // 8972\n                                                                                                                     // 8973\n\t\t\ttransport,                                                                                                        // 8974\n\t\t\t// Response headers                                                                                               // 8975\n\t\t\tresponseHeaders,                                                                                                  // 8976\n\t\t\t// Create the final options object                                                                                // 8977\n\t\t\ts = jQuery.ajaxSetup( {}, options ),                                                                              // 8978\n\t\t\t// Callbacks context                                                                                              // 8979\n\t\t\tcallbackContext = s.context || s,                                                                                 // 8980\n\t\t\t// Context for global events is callbackContext if it is a DOM node or jQuery collection                          // 8981\n\t\t\tglobalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?                        // 8982\n\t\t\t\tjQuery( callbackContext ) :                                                                                      // 8983\n\t\t\t\tjQuery.event,                                                                                                    // 8984\n\t\t\t// Deferreds                                                                                                      // 8985\n\t\t\tdeferred = jQuery.Deferred(),                                                                                     // 8986\n\t\t\tcompleteDeferred = jQuery.Callbacks(\"once memory\"),                                                               // 8987\n\t\t\t// Status-dependent callbacks                                                                                     // 8988\n\t\t\tstatusCode = s.statusCode || {},                                                                                  // 8989\n\t\t\t// Headers (they are sent all at once)                                                                            // 8990\n\t\t\trequestHeaders = {},                                                                                              // 8991\n\t\t\trequestHeadersNames = {},                                                                                         // 8992\n\t\t\t// The jqXHR state                                                                                                // 8993\n\t\t\tstate = 0,                                                                                                        // 8994\n\t\t\t// Default abort message                                                                                          // 8995\n\t\t\tstrAbort = \"canceled\",                                                                                            // 8996\n\t\t\t// Fake xhr                                                                                                       // 8997\n\t\t\tjqXHR = {                                                                                                         // 8998\n\t\t\t\treadyState: 0,                                                                                                   // 8999\n                                                                                                                     // 9000\n\t\t\t\t// Builds headers hashtable if needed                                                                            // 9001\n\t\t\t\tgetResponseHeader: function( key ) {                                                                             // 9002\n\t\t\t\t\tvar match;                                                                                                      // 9003\n\t\t\t\t\tif ( state === 2 ) {                                                                                            // 9004\n\t\t\t\t\t\tif ( !responseHeaders ) {                                                                                      // 9005\n\t\t\t\t\t\t\tresponseHeaders = {};                                                                                         // 9006\n\t\t\t\t\t\t\twhile ( (match = rheaders.exec( responseHeadersString )) ) {                                                  // 9007\n\t\t\t\t\t\t\t\tresponseHeaders[ match[1].toLowerCase() ] = match[ 2 ];                                                      // 9008\n\t\t\t\t\t\t\t}                                                                                                             // 9009\n\t\t\t\t\t\t}                                                                                                              // 9010\n\t\t\t\t\t\tmatch = responseHeaders[ key.toLowerCase() ];                                                                  // 9011\n\t\t\t\t\t}                                                                                                               // 9012\n\t\t\t\t\treturn match == null ? null : match;                                                                            // 9013\n\t\t\t\t},                                                                                                               // 9014\n                                                                                                                     // 9015\n\t\t\t\t// Raw string                                                                                                    // 9016\n\t\t\t\tgetAllResponseHeaders: function() {                                                                              // 9017\n\t\t\t\t\treturn state === 2 ? responseHeadersString : null;                                                              // 9018\n\t\t\t\t},                                                                                                               // 9019\n                                                                                                                     // 9020\n\t\t\t\t// Caches the header                                                                                             // 9021\n\t\t\t\tsetRequestHeader: function( name, value ) {                                                                      // 9022\n\t\t\t\t\tvar lname = name.toLowerCase();                                                                                 // 9023\n\t\t\t\t\tif ( !state ) {                                                                                                 // 9024\n\t\t\t\t\t\tname = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;                                    // 9025\n\t\t\t\t\t\trequestHeaders[ name ] = value;                                                                                // 9026\n\t\t\t\t\t}                                                                                                               // 9027\n\t\t\t\t\treturn this;                                                                                                    // 9028\n\t\t\t\t},                                                                                                               // 9029\n                                                                                                                     // 9030\n\t\t\t\t// Overrides response content-type header                                                                        // 9031\n\t\t\t\toverrideMimeType: function( type ) {                                                                             // 9032\n\t\t\t\t\tif ( !state ) {                                                                                                 // 9033\n\t\t\t\t\t\ts.mimeType = type;                                                                                             // 9034\n\t\t\t\t\t}                                                                                                               // 9035\n\t\t\t\t\treturn this;                                                                                                    // 9036\n\t\t\t\t},                                                                                                               // 9037\n                                                                                                                     // 9038\n\t\t\t\t// Status-dependent callbacks                                                                                    // 9039\n\t\t\t\tstatusCode: function( map ) {                                                                                    // 9040\n\t\t\t\t\tvar code;                                                                                                       // 9041\n\t\t\t\t\tif ( map ) {                                                                                                    // 9042\n\t\t\t\t\t\tif ( state < 2 ) {                                                                                             // 9043\n\t\t\t\t\t\t\tfor ( code in map ) {                                                                                         // 9044\n\t\t\t\t\t\t\t\t// Lazy-add the new callback in a way that preserves old ones                                                // 9045\n\t\t\t\t\t\t\t\tstatusCode[ code ] = [ statusCode[ code ], map[ code ] ];                                                    // 9046\n\t\t\t\t\t\t\t}                                                                                                             // 9047\n\t\t\t\t\t\t} else {                                                                                                       // 9048\n\t\t\t\t\t\t\t// Execute the appropriate callbacks                                                                          // 9049\n\t\t\t\t\t\t\tjqXHR.always( map[ jqXHR.status ] );                                                                          // 9050\n\t\t\t\t\t\t}                                                                                                              // 9051\n\t\t\t\t\t}                                                                                                               // 9052\n\t\t\t\t\treturn this;                                                                                                    // 9053\n\t\t\t\t},                                                                                                               // 9054\n                                                                                                                     // 9055\n\t\t\t\t// Cancel the request                                                                                            // 9056\n\t\t\t\tabort: function( statusText ) {                                                                                  // 9057\n\t\t\t\t\tvar finalText = statusText || strAbort;                                                                         // 9058\n\t\t\t\t\tif ( transport ) {                                                                                              // 9059\n\t\t\t\t\t\ttransport.abort( finalText );                                                                                  // 9060\n\t\t\t\t\t}                                                                                                               // 9061\n\t\t\t\t\tdone( 0, finalText );                                                                                           // 9062\n\t\t\t\t\treturn this;                                                                                                    // 9063\n\t\t\t\t}                                                                                                                // 9064\n\t\t\t};                                                                                                                // 9065\n                                                                                                                     // 9066\n\t\t// Attach deferreds                                                                                                // 9067\n\t\tdeferred.promise( jqXHR ).complete = completeDeferred.add;                                                         // 9068\n\t\tjqXHR.success = jqXHR.done;                                                                                        // 9069\n\t\tjqXHR.error = jqXHR.fail;                                                                                          // 9070\n                                                                                                                     // 9071\n\t\t// Remove hash character (#7531: and string promotion)                                                             // 9072\n\t\t// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)                                         // 9073\n\t\t// Handle falsy url in the settings object (#10093: consistency with old signature)                                // 9074\n\t\t// We also use the url parameter if available                                                                      // 9075\n\t\ts.url = ( ( url || s.url || ajaxLocation ) + \"\" ).replace( rhash, \"\" ).replace( rprotocol, ajaxLocParts[ 1 ] + \"//\" );\n                                                                                                                     // 9077\n\t\t// Alias method option to type as per ticket #12004                                                                // 9078\n\t\ts.type = options.method || options.type || s.method || s.type;                                                     // 9079\n                                                                                                                     // 9080\n\t\t// Extract dataTypes list                                                                                          // 9081\n\t\ts.dataTypes = jQuery.trim( s.dataType || \"*\" ).toLowerCase().match( rnotwhite ) || [ \"\" ];                         // 9082\n                                                                                                                     // 9083\n\t\t// A cross-domain request is in order when we have a protocol:host:port mismatch                                   // 9084\n\t\tif ( s.crossDomain == null ) {                                                                                     // 9085\n\t\t\tparts = rurl.exec( s.url.toLowerCase() );                                                                         // 9086\n\t\t\ts.crossDomain = !!( parts &&                                                                                      // 9087\n\t\t\t\t( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||                                        // 9088\n\t\t\t\t\t( parts[ 3 ] || ( parts[ 1 ] === \"http:\" ? \"80\" : \"443\" ) ) !==                                                 // 9089\n\t\t\t\t\t\t( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === \"http:\" ? \"80\" : \"443\" ) ) )                                    // 9090\n\t\t\t);                                                                                                                // 9091\n\t\t}                                                                                                                  // 9092\n                                                                                                                     // 9093\n\t\t// Convert data if not already a string                                                                            // 9094\n\t\tif ( s.data && s.processData && typeof s.data !== \"string\" ) {                                                     // 9095\n\t\t\ts.data = jQuery.param( s.data, s.traditional );                                                                   // 9096\n\t\t}                                                                                                                  // 9097\n                                                                                                                     // 9098\n\t\t// Apply prefilters                                                                                                // 9099\n\t\tinspectPrefiltersOrTransports( prefilters, s, options, jqXHR );                                                    // 9100\n                                                                                                                     // 9101\n\t\t// If request was aborted inside a prefilter, stop there                                                           // 9102\n\t\tif ( state === 2 ) {                                                                                               // 9103\n\t\t\treturn jqXHR;                                                                                                     // 9104\n\t\t}                                                                                                                  // 9105\n                                                                                                                     // 9106\n\t\t// We can fire global events as of now if asked to                                                                 // 9107\n\t\tfireGlobals = s.global;                                                                                            // 9108\n                                                                                                                     // 9109\n\t\t// Watch for a new set of requests                                                                                 // 9110\n\t\tif ( fireGlobals && jQuery.active++ === 0 ) {                                                                      // 9111\n\t\t\tjQuery.event.trigger(\"ajaxStart\");                                                                                // 9112\n\t\t}                                                                                                                  // 9113\n                                                                                                                     // 9114\n\t\t// Uppercase the type                                                                                              // 9115\n\t\ts.type = s.type.toUpperCase();                                                                                     // 9116\n                                                                                                                     // 9117\n\t\t// Determine if request has content                                                                                // 9118\n\t\ts.hasContent = !rnoContent.test( s.type );                                                                         // 9119\n                                                                                                                     // 9120\n\t\t// Save the URL in case we're toying with the If-Modified-Since                                                    // 9121\n\t\t// and/or If-None-Match header later on                                                                            // 9122\n\t\tcacheURL = s.url;                                                                                                  // 9123\n                                                                                                                     // 9124\n\t\t// More options handling for requests with no content                                                              // 9125\n\t\tif ( !s.hasContent ) {                                                                                             // 9126\n                                                                                                                     // 9127\n\t\t\t// If data is available, append data to url                                                                       // 9128\n\t\t\tif ( s.data ) {                                                                                                   // 9129\n\t\t\t\tcacheURL = ( s.url += ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + s.data );                                        // 9130\n\t\t\t\t// #9682: remove data so that it's not used in an eventual retry                                                 // 9131\n\t\t\t\tdelete s.data;                                                                                                   // 9132\n\t\t\t}                                                                                                                 // 9133\n                                                                                                                     // 9134\n\t\t\t// Add anti-cache in url if needed                                                                                // 9135\n\t\t\tif ( s.cache === false ) {                                                                                        // 9136\n\t\t\t\ts.url = rts.test( cacheURL ) ?                                                                                   // 9137\n                                                                                                                     // 9138\n\t\t\t\t\t// If there is already a '_' parameter, set its value                                                           // 9139\n\t\t\t\t\tcacheURL.replace( rts, \"$1_=\" + nonce++ ) :                                                                     // 9140\n                                                                                                                     // 9141\n\t\t\t\t\t// Otherwise add one to the end                                                                                 // 9142\n\t\t\t\t\tcacheURL + ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + \"_=\" + nonce++;                                            // 9143\n\t\t\t}                                                                                                                 // 9144\n\t\t}                                                                                                                  // 9145\n                                                                                                                     // 9146\n\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.                                   // 9147\n\t\tif ( s.ifModified ) {                                                                                              // 9148\n\t\t\tif ( jQuery.lastModified[ cacheURL ] ) {                                                                          // 9149\n\t\t\t\tjqXHR.setRequestHeader( \"If-Modified-Since\", jQuery.lastModified[ cacheURL ] );                                  // 9150\n\t\t\t}                                                                                                                 // 9151\n\t\t\tif ( jQuery.etag[ cacheURL ] ) {                                                                                  // 9152\n\t\t\t\tjqXHR.setRequestHeader( \"If-None-Match\", jQuery.etag[ cacheURL ] );                                              // 9153\n\t\t\t}                                                                                                                 // 9154\n\t\t}                                                                                                                  // 9155\n                                                                                                                     // 9156\n\t\t// Set the correct header, if data is being sent                                                                   // 9157\n\t\tif ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {                                  // 9158\n\t\t\tjqXHR.setRequestHeader( \"Content-Type\", s.contentType );                                                          // 9159\n\t\t}                                                                                                                  // 9160\n                                                                                                                     // 9161\n\t\t// Set the Accepts header for the server, depending on the dataType                                                // 9162\n\t\tjqXHR.setRequestHeader(                                                                                            // 9163\n\t\t\t\"Accept\",                                                                                                         // 9164\n\t\t\ts.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?                                                                 // 9165\n\t\t\t\ts.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== \"*\" ? \", \" + allTypes + \"; q=0.01\" : \"\" ) :                 // 9166\n\t\t\t\ts.accepts[ \"*\" ]                                                                                                 // 9167\n\t\t);                                                                                                                 // 9168\n                                                                                                                     // 9169\n\t\t// Check for headers option                                                                                        // 9170\n\t\tfor ( i in s.headers ) {                                                                                           // 9171\n\t\t\tjqXHR.setRequestHeader( i, s.headers[ i ] );                                                                      // 9172\n\t\t}                                                                                                                  // 9173\n                                                                                                                     // 9174\n\t\t// Allow custom headers/mimetypes and early abort                                                                  // 9175\n\t\tif ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {               // 9176\n\t\t\t// Abort if not done already and return                                                                           // 9177\n\t\t\treturn jqXHR.abort();                                                                                             // 9178\n\t\t}                                                                                                                  // 9179\n                                                                                                                     // 9180\n\t\t// aborting is no longer a cancellation                                                                            // 9181\n\t\tstrAbort = \"abort\";                                                                                                // 9182\n                                                                                                                     // 9183\n\t\t// Install callbacks on deferreds                                                                                  // 9184\n\t\tfor ( i in { success: 1, error: 1, complete: 1 } ) {                                                               // 9185\n\t\t\tjqXHR[ i ]( s[ i ] );                                                                                             // 9186\n\t\t}                                                                                                                  // 9187\n                                                                                                                     // 9188\n\t\t// Get transport                                                                                                   // 9189\n\t\ttransport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );                                        // 9190\n                                                                                                                     // 9191\n\t\t// If no transport, we auto-abort                                                                                  // 9192\n\t\tif ( !transport ) {                                                                                                // 9193\n\t\t\tdone( -1, \"No Transport\" );                                                                                       // 9194\n\t\t} else {                                                                                                           // 9195\n\t\t\tjqXHR.readyState = 1;                                                                                             // 9196\n                                                                                                                     // 9197\n\t\t\t// Send global event                                                                                              // 9198\n\t\t\tif ( fireGlobals ) {                                                                                              // 9199\n\t\t\t\tglobalEventContext.trigger( \"ajaxSend\", [ jqXHR, s ] );                                                          // 9200\n\t\t\t}                                                                                                                 // 9201\n\t\t\t// Timeout                                                                                                        // 9202\n\t\t\tif ( s.async && s.timeout > 0 ) {                                                                                 // 9203\n\t\t\t\ttimeoutTimer = setTimeout(function() {                                                                           // 9204\n\t\t\t\t\tjqXHR.abort(\"timeout\");                                                                                         // 9205\n\t\t\t\t}, s.timeout );                                                                                                  // 9206\n\t\t\t}                                                                                                                 // 9207\n                                                                                                                     // 9208\n\t\t\ttry {                                                                                                             // 9209\n\t\t\t\tstate = 1;                                                                                                       // 9210\n\t\t\t\ttransport.send( requestHeaders, done );                                                                          // 9211\n\t\t\t} catch ( e ) {                                                                                                   // 9212\n\t\t\t\t// Propagate exception as error if not done                                                                      // 9213\n\t\t\t\tif ( state < 2 ) {                                                                                               // 9214\n\t\t\t\t\tdone( -1, e );                                                                                                  // 9215\n\t\t\t\t// Simply rethrow otherwise                                                                                      // 9216\n\t\t\t\t} else {                                                                                                         // 9217\n\t\t\t\t\tthrow e;                                                                                                        // 9218\n\t\t\t\t}                                                                                                                // 9219\n\t\t\t}                                                                                                                 // 9220\n\t\t}                                                                                                                  // 9221\n                                                                                                                     // 9222\n\t\t// Callback for when everything is done                                                                            // 9223\n\t\tfunction done( status, nativeStatusText, responses, headers ) {                                                    // 9224\n\t\t\tvar isSuccess, success, error, response, modified,                                                                // 9225\n\t\t\t\tstatusText = nativeStatusText;                                                                                   // 9226\n                                                                                                                     // 9227\n\t\t\t// Called once                                                                                                    // 9228\n\t\t\tif ( state === 2 ) {                                                                                              // 9229\n\t\t\t\treturn;                                                                                                          // 9230\n\t\t\t}                                                                                                                 // 9231\n                                                                                                                     // 9232\n\t\t\t// State is \"done\" now                                                                                            // 9233\n\t\t\tstate = 2;                                                                                                        // 9234\n                                                                                                                     // 9235\n\t\t\t// Clear timeout if it exists                                                                                     // 9236\n\t\t\tif ( timeoutTimer ) {                                                                                             // 9237\n\t\t\t\tclearTimeout( timeoutTimer );                                                                                    // 9238\n\t\t\t}                                                                                                                 // 9239\n                                                                                                                     // 9240\n\t\t\t// Dereference transport for early garbage collection                                                             // 9241\n\t\t\t// (no matter how long the jqXHR object will be used)                                                             // 9242\n\t\t\ttransport = undefined;                                                                                            // 9243\n                                                                                                                     // 9244\n\t\t\t// Cache response headers                                                                                         // 9245\n\t\t\tresponseHeadersString = headers || \"\";                                                                            // 9246\n                                                                                                                     // 9247\n\t\t\t// Set readyState                                                                                                 // 9248\n\t\t\tjqXHR.readyState = status > 0 ? 4 : 0;                                                                            // 9249\n                                                                                                                     // 9250\n\t\t\t// Determine if successful                                                                                        // 9251\n\t\t\tisSuccess = status >= 200 && status < 300 || status === 304;                                                      // 9252\n                                                                                                                     // 9253\n\t\t\t// Get response data                                                                                              // 9254\n\t\t\tif ( responses ) {                                                                                                // 9255\n\t\t\t\tresponse = ajaxHandleResponses( s, jqXHR, responses );                                                           // 9256\n\t\t\t}                                                                                                                 // 9257\n                                                                                                                     // 9258\n\t\t\t// Convert no matter what (that way responseXXX fields are always set)                                            // 9259\n\t\t\tresponse = ajaxConvert( s, response, jqXHR, isSuccess );                                                          // 9260\n                                                                                                                     // 9261\n\t\t\t// If successful, handle type chaining                                                                            // 9262\n\t\t\tif ( isSuccess ) {                                                                                                // 9263\n                                                                                                                     // 9264\n\t\t\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.                                 // 9265\n\t\t\t\tif ( s.ifModified ) {                                                                                            // 9266\n\t\t\t\t\tmodified = jqXHR.getResponseHeader(\"Last-Modified\");                                                            // 9267\n\t\t\t\t\tif ( modified ) {                                                                                               // 9268\n\t\t\t\t\t\tjQuery.lastModified[ cacheURL ] = modified;                                                                    // 9269\n\t\t\t\t\t}                                                                                                               // 9270\n\t\t\t\t\tmodified = jqXHR.getResponseHeader(\"etag\");                                                                     // 9271\n\t\t\t\t\tif ( modified ) {                                                                                               // 9272\n\t\t\t\t\t\tjQuery.etag[ cacheURL ] = modified;                                                                            // 9273\n\t\t\t\t\t}                                                                                                               // 9274\n\t\t\t\t}                                                                                                                // 9275\n                                                                                                                     // 9276\n\t\t\t\t// if no content                                                                                                 // 9277\n\t\t\t\tif ( status === 204 || s.type === \"HEAD\" ) {                                                                     // 9278\n\t\t\t\t\tstatusText = \"nocontent\";                                                                                       // 9279\n                                                                                                                     // 9280\n\t\t\t\t// if not modified                                                                                               // 9281\n\t\t\t\t} else if ( status === 304 ) {                                                                                   // 9282\n\t\t\t\t\tstatusText = \"notmodified\";                                                                                     // 9283\n                                                                                                                     // 9284\n\t\t\t\t// If we have data, let's convert it                                                                             // 9285\n\t\t\t\t} else {                                                                                                         // 9286\n\t\t\t\t\tstatusText = response.state;                                                                                    // 9287\n\t\t\t\t\tsuccess = response.data;                                                                                        // 9288\n\t\t\t\t\terror = response.error;                                                                                         // 9289\n\t\t\t\t\tisSuccess = !error;                                                                                             // 9290\n\t\t\t\t}                                                                                                                // 9291\n\t\t\t} else {                                                                                                          // 9292\n\t\t\t\t// We extract error from statusText                                                                              // 9293\n\t\t\t\t// then normalize statusText and status for non-aborts                                                           // 9294\n\t\t\t\terror = statusText;                                                                                              // 9295\n\t\t\t\tif ( status || !statusText ) {                                                                                   // 9296\n\t\t\t\t\tstatusText = \"error\";                                                                                           // 9297\n\t\t\t\t\tif ( status < 0 ) {                                                                                             // 9298\n\t\t\t\t\t\tstatus = 0;                                                                                                    // 9299\n\t\t\t\t\t}                                                                                                               // 9300\n\t\t\t\t}                                                                                                                // 9301\n\t\t\t}                                                                                                                 // 9302\n                                                                                                                     // 9303\n\t\t\t// Set data for the fake xhr object                                                                               // 9304\n\t\t\tjqXHR.status = status;                                                                                            // 9305\n\t\t\tjqXHR.statusText = ( nativeStatusText || statusText ) + \"\";                                                       // 9306\n                                                                                                                     // 9307\n\t\t\t// Success/Error                                                                                                  // 9308\n\t\t\tif ( isSuccess ) {                                                                                                // 9309\n\t\t\t\tdeferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );                                         // 9310\n\t\t\t} else {                                                                                                          // 9311\n\t\t\t\tdeferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );                                            // 9312\n\t\t\t}                                                                                                                 // 9313\n                                                                                                                     // 9314\n\t\t\t// Status-dependent callbacks                                                                                     // 9315\n\t\t\tjqXHR.statusCode( statusCode );                                                                                   // 9316\n\t\t\tstatusCode = undefined;                                                                                           // 9317\n                                                                                                                     // 9318\n\t\t\tif ( fireGlobals ) {                                                                                              // 9319\n\t\t\t\tglobalEventContext.trigger( isSuccess ? \"ajaxSuccess\" : \"ajaxError\",                                             // 9320\n\t\t\t\t\t[ jqXHR, s, isSuccess ? success : error ] );                                                                    // 9321\n\t\t\t}                                                                                                                 // 9322\n                                                                                                                     // 9323\n\t\t\t// Complete                                                                                                       // 9324\n\t\t\tcompleteDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );                                              // 9325\n                                                                                                                     // 9326\n\t\t\tif ( fireGlobals ) {                                                                                              // 9327\n\t\t\t\tglobalEventContext.trigger( \"ajaxComplete\", [ jqXHR, s ] );                                                      // 9328\n\t\t\t\t// Handle the global AJAX counter                                                                                // 9329\n\t\t\t\tif ( !( --jQuery.active ) ) {                                                                                    // 9330\n\t\t\t\t\tjQuery.event.trigger(\"ajaxStop\");                                                                               // 9331\n\t\t\t\t}                                                                                                                // 9332\n\t\t\t}                                                                                                                 // 9333\n\t\t}                                                                                                                  // 9334\n                                                                                                                     // 9335\n\t\treturn jqXHR;                                                                                                      // 9336\n\t},                                                                                                                  // 9337\n                                                                                                                     // 9338\n\tgetJSON: function( url, data, callback ) {                                                                          // 9339\n\t\treturn jQuery.get( url, data, callback, \"json\" );                                                                  // 9340\n\t},                                                                                                                  // 9341\n                                                                                                                     // 9342\n\tgetScript: function( url, callback ) {                                                                              // 9343\n\t\treturn jQuery.get( url, undefined, callback, \"script\" );                                                           // 9344\n\t}                                                                                                                   // 9345\n});                                                                                                                  // 9346\n                                                                                                                     // 9347\njQuery.each( [ \"get\", \"post\" ], function( i, method ) {                                                              // 9348\n\tjQuery[ method ] = function( url, data, callback, type ) {                                                          // 9349\n\t\t// shift arguments if data argument was omitted                                                                    // 9350\n\t\tif ( jQuery.isFunction( data ) ) {                                                                                 // 9351\n\t\t\ttype = type || callback;                                                                                          // 9352\n\t\t\tcallback = data;                                                                                                  // 9353\n\t\t\tdata = undefined;                                                                                                 // 9354\n\t\t}                                                                                                                  // 9355\n                                                                                                                     // 9356\n\t\treturn jQuery.ajax({                                                                                               // 9357\n\t\t\turl: url,                                                                                                         // 9358\n\t\t\ttype: method,                                                                                                     // 9359\n\t\t\tdataType: type,                                                                                                   // 9360\n\t\t\tdata: data,                                                                                                       // 9361\n\t\t\tsuccess: callback                                                                                                 // 9362\n\t\t});                                                                                                                // 9363\n\t};                                                                                                                  // 9364\n});                                                                                                                  // 9365\n                                                                                                                     // 9366\n// Attach a bunch of functions for handling common AJAX events                                                       // 9367\njQuery.each( [ \"ajaxStart\", \"ajaxStop\", \"ajaxComplete\", \"ajaxError\", \"ajaxSuccess\", \"ajaxSend\" ], function( i, type ) {\n\tjQuery.fn[ type ] = function( fn ) {                                                                                // 9369\n\t\treturn this.on( type, fn );                                                                                        // 9370\n\t};                                                                                                                  // 9371\n});                                                                                                                  // 9372\n                                                                                                                     // 9373\n                                                                                                                     // 9374\njQuery._evalUrl = function( url ) {                                                                                  // 9375\n\treturn jQuery.ajax({                                                                                                // 9376\n\t\turl: url,                                                                                                          // 9377\n\t\ttype: \"GET\",                                                                                                       // 9378\n\t\tdataType: \"script\",                                                                                                // 9379\n\t\tasync: false,                                                                                                      // 9380\n\t\tglobal: false,                                                                                                     // 9381\n\t\t\"throws\": true                                                                                                     // 9382\n\t});                                                                                                                 // 9383\n};                                                                                                                   // 9384\n                                                                                                                     // 9385\n                                                                                                                     // 9386\njQuery.fn.extend({                                                                                                   // 9387\n\twrapAll: function( html ) {                                                                                         // 9388\n\t\tif ( jQuery.isFunction( html ) ) {                                                                                 // 9389\n\t\t\treturn this.each(function(i) {                                                                                    // 9390\n\t\t\t\tjQuery(this).wrapAll( html.call(this, i) );                                                                      // 9391\n\t\t\t});                                                                                                               // 9392\n\t\t}                                                                                                                  // 9393\n                                                                                                                     // 9394\n\t\tif ( this[0] ) {                                                                                                   // 9395\n\t\t\t// The elements to wrap the target around                                                                         // 9396\n\t\t\tvar wrap = jQuery( html, this[0].ownerDocument ).eq(0).clone(true);                                               // 9397\n                                                                                                                     // 9398\n\t\t\tif ( this[0].parentNode ) {                                                                                       // 9399\n\t\t\t\twrap.insertBefore( this[0] );                                                                                    // 9400\n\t\t\t}                                                                                                                 // 9401\n                                                                                                                     // 9402\n\t\t\twrap.map(function() {                                                                                             // 9403\n\t\t\t\tvar elem = this;                                                                                                 // 9404\n                                                                                                                     // 9405\n\t\t\t\twhile ( elem.firstChild && elem.firstChild.nodeType === 1 ) {                                                    // 9406\n\t\t\t\t\telem = elem.firstChild;                                                                                         // 9407\n\t\t\t\t}                                                                                                                // 9408\n                                                                                                                     // 9409\n\t\t\t\treturn elem;                                                                                                     // 9410\n\t\t\t}).append( this );                                                                                                // 9411\n\t\t}                                                                                                                  // 9412\n                                                                                                                     // 9413\n\t\treturn this;                                                                                                       // 9414\n\t},                                                                                                                  // 9415\n                                                                                                                     // 9416\n\twrapInner: function( html ) {                                                                                       // 9417\n\t\tif ( jQuery.isFunction( html ) ) {                                                                                 // 9418\n\t\t\treturn this.each(function(i) {                                                                                    // 9419\n\t\t\t\tjQuery(this).wrapInner( html.call(this, i) );                                                                    // 9420\n\t\t\t});                                                                                                               // 9421\n\t\t}                                                                                                                  // 9422\n                                                                                                                     // 9423\n\t\treturn this.each(function() {                                                                                      // 9424\n\t\t\tvar self = jQuery( this ),                                                                                        // 9425\n\t\t\t\tcontents = self.contents();                                                                                      // 9426\n                                                                                                                     // 9427\n\t\t\tif ( contents.length ) {                                                                                          // 9428\n\t\t\t\tcontents.wrapAll( html );                                                                                        // 9429\n                                                                                                                     // 9430\n\t\t\t} else {                                                                                                          // 9431\n\t\t\t\tself.append( html );                                                                                             // 9432\n\t\t\t}                                                                                                                 // 9433\n\t\t});                                                                                                                // 9434\n\t},                                                                                                                  // 9435\n                                                                                                                     // 9436\n\twrap: function( html ) {                                                                                            // 9437\n\t\tvar isFunction = jQuery.isFunction( html );                                                                        // 9438\n                                                                                                                     // 9439\n\t\treturn this.each(function(i) {                                                                                     // 9440\n\t\t\tjQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );                                                 // 9441\n\t\t});                                                                                                                // 9442\n\t},                                                                                                                  // 9443\n                                                                                                                     // 9444\n\tunwrap: function() {                                                                                                // 9445\n\t\treturn this.parent().each(function() {                                                                             // 9446\n\t\t\tif ( !jQuery.nodeName( this, \"body\" ) ) {                                                                         // 9447\n\t\t\t\tjQuery( this ).replaceWith( this.childNodes );                                                                   // 9448\n\t\t\t}                                                                                                                 // 9449\n\t\t}).end();                                                                                                          // 9450\n\t}                                                                                                                   // 9451\n});                                                                                                                  // 9452\n                                                                                                                     // 9453\n                                                                                                                     // 9454\njQuery.expr.filters.hidden = function( elem ) {                                                                      // 9455\n\t// Support: Opera <= 12.12                                                                                          // 9456\n\t// Opera reports offsetWidths and offsetHeights less than zero on some elements                                     // 9457\n\treturn elem.offsetWidth <= 0 && elem.offsetHeight <= 0 ||                                                           // 9458\n\t\t(!support.reliableHiddenOffsets() &&                                                                               // 9459\n\t\t\t((elem.style && elem.style.display) || jQuery.css( elem, \"display\" )) === \"none\");                                // 9460\n};                                                                                                                   // 9461\n                                                                                                                     // 9462\njQuery.expr.filters.visible = function( elem ) {                                                                     // 9463\n\treturn !jQuery.expr.filters.hidden( elem );                                                                         // 9464\n};                                                                                                                   // 9465\n                                                                                                                     // 9466\n                                                                                                                     // 9467\n                                                                                                                     // 9468\n                                                                                                                     // 9469\nvar r20 = /%20/g,                                                                                                    // 9470\n\trbracket = /\\[\\]$/,                                                                                                 // 9471\n\trCRLF = /\\r?\\n/g,                                                                                                   // 9472\n\trsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,                                                          // 9473\n\trsubmittable = /^(?:input|select|textarea|keygen)/i;                                                                // 9474\n                                                                                                                     // 9475\nfunction buildParams( prefix, obj, traditional, add ) {                                                              // 9476\n\tvar name;                                                                                                           // 9477\n                                                                                                                     // 9478\n\tif ( jQuery.isArray( obj ) ) {                                                                                      // 9479\n\t\t// Serialize array item.                                                                                           // 9480\n\t\tjQuery.each( obj, function( i, v ) {                                                                               // 9481\n\t\t\tif ( traditional || rbracket.test( prefix ) ) {                                                                   // 9482\n\t\t\t\t// Treat each array item as a scalar.                                                                            // 9483\n\t\t\t\tadd( prefix, v );                                                                                                // 9484\n                                                                                                                     // 9485\n\t\t\t} else {                                                                                                          // 9486\n\t\t\t\t// Item is non-scalar (array or object), encode its numeric index.                                               // 9487\n\t\t\t\tbuildParams( prefix + \"[\" + ( typeof v === \"object\" ? i : \"\" ) + \"]\", v, traditional, add );                     // 9488\n\t\t\t}                                                                                                                 // 9489\n\t\t});                                                                                                                // 9490\n                                                                                                                     // 9491\n\t} else if ( !traditional && jQuery.type( obj ) === \"object\" ) {                                                     // 9492\n\t\t// Serialize object item.                                                                                          // 9493\n\t\tfor ( name in obj ) {                                                                                              // 9494\n\t\t\tbuildParams( prefix + \"[\" + name + \"]\", obj[ name ], traditional, add );                                          // 9495\n\t\t}                                                                                                                  // 9496\n                                                                                                                     // 9497\n\t} else {                                                                                                            // 9498\n\t\t// Serialize scalar item.                                                                                          // 9499\n\t\tadd( prefix, obj );                                                                                                // 9500\n\t}                                                                                                                   // 9501\n}                                                                                                                    // 9502\n                                                                                                                     // 9503\n// Serialize an array of form elements or a set of                                                                   // 9504\n// key/values into a query string                                                                                    // 9505\njQuery.param = function( a, traditional ) {                                                                          // 9506\n\tvar prefix,                                                                                                         // 9507\n\t\ts = [],                                                                                                            // 9508\n\t\tadd = function( key, value ) {                                                                                     // 9509\n\t\t\t// If value is a function, invoke it and return its value                                                         // 9510\n\t\t\tvalue = jQuery.isFunction( value ) ? value() : ( value == null ? \"\" : value );                                    // 9511\n\t\t\ts[ s.length ] = encodeURIComponent( key ) + \"=\" + encodeURIComponent( value );                                    // 9512\n\t\t};                                                                                                                 // 9513\n                                                                                                                     // 9514\n\t// Set traditional to true for jQuery <= 1.3.2 behavior.                                                            // 9515\n\tif ( traditional === undefined ) {                                                                                  // 9516\n\t\ttraditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;                                              // 9517\n\t}                                                                                                                   // 9518\n                                                                                                                     // 9519\n\t// If an array was passed in, assume that it is an array of form elements.                                          // 9520\n\tif ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {                                          // 9521\n\t\t// Serialize the form elements                                                                                     // 9522\n\t\tjQuery.each( a, function() {                                                                                       // 9523\n\t\t\tadd( this.name, this.value );                                                                                     // 9524\n\t\t});                                                                                                                // 9525\n                                                                                                                     // 9526\n\t} else {                                                                                                            // 9527\n\t\t// If traditional, encode the \"old\" way (the way 1.3.2 or older                                                    // 9528\n\t\t// did it), otherwise encode params recursively.                                                                   // 9529\n\t\tfor ( prefix in a ) {                                                                                              // 9530\n\t\t\tbuildParams( prefix, a[ prefix ], traditional, add );                                                             // 9531\n\t\t}                                                                                                                  // 9532\n\t}                                                                                                                   // 9533\n                                                                                                                     // 9534\n\t// Return the resulting serialization                                                                               // 9535\n\treturn s.join( \"&\" ).replace( r20, \"+\" );                                                                           // 9536\n};                                                                                                                   // 9537\n                                                                                                                     // 9538\njQuery.fn.extend({                                                                                                   // 9539\n\tserialize: function() {                                                                                             // 9540\n\t\treturn jQuery.param( this.serializeArray() );                                                                      // 9541\n\t},                                                                                                                  // 9542\n\tserializeArray: function() {                                                                                        // 9543\n\t\treturn this.map(function() {                                                                                       // 9544\n\t\t\t// Can add propHook for \"elements\" to filter or add form elements                                                 // 9545\n\t\t\tvar elements = jQuery.prop( this, \"elements\" );                                                                   // 9546\n\t\t\treturn elements ? jQuery.makeArray( elements ) : this;                                                            // 9547\n\t\t})                                                                                                                 // 9548\n\t\t.filter(function() {                                                                                               // 9549\n\t\t\tvar type = this.type;                                                                                             // 9550\n\t\t\t// Use .is(\":disabled\") so that fieldset[disabled] works                                                          // 9551\n\t\t\treturn this.name && !jQuery( this ).is( \":disabled\" ) &&                                                          // 9552\n\t\t\t\trsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&                                           // 9553\n\t\t\t\t( this.checked || !rcheckableType.test( type ) );                                                                // 9554\n\t\t})                                                                                                                 // 9555\n\t\t.map(function( i, elem ) {                                                                                         // 9556\n\t\t\tvar val = jQuery( this ).val();                                                                                   // 9557\n                                                                                                                     // 9558\n\t\t\treturn val == null ?                                                                                              // 9559\n\t\t\t\tnull :                                                                                                           // 9560\n\t\t\t\tjQuery.isArray( val ) ?                                                                                          // 9561\n\t\t\t\t\tjQuery.map( val, function( val ) {                                                                              // 9562\n\t\t\t\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };                                               // 9563\n\t\t\t\t\t}) :                                                                                                            // 9564\n\t\t\t\t\t{ name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };                                                       // 9565\n\t\t}).get();                                                                                                          // 9566\n\t}                                                                                                                   // 9567\n});                                                                                                                  // 9568\n                                                                                                                     // 9569\n                                                                                                                     // 9570\n// Create the request object                                                                                         // 9571\n// (This is still attached to ajaxSettings for backward compatibility)                                               // 9572\njQuery.ajaxSettings.xhr = window.ActiveXObject !== undefined ?                                                       // 9573\n\t// Support: IE6+                                                                                                    // 9574\n\tfunction() {                                                                                                        // 9575\n                                                                                                                     // 9576\n\t\t// XHR cannot access local files, always use ActiveX for that case                                                 // 9577\n\t\treturn !this.isLocal &&                                                                                            // 9578\n                                                                                                                     // 9579\n\t\t\t// Support: IE7-8                                                                                                 // 9580\n\t\t\t// oldIE XHR does not support non-RFC2616 methods (#13240)                                                        // 9581\n\t\t\t// See http://msdn.microsoft.com/en-us/library/ie/ms536648(v=vs.85).aspx                                          // 9582\n\t\t\t// and http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9                                                 // 9583\n\t\t\t// Although this check for six methods instead of eight                                                           // 9584\n\t\t\t// since IE also does not support \"trace\" and \"connect\"                                                           // 9585\n\t\t\t/^(get|post|head|put|delete|options)$/i.test( this.type ) &&                                                      // 9586\n                                                                                                                     // 9587\n\t\t\tcreateStandardXHR() || createActiveXHR();                                                                         // 9588\n\t} :                                                                                                                 // 9589\n\t// For all other browsers, use the standard XMLHttpRequest object                                                   // 9590\n\tcreateStandardXHR;                                                                                                  // 9591\n                                                                                                                     // 9592\nvar xhrId = 0,                                                                                                       // 9593\n\txhrCallbacks = {},                                                                                                  // 9594\n\txhrSupported = jQuery.ajaxSettings.xhr();                                                                           // 9595\n                                                                                                                     // 9596\n// Support: IE<10                                                                                                    // 9597\n// Open requests must be manually aborted on unload (#5280)                                                          // 9598\nif ( window.ActiveXObject ) {                                                                                        // 9599\n\tjQuery( window ).on( \"unload\", function() {                                                                         // 9600\n\t\tfor ( var key in xhrCallbacks ) {                                                                                  // 9601\n\t\t\txhrCallbacks[ key ]( undefined, true );                                                                           // 9602\n\t\t}                                                                                                                  // 9603\n\t});                                                                                                                 // 9604\n}                                                                                                                    // 9605\n                                                                                                                     // 9606\n// Determine support properties                                                                                      // 9607\nsupport.cors = !!xhrSupported && ( \"withCredentials\" in xhrSupported );                                              // 9608\nxhrSupported = support.ajax = !!xhrSupported;                                                                        // 9609\n                                                                                                                     // 9610\n// Create transport if the browser can provide an xhr                                                                // 9611\nif ( xhrSupported ) {                                                                                                // 9612\n                                                                                                                     // 9613\n\tjQuery.ajaxTransport(function( options ) {                                                                          // 9614\n\t\t// Cross domain only allowed if supported through XMLHttpRequest                                                   // 9615\n\t\tif ( !options.crossDomain || support.cors ) {                                                                      // 9616\n                                                                                                                     // 9617\n\t\t\tvar callback;                                                                                                     // 9618\n                                                                                                                     // 9619\n\t\t\treturn {                                                                                                          // 9620\n\t\t\t\tsend: function( headers, complete ) {                                                                            // 9621\n\t\t\t\t\tvar i,                                                                                                          // 9622\n\t\t\t\t\t\txhr = options.xhr(),                                                                                           // 9623\n\t\t\t\t\t\tid = ++xhrId;                                                                                                  // 9624\n                                                                                                                     // 9625\n\t\t\t\t\t// Open the socket                                                                                              // 9626\n\t\t\t\t\txhr.open( options.type, options.url, options.async, options.username, options.password );                       // 9627\n                                                                                                                     // 9628\n\t\t\t\t\t// Apply custom fields if provided                                                                              // 9629\n\t\t\t\t\tif ( options.xhrFields ) {                                                                                      // 9630\n\t\t\t\t\t\tfor ( i in options.xhrFields ) {                                                                               // 9631\n\t\t\t\t\t\t\txhr[ i ] = options.xhrFields[ i ];                                                                            // 9632\n\t\t\t\t\t\t}                                                                                                              // 9633\n\t\t\t\t\t}                                                                                                               // 9634\n                                                                                                                     // 9635\n\t\t\t\t\t// Override mime type if needed                                                                                 // 9636\n\t\t\t\t\tif ( options.mimeType && xhr.overrideMimeType ) {                                                               // 9637\n\t\t\t\t\t\txhr.overrideMimeType( options.mimeType );                                                                      // 9638\n\t\t\t\t\t}                                                                                                               // 9639\n                                                                                                                     // 9640\n\t\t\t\t\t// X-Requested-With header                                                                                      // 9641\n\t\t\t\t\t// For cross-domain requests, seeing as conditions for a preflight are                                          // 9642\n\t\t\t\t\t// akin to a jigsaw puzzle, we simply never set it to be sure.                                                  // 9643\n\t\t\t\t\t// (it can always be set on a per-request basis or even using ajaxSetup)                                        // 9644\n\t\t\t\t\t// For same-domain requests, won't change header if already provided.                                           // 9645\n\t\t\t\t\tif ( !options.crossDomain && !headers[\"X-Requested-With\"] ) {                                                   // 9646\n\t\t\t\t\t\theaders[\"X-Requested-With\"] = \"XMLHttpRequest\";                                                                // 9647\n\t\t\t\t\t}                                                                                                               // 9648\n                                                                                                                     // 9649\n\t\t\t\t\t// Set headers                                                                                                  // 9650\n\t\t\t\t\tfor ( i in headers ) {                                                                                          // 9651\n\t\t\t\t\t\t// Support: IE<9                                                                                               // 9652\n\t\t\t\t\t\t// IE's ActiveXObject throws a 'Type Mismatch' exception when setting                                          // 9653\n\t\t\t\t\t\t// request header to a null-value.                                                                             // 9654\n\t\t\t\t\t\t//                                                                                                             // 9655\n\t\t\t\t\t\t// To keep consistent with other XHR implementations, cast the value                                           // 9656\n\t\t\t\t\t\t// to string and ignore `undefined`.                                                                           // 9657\n\t\t\t\t\t\tif ( headers[ i ] !== undefined ) {                                                                            // 9658\n\t\t\t\t\t\t\txhr.setRequestHeader( i, headers[ i ] + \"\" );                                                                 // 9659\n\t\t\t\t\t\t}                                                                                                              // 9660\n\t\t\t\t\t}                                                                                                               // 9661\n                                                                                                                     // 9662\n\t\t\t\t\t// Do send the request                                                                                          // 9663\n\t\t\t\t\t// This may raise an exception which is actually                                                                // 9664\n\t\t\t\t\t// handled in jQuery.ajax (so no try/catch here)                                                                // 9665\n\t\t\t\t\txhr.send( ( options.hasContent && options.data ) || null );                                                     // 9666\n                                                                                                                     // 9667\n\t\t\t\t\t// Listener                                                                                                     // 9668\n\t\t\t\t\tcallback = function( _, isAbort ) {                                                                             // 9669\n\t\t\t\t\t\tvar status, statusText, responses;                                                                             // 9670\n                                                                                                                     // 9671\n\t\t\t\t\t\t// Was never called and is aborted or complete                                                                 // 9672\n\t\t\t\t\t\tif ( callback && ( isAbort || xhr.readyState === 4 ) ) {                                                       // 9673\n\t\t\t\t\t\t\t// Clean up                                                                                                   // 9674\n\t\t\t\t\t\t\tdelete xhrCallbacks[ id ];                                                                                    // 9675\n\t\t\t\t\t\t\tcallback = undefined;                                                                                         // 9676\n\t\t\t\t\t\t\txhr.onreadystatechange = jQuery.noop;                                                                         // 9677\n                                                                                                                     // 9678\n\t\t\t\t\t\t\t// Abort manually if needed                                                                                   // 9679\n\t\t\t\t\t\t\tif ( isAbort ) {                                                                                              // 9680\n\t\t\t\t\t\t\t\tif ( xhr.readyState !== 4 ) {                                                                                // 9681\n\t\t\t\t\t\t\t\t\txhr.abort();                                                                                                // 9682\n\t\t\t\t\t\t\t\t}                                                                                                            // 9683\n\t\t\t\t\t\t\t} else {                                                                                                      // 9684\n\t\t\t\t\t\t\t\tresponses = {};                                                                                              // 9685\n\t\t\t\t\t\t\t\tstatus = xhr.status;                                                                                         // 9686\n                                                                                                                     // 9687\n\t\t\t\t\t\t\t\t// Support: IE<10                                                                                            // 9688\n\t\t\t\t\t\t\t\t// Accessing binary-data responseText throws an exception                                                    // 9689\n\t\t\t\t\t\t\t\t// (#11426)                                                                                                  // 9690\n\t\t\t\t\t\t\t\tif ( typeof xhr.responseText === \"string\" ) {                                                                // 9691\n\t\t\t\t\t\t\t\t\tresponses.text = xhr.responseText;                                                                          // 9692\n\t\t\t\t\t\t\t\t}                                                                                                            // 9693\n                                                                                                                     // 9694\n\t\t\t\t\t\t\t\t// Firefox throws an exception when accessing                                                                // 9695\n\t\t\t\t\t\t\t\t// statusText for faulty cross-domain requests                                                               // 9696\n\t\t\t\t\t\t\t\ttry {                                                                                                        // 9697\n\t\t\t\t\t\t\t\t\tstatusText = xhr.statusText;                                                                                // 9698\n\t\t\t\t\t\t\t\t} catch( e ) {                                                                                               // 9699\n\t\t\t\t\t\t\t\t\t// We normalize with Webkit giving an empty statusText                                                      // 9700\n\t\t\t\t\t\t\t\t\tstatusText = \"\";                                                                                            // 9701\n\t\t\t\t\t\t\t\t}                                                                                                            // 9702\n                                                                                                                     // 9703\n\t\t\t\t\t\t\t\t// Filter status for non standard behaviors                                                                  // 9704\n                                                                                                                     // 9705\n\t\t\t\t\t\t\t\t// If the request is local and we have data: assume a success                                                // 9706\n\t\t\t\t\t\t\t\t// (success with no data won't get notified, that's the best we                                              // 9707\n\t\t\t\t\t\t\t\t// can do given current implementations)                                                                     // 9708\n\t\t\t\t\t\t\t\tif ( !status && options.isLocal && !options.crossDomain ) {                                                  // 9709\n\t\t\t\t\t\t\t\t\tstatus = responses.text ? 200 : 404;                                                                        // 9710\n\t\t\t\t\t\t\t\t// IE - #1450: sometimes returns 1223 when it should be 204                                                  // 9711\n\t\t\t\t\t\t\t\t} else if ( status === 1223 ) {                                                                              // 9712\n\t\t\t\t\t\t\t\t\tstatus = 204;                                                                                               // 9713\n\t\t\t\t\t\t\t\t}                                                                                                            // 9714\n\t\t\t\t\t\t\t}                                                                                                             // 9715\n\t\t\t\t\t\t}                                                                                                              // 9716\n                                                                                                                     // 9717\n\t\t\t\t\t\t// Call complete if needed                                                                                     // 9718\n\t\t\t\t\t\tif ( responses ) {                                                                                             // 9719\n\t\t\t\t\t\t\tcomplete( status, statusText, responses, xhr.getAllResponseHeaders() );                                       // 9720\n\t\t\t\t\t\t}                                                                                                              // 9721\n\t\t\t\t\t};                                                                                                              // 9722\n                                                                                                                     // 9723\n\t\t\t\t\tif ( !options.async ) {                                                                                         // 9724\n\t\t\t\t\t\t// if we're in sync mode we fire the callback                                                                  // 9725\n\t\t\t\t\t\tcallback();                                                                                                    // 9726\n\t\t\t\t\t} else if ( xhr.readyState === 4 ) {                                                                            // 9727\n\t\t\t\t\t\t// (IE6 & IE7) if it's in cache and has been                                                                   // 9728\n\t\t\t\t\t\t// retrieved directly we need to fire the callback                                                             // 9729\n\t\t\t\t\t\tsetTimeout( callback );                                                                                        // 9730\n\t\t\t\t\t} else {                                                                                                        // 9731\n\t\t\t\t\t\t// Add to the list of active xhr callbacks                                                                     // 9732\n\t\t\t\t\t\txhr.onreadystatechange = xhrCallbacks[ id ] = callback;                                                        // 9733\n\t\t\t\t\t}                                                                                                               // 9734\n\t\t\t\t},                                                                                                               // 9735\n                                                                                                                     // 9736\n\t\t\t\tabort: function() {                                                                                              // 9737\n\t\t\t\t\tif ( callback ) {                                                                                               // 9738\n\t\t\t\t\t\tcallback( undefined, true );                                                                                   // 9739\n\t\t\t\t\t}                                                                                                               // 9740\n\t\t\t\t}                                                                                                                // 9741\n\t\t\t};                                                                                                                // 9742\n\t\t}                                                                                                                  // 9743\n\t});                                                                                                                 // 9744\n}                                                                                                                    // 9745\n                                                                                                                     // 9746\n// Functions to create xhrs                                                                                          // 9747\nfunction createStandardXHR() {                                                                                       // 9748\n\ttry {                                                                                                               // 9749\n\t\treturn new window.XMLHttpRequest();                                                                                // 9750\n\t} catch( e ) {}                                                                                                     // 9751\n}                                                                                                                    // 9752\n                                                                                                                     // 9753\nfunction createActiveXHR() {                                                                                         // 9754\n\ttry {                                                                                                               // 9755\n\t\treturn new window.ActiveXObject( \"Microsoft.XMLHTTP\" );                                                            // 9756\n\t} catch( e ) {}                                                                                                     // 9757\n}                                                                                                                    // 9758\n                                                                                                                     // 9759\n                                                                                                                     // 9760\n                                                                                                                     // 9761\n                                                                                                                     // 9762\n// Install script dataType                                                                                           // 9763\njQuery.ajaxSetup({                                                                                                   // 9764\n\taccepts: {                                                                                                          // 9765\n\t\tscript: \"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript\"                // 9766\n\t},                                                                                                                  // 9767\n\tcontents: {                                                                                                         // 9768\n\t\tscript: /(?:java|ecma)script/                                                                                      // 9769\n\t},                                                                                                                  // 9770\n\tconverters: {                                                                                                       // 9771\n\t\t\"text script\": function( text ) {                                                                                  // 9772\n\t\t\tjQuery.globalEval( text );                                                                                        // 9773\n\t\t\treturn text;                                                                                                      // 9774\n\t\t}                                                                                                                  // 9775\n\t}                                                                                                                   // 9776\n});                                                                                                                  // 9777\n                                                                                                                     // 9778\n// Handle cache's special case and global                                                                            // 9779\njQuery.ajaxPrefilter( \"script\", function( s ) {                                                                      // 9780\n\tif ( s.cache === undefined ) {                                                                                      // 9781\n\t\ts.cache = false;                                                                                                   // 9782\n\t}                                                                                                                   // 9783\n\tif ( s.crossDomain ) {                                                                                              // 9784\n\t\ts.type = \"GET\";                                                                                                    // 9785\n\t\ts.global = false;                                                                                                  // 9786\n\t}                                                                                                                   // 9787\n});                                                                                                                  // 9788\n                                                                                                                     // 9789\n// Bind script tag hack transport                                                                                    // 9790\njQuery.ajaxTransport( \"script\", function(s) {                                                                        // 9791\n                                                                                                                     // 9792\n\t// This transport only deals with cross domain requests                                                             // 9793\n\tif ( s.crossDomain ) {                                                                                              // 9794\n                                                                                                                     // 9795\n\t\tvar script,                                                                                                        // 9796\n\t\t\thead = document.head || jQuery(\"head\")[0] || document.documentElement;                                            // 9797\n                                                                                                                     // 9798\n\t\treturn {                                                                                                           // 9799\n                                                                                                                     // 9800\n\t\t\tsend: function( _, callback ) {                                                                                   // 9801\n                                                                                                                     // 9802\n\t\t\t\tscript = document.createElement(\"script\");                                                                       // 9803\n                                                                                                                     // 9804\n\t\t\t\tscript.async = true;                                                                                             // 9805\n                                                                                                                     // 9806\n\t\t\t\tif ( s.scriptCharset ) {                                                                                         // 9807\n\t\t\t\t\tscript.charset = s.scriptCharset;                                                                               // 9808\n\t\t\t\t}                                                                                                                // 9809\n                                                                                                                     // 9810\n\t\t\t\tscript.src = s.url;                                                                                              // 9811\n                                                                                                                     // 9812\n\t\t\t\t// Attach handlers for all browsers                                                                              // 9813\n\t\t\t\tscript.onload = script.onreadystatechange = function( _, isAbort ) {                                             // 9814\n                                                                                                                     // 9815\n\t\t\t\t\tif ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {                           // 9816\n                                                                                                                     // 9817\n\t\t\t\t\t\t// Handle memory leak in IE                                                                                    // 9818\n\t\t\t\t\t\tscript.onload = script.onreadystatechange = null;                                                              // 9819\n                                                                                                                     // 9820\n\t\t\t\t\t\t// Remove the script                                                                                           // 9821\n\t\t\t\t\t\tif ( script.parentNode ) {                                                                                     // 9822\n\t\t\t\t\t\t\tscript.parentNode.removeChild( script );                                                                      // 9823\n\t\t\t\t\t\t}                                                                                                              // 9824\n                                                                                                                     // 9825\n\t\t\t\t\t\t// Dereference the script                                                                                      // 9826\n\t\t\t\t\t\tscript = null;                                                                                                 // 9827\n                                                                                                                     // 9828\n\t\t\t\t\t\t// Callback if not abort                                                                                       // 9829\n\t\t\t\t\t\tif ( !isAbort ) {                                                                                              // 9830\n\t\t\t\t\t\t\tcallback( 200, \"success\" );                                                                                   // 9831\n\t\t\t\t\t\t}                                                                                                              // 9832\n\t\t\t\t\t}                                                                                                               // 9833\n\t\t\t\t};                                                                                                               // 9834\n                                                                                                                     // 9835\n\t\t\t\t// Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending                                        // 9836\n\t\t\t\t// Use native DOM manipulation to avoid our domManip AJAX trickery                                               // 9837\n\t\t\t\thead.insertBefore( script, head.firstChild );                                                                    // 9838\n\t\t\t},                                                                                                                // 9839\n                                                                                                                     // 9840\n\t\t\tabort: function() {                                                                                               // 9841\n\t\t\t\tif ( script ) {                                                                                                  // 9842\n\t\t\t\t\tscript.onload( undefined, true );                                                                               // 9843\n\t\t\t\t}                                                                                                                // 9844\n\t\t\t}                                                                                                                 // 9845\n\t\t};                                                                                                                 // 9846\n\t}                                                                                                                   // 9847\n});                                                                                                                  // 9848\n                                                                                                                     // 9849\n                                                                                                                     // 9850\n                                                                                                                     // 9851\n                                                                                                                     // 9852\nvar oldCallbacks = [],                                                                                               // 9853\n\trjsonp = /(=)\\?(?=&|$)|\\?\\?/;                                                                                       // 9854\n                                                                                                                     // 9855\n// Default jsonp settings                                                                                            // 9856\njQuery.ajaxSetup({                                                                                                   // 9857\n\tjsonp: \"callback\",                                                                                                  // 9858\n\tjsonpCallback: function() {                                                                                         // 9859\n\t\tvar callback = oldCallbacks.pop() || ( jQuery.expando + \"_\" + ( nonce++ ) );                                       // 9860\n\t\tthis[ callback ] = true;                                                                                           // 9861\n\t\treturn callback;                                                                                                   // 9862\n\t}                                                                                                                   // 9863\n});                                                                                                                  // 9864\n                                                                                                                     // 9865\n// Detect, normalize options and install callbacks for jsonp requests                                                // 9866\njQuery.ajaxPrefilter( \"json jsonp\", function( s, originalSettings, jqXHR ) {                                         // 9867\n                                                                                                                     // 9868\n\tvar callbackName, overwritten, responseContainer,                                                                   // 9869\n\t\tjsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?                                                           // 9870\n\t\t\t\"url\" :                                                                                                           // 9871\n\t\t\ttypeof s.data === \"string\" && !( s.contentType || \"\" ).indexOf(\"application/x-www-form-urlencoded\") && rjsonp.test( s.data ) && \"data\"\n\t\t);                                                                                                                 // 9873\n                                                                                                                     // 9874\n\t// Handle iff the expected data type is \"jsonp\" or we have a parameter to set                                       // 9875\n\tif ( jsonProp || s.dataTypes[ 0 ] === \"jsonp\" ) {                                                                   // 9876\n                                                                                                                     // 9877\n\t\t// Get callback name, remembering preexisting value associated with it                                             // 9878\n\t\tcallbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?                                            // 9879\n\t\t\ts.jsonpCallback() :                                                                                               // 9880\n\t\t\ts.jsonpCallback;                                                                                                  // 9881\n                                                                                                                     // 9882\n\t\t// Insert callback into url or form data                                                                           // 9883\n\t\tif ( jsonProp ) {                                                                                                  // 9884\n\t\t\ts[ jsonProp ] = s[ jsonProp ].replace( rjsonp, \"$1\" + callbackName );                                             // 9885\n\t\t} else if ( s.jsonp !== false ) {                                                                                  // 9886\n\t\t\ts.url += ( rquery.test( s.url ) ? \"&\" : \"?\" ) + s.jsonp + \"=\" + callbackName;                                     // 9887\n\t\t}                                                                                                                  // 9888\n                                                                                                                     // 9889\n\t\t// Use data converter to retrieve json after script execution                                                      // 9890\n\t\ts.converters[\"script json\"] = function() {                                                                         // 9891\n\t\t\tif ( !responseContainer ) {                                                                                       // 9892\n\t\t\t\tjQuery.error( callbackName + \" was not called\" );                                                                // 9893\n\t\t\t}                                                                                                                 // 9894\n\t\t\treturn responseContainer[ 0 ];                                                                                    // 9895\n\t\t};                                                                                                                 // 9896\n                                                                                                                     // 9897\n\t\t// force json dataType                                                                                             // 9898\n\t\ts.dataTypes[ 0 ] = \"json\";                                                                                         // 9899\n                                                                                                                     // 9900\n\t\t// Install callback                                                                                                // 9901\n\t\toverwritten = window[ callbackName ];                                                                              // 9902\n\t\twindow[ callbackName ] = function() {                                                                              // 9903\n\t\t\tresponseContainer = arguments;                                                                                    // 9904\n\t\t};                                                                                                                 // 9905\n                                                                                                                     // 9906\n\t\t// Clean-up function (fires after converters)                                                                      // 9907\n\t\tjqXHR.always(function() {                                                                                          // 9908\n\t\t\t// Restore preexisting value                                                                                      // 9909\n\t\t\twindow[ callbackName ] = overwritten;                                                                             // 9910\n                                                                                                                     // 9911\n\t\t\t// Save back as free                                                                                              // 9912\n\t\t\tif ( s[ callbackName ] ) {                                                                                        // 9913\n\t\t\t\t// make sure that re-using the options doesn't screw things around                                               // 9914\n\t\t\t\ts.jsonpCallback = originalSettings.jsonpCallback;                                                                // 9915\n                                                                                                                     // 9916\n\t\t\t\t// save the callback name for future use                                                                         // 9917\n\t\t\t\toldCallbacks.push( callbackName );                                                                               // 9918\n\t\t\t}                                                                                                                 // 9919\n                                                                                                                     // 9920\n\t\t\t// Call if it was a function and we have a response                                                               // 9921\n\t\t\tif ( responseContainer && jQuery.isFunction( overwritten ) ) {                                                    // 9922\n\t\t\t\toverwritten( responseContainer[ 0 ] );                                                                           // 9923\n\t\t\t}                                                                                                                 // 9924\n                                                                                                                     // 9925\n\t\t\tresponseContainer = overwritten = undefined;                                                                      // 9926\n\t\t});                                                                                                                // 9927\n                                                                                                                     // 9928\n\t\t// Delegate to script                                                                                              // 9929\n\t\treturn \"script\";                                                                                                   // 9930\n\t}                                                                                                                   // 9931\n});                                                                                                                  // 9932\n                                                                                                                     // 9933\n                                                                                                                     // 9934\n                                                                                                                     // 9935\n                                                                                                                     // 9936\n// data: string of html                                                                                              // 9937\n// context (optional): If specified, the fragment will be created in this context, defaults to document              // 9938\n// keepScripts (optional): If true, will include scripts passed in the html string                                   // 9939\njQuery.parseHTML = function( data, context, keepScripts ) {                                                          // 9940\n\tif ( !data || typeof data !== \"string\" ) {                                                                          // 9941\n\t\treturn null;                                                                                                       // 9942\n\t}                                                                                                                   // 9943\n\tif ( typeof context === \"boolean\" ) {                                                                               // 9944\n\t\tkeepScripts = context;                                                                                             // 9945\n\t\tcontext = false;                                                                                                   // 9946\n\t}                                                                                                                   // 9947\n\tcontext = context || document;                                                                                      // 9948\n                                                                                                                     // 9949\n\tvar parsed = rsingleTag.exec( data ),                                                                               // 9950\n\t\tscripts = !keepScripts && [];                                                                                      // 9951\n                                                                                                                     // 9952\n\t// Single tag                                                                                                       // 9953\n\tif ( parsed ) {                                                                                                     // 9954\n\t\treturn [ context.createElement( parsed[1] ) ];                                                                     // 9955\n\t}                                                                                                                   // 9956\n                                                                                                                     // 9957\n\tparsed = jQuery.buildFragment( [ data ], context, scripts );                                                        // 9958\n                                                                                                                     // 9959\n\tif ( scripts && scripts.length ) {                                                                                  // 9960\n\t\tjQuery( scripts ).remove();                                                                                        // 9961\n\t}                                                                                                                   // 9962\n                                                                                                                     // 9963\n\treturn jQuery.merge( [], parsed.childNodes );                                                                       // 9964\n};                                                                                                                   // 9965\n                                                                                                                     // 9966\n                                                                                                                     // 9967\n// Keep a copy of the old load method                                                                                // 9968\nvar _load = jQuery.fn.load;                                                                                          // 9969\n                                                                                                                     // 9970\n/**                                                                                                                  // 9971\n * Load a url into a page                                                                                            // 9972\n */                                                                                                                  // 9973\njQuery.fn.load = function( url, params, callback ) {                                                                 // 9974\n\tif ( typeof url !== \"string\" && _load ) {                                                                           // 9975\n\t\treturn _load.apply( this, arguments );                                                                             // 9976\n\t}                                                                                                                   // 9977\n                                                                                                                     // 9978\n\tvar selector, response, type,                                                                                       // 9979\n\t\tself = this,                                                                                                       // 9980\n\t\toff = url.indexOf(\" \");                                                                                            // 9981\n                                                                                                                     // 9982\n\tif ( off >= 0 ) {                                                                                                   // 9983\n\t\tselector = url.slice( off, url.length );                                                                           // 9984\n\t\turl = url.slice( 0, off );                                                                                         // 9985\n\t}                                                                                                                   // 9986\n                                                                                                                     // 9987\n\t// If it's a function                                                                                               // 9988\n\tif ( jQuery.isFunction( params ) ) {                                                                                // 9989\n                                                                                                                     // 9990\n\t\t// We assume that it's the callback                                                                                // 9991\n\t\tcallback = params;                                                                                                 // 9992\n\t\tparams = undefined;                                                                                                // 9993\n                                                                                                                     // 9994\n\t// Otherwise, build a param string                                                                                  // 9995\n\t} else if ( params && typeof params === \"object\" ) {                                                                // 9996\n\t\ttype = \"POST\";                                                                                                     // 9997\n\t}                                                                                                                   // 9998\n                                                                                                                     // 9999\n\t// If we have elements to modify, make the request                                                                  // 10000\n\tif ( self.length > 0 ) {                                                                                            // 10001\n\t\tjQuery.ajax({                                                                                                      // 10002\n\t\t\turl: url,                                                                                                         // 10003\n                                                                                                                     // 10004\n\t\t\t// if \"type\" variable is undefined, then \"GET\" method will be used                                                // 10005\n\t\t\ttype: type,                                                                                                       // 10006\n\t\t\tdataType: \"html\",                                                                                                 // 10007\n\t\t\tdata: params                                                                                                      // 10008\n\t\t}).done(function( responseText ) {                                                                                 // 10009\n                                                                                                                     // 10010\n\t\t\t// Save response for use in complete callback                                                                     // 10011\n\t\t\tresponse = arguments;                                                                                             // 10012\n                                                                                                                     // 10013\n\t\t\tself.html( selector ?                                                                                             // 10014\n                                                                                                                     // 10015\n\t\t\t\t// If a selector was specified, locate the right elements in a dummy div                                         // 10016\n\t\t\t\t// Exclude scripts to avoid IE 'Permission Denied' errors                                                        // 10017\n\t\t\t\tjQuery(\"<div>\").append( jQuery.parseHTML( responseText ) ).find( selector ) :                                    // 10018\n                                                                                                                     // 10019\n\t\t\t\t// Otherwise use the full result                                                                                 // 10020\n\t\t\t\tresponseText );                                                                                                  // 10021\n                                                                                                                     // 10022\n\t\t}).complete( callback && function( jqXHR, status ) {                                                               // 10023\n\t\t\tself.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );                                         // 10024\n\t\t});                                                                                                                // 10025\n\t}                                                                                                                   // 10026\n                                                                                                                     // 10027\n\treturn this;                                                                                                        // 10028\n};                                                                                                                   // 10029\n                                                                                                                     // 10030\n                                                                                                                     // 10031\n                                                                                                                     // 10032\n                                                                                                                     // 10033\njQuery.expr.filters.animated = function( elem ) {                                                                    // 10034\n\treturn jQuery.grep(jQuery.timers, function( fn ) {                                                                  // 10035\n\t\treturn elem === fn.elem;                                                                                           // 10036\n\t}).length;                                                                                                          // 10037\n};                                                                                                                   // 10038\n                                                                                                                     // 10039\n                                                                                                                     // 10040\n                                                                                                                     // 10041\n                                                                                                                     // 10042\n                                                                                                                     // 10043\nvar docElem = window.document.documentElement;                                                                       // 10044\n                                                                                                                     // 10045\n/**                                                                                                                  // 10046\n * Gets a window from an element                                                                                     // 10047\n */                                                                                                                  // 10048\nfunction getWindow( elem ) {                                                                                         // 10049\n\treturn jQuery.isWindow( elem ) ?                                                                                    // 10050\n\t\telem :                                                                                                             // 10051\n\t\telem.nodeType === 9 ?                                                                                              // 10052\n\t\t\telem.defaultView || elem.parentWindow :                                                                           // 10053\n\t\t\tfalse;                                                                                                            // 10054\n}                                                                                                                    // 10055\n                                                                                                                     // 10056\njQuery.offset = {                                                                                                    // 10057\n\tsetOffset: function( elem, options, i ) {                                                                           // 10058\n\t\tvar curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,                             // 10059\n\t\t\tposition = jQuery.css( elem, \"position\" ),                                                                        // 10060\n\t\t\tcurElem = jQuery( elem ),                                                                                         // 10061\n\t\t\tprops = {};                                                                                                       // 10062\n                                                                                                                     // 10063\n\t\t// set position first, in-case top/left are set even on static elem                                                // 10064\n\t\tif ( position === \"static\" ) {                                                                                     // 10065\n\t\t\telem.style.position = \"relative\";                                                                                 // 10066\n\t\t}                                                                                                                  // 10067\n                                                                                                                     // 10068\n\t\tcurOffset = curElem.offset();                                                                                      // 10069\n\t\tcurCSSTop = jQuery.css( elem, \"top\" );                                                                             // 10070\n\t\tcurCSSLeft = jQuery.css( elem, \"left\" );                                                                           // 10071\n\t\tcalculatePosition = ( position === \"absolute\" || position === \"fixed\" ) &&                                         // 10072\n\t\t\tjQuery.inArray(\"auto\", [ curCSSTop, curCSSLeft ] ) > -1;                                                          // 10073\n                                                                                                                     // 10074\n\t\t// need to be able to calculate position if either top or left is auto and position is either absolute or fixed    // 10075\n\t\tif ( calculatePosition ) {                                                                                         // 10076\n\t\t\tcurPosition = curElem.position();                                                                                 // 10077\n\t\t\tcurTop = curPosition.top;                                                                                         // 10078\n\t\t\tcurLeft = curPosition.left;                                                                                       // 10079\n\t\t} else {                                                                                                           // 10080\n\t\t\tcurTop = parseFloat( curCSSTop ) || 0;                                                                            // 10081\n\t\t\tcurLeft = parseFloat( curCSSLeft ) || 0;                                                                          // 10082\n\t\t}                                                                                                                  // 10083\n                                                                                                                     // 10084\n\t\tif ( jQuery.isFunction( options ) ) {                                                                              // 10085\n\t\t\toptions = options.call( elem, i, curOffset );                                                                     // 10086\n\t\t}                                                                                                                  // 10087\n                                                                                                                     // 10088\n\t\tif ( options.top != null ) {                                                                                       // 10089\n\t\t\tprops.top = ( options.top - curOffset.top ) + curTop;                                                             // 10090\n\t\t}                                                                                                                  // 10091\n\t\tif ( options.left != null ) {                                                                                      // 10092\n\t\t\tprops.left = ( options.left - curOffset.left ) + curLeft;                                                         // 10093\n\t\t}                                                                                                                  // 10094\n                                                                                                                     // 10095\n\t\tif ( \"using\" in options ) {                                                                                        // 10096\n\t\t\toptions.using.call( elem, props );                                                                                // 10097\n\t\t} else {                                                                                                           // 10098\n\t\t\tcurElem.css( props );                                                                                             // 10099\n\t\t}                                                                                                                  // 10100\n\t}                                                                                                                   // 10101\n};                                                                                                                   // 10102\n                                                                                                                     // 10103\njQuery.fn.extend({                                                                                                   // 10104\n\toffset: function( options ) {                                                                                       // 10105\n\t\tif ( arguments.length ) {                                                                                          // 10106\n\t\t\treturn options === undefined ?                                                                                    // 10107\n\t\t\t\tthis :                                                                                                           // 10108\n\t\t\t\tthis.each(function( i ) {                                                                                        // 10109\n\t\t\t\t\tjQuery.offset.setOffset( this, options, i );                                                                    // 10110\n\t\t\t\t});                                                                                                              // 10111\n\t\t}                                                                                                                  // 10112\n                                                                                                                     // 10113\n\t\tvar docElem, win,                                                                                                  // 10114\n\t\t\tbox = { top: 0, left: 0 },                                                                                        // 10115\n\t\t\telem = this[ 0 ],                                                                                                 // 10116\n\t\t\tdoc = elem && elem.ownerDocument;                                                                                 // 10117\n                                                                                                                     // 10118\n\t\tif ( !doc ) {                                                                                                      // 10119\n\t\t\treturn;                                                                                                           // 10120\n\t\t}                                                                                                                  // 10121\n                                                                                                                     // 10122\n\t\tdocElem = doc.documentElement;                                                                                     // 10123\n                                                                                                                     // 10124\n\t\t// Make sure it's not a disconnected DOM node                                                                      // 10125\n\t\tif ( !jQuery.contains( docElem, elem ) ) {                                                                         // 10126\n\t\t\treturn box;                                                                                                       // 10127\n\t\t}                                                                                                                  // 10128\n                                                                                                                     // 10129\n\t\t// If we don't have gBCR, just use 0,0 rather than error                                                           // 10130\n\t\t// BlackBerry 5, iOS 3 (original iPhone)                                                                           // 10131\n\t\tif ( typeof elem.getBoundingClientRect !== strundefined ) {                                                        // 10132\n\t\t\tbox = elem.getBoundingClientRect();                                                                               // 10133\n\t\t}                                                                                                                  // 10134\n\t\twin = getWindow( doc );                                                                                            // 10135\n\t\treturn {                                                                                                           // 10136\n\t\t\ttop: box.top  + ( win.pageYOffset || docElem.scrollTop )  - ( docElem.clientTop  || 0 ),                          // 10137\n\t\t\tleft: box.left + ( win.pageXOffset || docElem.scrollLeft ) - ( docElem.clientLeft || 0 )                          // 10138\n\t\t};                                                                                                                 // 10139\n\t},                                                                                                                  // 10140\n                                                                                                                     // 10141\n\tposition: function() {                                                                                              // 10142\n\t\tif ( !this[ 0 ] ) {                                                                                                // 10143\n\t\t\treturn;                                                                                                           // 10144\n\t\t}                                                                                                                  // 10145\n                                                                                                                     // 10146\n\t\tvar offsetParent, offset,                                                                                          // 10147\n\t\t\tparentOffset = { top: 0, left: 0 },                                                                               // 10148\n\t\t\telem = this[ 0 ];                                                                                                 // 10149\n                                                                                                                     // 10150\n\t\t// fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is its only offset parent    // 10151\n\t\tif ( jQuery.css( elem, \"position\" ) === \"fixed\" ) {                                                                // 10152\n\t\t\t// we assume that getBoundingClientRect is available when computed position is fixed                              // 10153\n\t\t\toffset = elem.getBoundingClientRect();                                                                            // 10154\n\t\t} else {                                                                                                           // 10155\n\t\t\t// Get *real* offsetParent                                                                                        // 10156\n\t\t\toffsetParent = this.offsetParent();                                                                               // 10157\n                                                                                                                     // 10158\n\t\t\t// Get correct offsets                                                                                            // 10159\n\t\t\toffset = this.offset();                                                                                           // 10160\n\t\t\tif ( !jQuery.nodeName( offsetParent[ 0 ], \"html\" ) ) {                                                            // 10161\n\t\t\t\tparentOffset = offsetParent.offset();                                                                            // 10162\n\t\t\t}                                                                                                                 // 10163\n                                                                                                                     // 10164\n\t\t\t// Add offsetParent borders                                                                                       // 10165\n\t\t\tparentOffset.top  += jQuery.css( offsetParent[ 0 ], \"borderTopWidth\", true );                                     // 10166\n\t\t\tparentOffset.left += jQuery.css( offsetParent[ 0 ], \"borderLeftWidth\", true );                                    // 10167\n\t\t}                                                                                                                  // 10168\n                                                                                                                     // 10169\n\t\t// Subtract parent offsets and element margins                                                                     // 10170\n\t\t// note: when an element has margin: auto the offsetLeft and marginLeft                                            // 10171\n\t\t// are the same in Safari causing offset.left to incorrectly be 0                                                  // 10172\n\t\treturn {                                                                                                           // 10173\n\t\t\ttop:  offset.top  - parentOffset.top - jQuery.css( elem, \"marginTop\", true ),                                     // 10174\n\t\t\tleft: offset.left - parentOffset.left - jQuery.css( elem, \"marginLeft\", true)                                     // 10175\n\t\t};                                                                                                                 // 10176\n\t},                                                                                                                  // 10177\n                                                                                                                     // 10178\n\toffsetParent: function() {                                                                                          // 10179\n\t\treturn this.map(function() {                                                                                       // 10180\n\t\t\tvar offsetParent = this.offsetParent || docElem;                                                                  // 10181\n                                                                                                                     // 10182\n\t\t\twhile ( offsetParent && ( !jQuery.nodeName( offsetParent, \"html\" ) && jQuery.css( offsetParent, \"position\" ) === \"static\" ) ) {\n\t\t\t\toffsetParent = offsetParent.offsetParent;                                                                        // 10184\n\t\t\t}                                                                                                                 // 10185\n\t\t\treturn offsetParent || docElem;                                                                                   // 10186\n\t\t});                                                                                                                // 10187\n\t}                                                                                                                   // 10188\n});                                                                                                                  // 10189\n                                                                                                                     // 10190\n// Create scrollLeft and scrollTop methods                                                                           // 10191\njQuery.each( { scrollLeft: \"pageXOffset\", scrollTop: \"pageYOffset\" }, function( method, prop ) {                     // 10192\n\tvar top = /Y/.test( prop );                                                                                         // 10193\n                                                                                                                     // 10194\n\tjQuery.fn[ method ] = function( val ) {                                                                             // 10195\n\t\treturn access( this, function( elem, method, val ) {                                                               // 10196\n\t\t\tvar win = getWindow( elem );                                                                                      // 10197\n                                                                                                                     // 10198\n\t\t\tif ( val === undefined ) {                                                                                        // 10199\n\t\t\t\treturn win ? (prop in win) ? win[ prop ] :                                                                       // 10200\n\t\t\t\t\twin.document.documentElement[ method ] :                                                                        // 10201\n\t\t\t\t\telem[ method ];                                                                                                 // 10202\n\t\t\t}                                                                                                                 // 10203\n                                                                                                                     // 10204\n\t\t\tif ( win ) {                                                                                                      // 10205\n\t\t\t\twin.scrollTo(                                                                                                    // 10206\n\t\t\t\t\t!top ? val : jQuery( win ).scrollLeft(),                                                                        // 10207\n\t\t\t\t\ttop ? val : jQuery( win ).scrollTop()                                                                           // 10208\n\t\t\t\t);                                                                                                               // 10209\n                                                                                                                     // 10210\n\t\t\t} else {                                                                                                          // 10211\n\t\t\t\telem[ method ] = val;                                                                                            // 10212\n\t\t\t}                                                                                                                 // 10213\n\t\t}, method, val, arguments.length, null );                                                                          // 10214\n\t};                                                                                                                  // 10215\n});                                                                                                                  // 10216\n                                                                                                                     // 10217\n// Add the top/left cssHooks using jQuery.fn.position                                                                // 10218\n// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084                                                         // 10219\n// getComputedStyle returns percent when specified for top/left/bottom/right                                         // 10220\n// rather than make the css module depend on the offset module, we just check for it here                            // 10221\njQuery.each( [ \"top\", \"left\" ], function( i, prop ) {                                                                // 10222\n\tjQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,                                                      // 10223\n\t\tfunction( elem, computed ) {                                                                                       // 10224\n\t\t\tif ( computed ) {                                                                                                 // 10225\n\t\t\t\tcomputed = curCSS( elem, prop );                                                                                 // 10226\n\t\t\t\t// if curCSS returns percentage, fallback to offset                                                              // 10227\n\t\t\t\treturn rnumnonpx.test( computed ) ?                                                                              // 10228\n\t\t\t\t\tjQuery( elem ).position()[ prop ] + \"px\" :                                                                      // 10229\n\t\t\t\t\tcomputed;                                                                                                       // 10230\n\t\t\t}                                                                                                                 // 10231\n\t\t}                                                                                                                  // 10232\n\t);                                                                                                                  // 10233\n});                                                                                                                  // 10234\n                                                                                                                     // 10235\n                                                                                                                     // 10236\n// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods                                 // 10237\njQuery.each( { Height: \"height\", Width: \"width\" }, function( name, type ) {                                          // 10238\n\tjQuery.each( { padding: \"inner\" + name, content: type, \"\": \"outer\" + name }, function( defaultExtra, funcName ) {   // 10239\n\t\t// margin is only for outerHeight, outerWidth                                                                      // 10240\n\t\tjQuery.fn[ funcName ] = function( margin, value ) {                                                                // 10241\n\t\t\tvar chainable = arguments.length && ( defaultExtra || typeof margin !== \"boolean\" ),                              // 10242\n\t\t\t\textra = defaultExtra || ( margin === true || value === true ? \"margin\" : \"border\" );                             // 10243\n                                                                                                                     // 10244\n\t\t\treturn access( this, function( elem, type, value ) {                                                              // 10245\n\t\t\t\tvar doc;                                                                                                         // 10246\n                                                                                                                     // 10247\n\t\t\t\tif ( jQuery.isWindow( elem ) ) {                                                                                 // 10248\n\t\t\t\t\t// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there                                // 10249\n\t\t\t\t\t// isn't a whole lot we can do. See pull request at this URL for discussion:                                    // 10250\n\t\t\t\t\t// https://github.com/jquery/jquery/pull/764                                                                    // 10251\n\t\t\t\t\treturn elem.document.documentElement[ \"client\" + name ];                                                        // 10252\n\t\t\t\t}                                                                                                                // 10253\n                                                                                                                     // 10254\n\t\t\t\t// Get document width or height                                                                                  // 10255\n\t\t\t\tif ( elem.nodeType === 9 ) {                                                                                     // 10256\n\t\t\t\t\tdoc = elem.documentElement;                                                                                     // 10257\n                                                                                                                     // 10258\n\t\t\t\t\t// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height], whichever is greatest           // 10259\n\t\t\t\t\t// unfortunately, this causes bug #3838 in IE6/8 only, but there is currently no good, small way to fix it.     // 10260\n\t\t\t\t\treturn Math.max(                                                                                                // 10261\n\t\t\t\t\t\telem.body[ \"scroll\" + name ], doc[ \"scroll\" + name ],                                                          // 10262\n\t\t\t\t\t\telem.body[ \"offset\" + name ], doc[ \"offset\" + name ],                                                          // 10263\n\t\t\t\t\t\tdoc[ \"client\" + name ]                                                                                         // 10264\n\t\t\t\t\t);                                                                                                              // 10265\n\t\t\t\t}                                                                                                                // 10266\n                                                                                                                     // 10267\n\t\t\t\treturn value === undefined ?                                                                                     // 10268\n\t\t\t\t\t// Get width or height on the element, requesting but not forcing parseFloat                                    // 10269\n\t\t\t\t\tjQuery.css( elem, type, extra ) :                                                                               // 10270\n                                                                                                                     // 10271\n\t\t\t\t\t// Set width or height on the element                                                                           // 10272\n\t\t\t\t\tjQuery.style( elem, type, value, extra );                                                                       // 10273\n\t\t\t}, type, chainable ? margin : undefined, chainable, null );                                                       // 10274\n\t\t};                                                                                                                 // 10275\n\t});                                                                                                                 // 10276\n});                                                                                                                  // 10277\n                                                                                                                     // 10278\n                                                                                                                     // 10279\n// The number of elements contained in the matched element set                                                       // 10280\njQuery.fn.size = function() {                                                                                        // 10281\n\treturn this.length;                                                                                                 // 10282\n};                                                                                                                   // 10283\n                                                                                                                     // 10284\njQuery.fn.andSelf = jQuery.fn.addBack;                                                                               // 10285\n                                                                                                                     // 10286\n                                                                                                                     // 10287\n                                                                                                                     // 10288\n                                                                                                                     // 10289\n// Register as a named AMD module, since jQuery can be concatenated with other                                       // 10290\n// files that may use define, but not via a proper concatenation script that                                         // 10291\n// understands anonymous AMD modules. A named AMD is safest and most robust                                          // 10292\n// way to register. Lowercase jquery is used because AMD module names are                                            // 10293\n// derived from file names, and jQuery is normally delivered in a lowercase                                          // 10294\n// file name. Do this after creating the global so that if an AMD module wants                                       // 10295\n// to call noConflict to hide this version of jQuery, it will work.                                                  // 10296\nif ( typeof define === \"function\" && define.amd ) {                                                                  // 10297\n\tdefine( \"jquery\", [], function() {                                                                                  // 10298\n\t\treturn jQuery;                                                                                                     // 10299\n\t});                                                                                                                 // 10300\n}                                                                                                                    // 10301\n                                                                                                                     // 10302\n                                                                                                                     // 10303\n                                                                                                                     // 10304\n                                                                                                                     // 10305\nvar                                                                                                                  // 10306\n\t// Map over jQuery in case of overwrite                                                                             // 10307\n\t_jQuery = window.jQuery,                                                                                            // 10308\n                                                                                                                     // 10309\n\t// Map over the $ in case of overwrite                                                                              // 10310\n\t_$ = window.$;                                                                                                      // 10311\n                                                                                                                     // 10312\njQuery.noConflict = function( deep ) {                                                                               // 10313\n\tif ( window.$ === jQuery ) {                                                                                        // 10314\n\t\twindow.$ = _$;                                                                                                     // 10315\n\t}                                                                                                                   // 10316\n                                                                                                                     // 10317\n\tif ( deep && window.jQuery === jQuery ) {                                                                           // 10318\n\t\twindow.jQuery = _jQuery;                                                                                           // 10319\n\t}                                                                                                                   // 10320\n                                                                                                                     // 10321\n\treturn jQuery;                                                                                                      // 10322\n};                                                                                                                   // 10323\n                                                                                                                     // 10324\n// Expose jQuery and $ identifiers, even in                                                                          // 10325\n// AMD (#7102#comment:10, https://github.com/jquery/jquery/pull/557)                                                 // 10326\n// and CommonJS for browser emulators (#13566)                                                                       // 10327\nif ( typeof noGlobal === strundefined ) {                                                                            // 10328\n\twindow.jQuery = window.$ = jQuery;                                                                                  // 10329\n}                                                                                                                    // 10330\n                                                                                                                     // 10331\n                                                                                                                     // 10332\n                                                                                                                     // 10333\n                                                                                                                     // 10334\nreturn jQuery;                                                                                                       // 10335\n                                                                                                                     // 10336\n}));                                                                                                                 // 10337\n                                                                                                                     // 10338\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/jquery/post.js                                                                                           //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n// Put jQuery and $ in our exported package-scope variables and remove window.$.                                     // 1\n// (Sadly, we don't call noConflict(true), which would also remove                                                   // 2\n// window.jQuery, because bootstrap very specifically relies on window.jQuery.)                                      // 3\n$ = jQuery = window.jQuery.noConflict();                                                                             // 4\n                                                                                                                     // 5\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n///////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nPackage._define(\"jquery\", {\n  $: $,\n  jQuery: jQuery\n});\n\n})();\n","servePath":"/packages/jquery.js"}]