[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nECMAScript = Package.ecmascript.ECMAScript;\nReactMeteorData = Package['react-meteor-data'].ReactMeteorData;\nRoles = Package['alanning:roles'].Roles;\nFlowRouter = Package['kadira:flow-router'].FlowRouter;\nmoment = Package['momentjs:moment'].moment;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nWebAppInternals = Package.webapp.WebAppInternals;\nmain = Package.webapp.main;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nmeteorInstall = Package.modules.meteorInstall;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nAccounts = Package['accounts-base'].Accounts;\nAutoupdate = Package.autoupdate.Autoupdate;\n\n","servePath":"/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"imports\":{\"shiftMgmt\":{\"shiftRoster\":{\"shiftAllotment\":{\"api\":{\"shiftAllocation.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////\n//                                                                                   //\n// imports/shiftMgmt/shiftRoster/shiftAllotment/api/shiftAllocation.js               //\n//                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////\n                                                                                     //\nmodule.export({\n  ShiftAllocation: () => ShiftAllocation\n});\nlet Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 0);\nconst ShiftAllocation = new Mongo.Collection('shiftAllocation');\n///////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"shiftDefine\":{\"api\":{\"shiftSetting.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////\n//                                                                                   //\n// imports/shiftMgmt/shiftRoster/shiftDefine/api/shiftSetting.js                     //\n//                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////\n                                                                                     //\nmodule.export({\n  ShiftSetting: () => ShiftSetting\n});\nlet Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 0);\nconst ShiftSetting = new Mongo.Collection('shiftSetting');\n\nif (Meteor.isServer) {\n  Meteor.publish(\"shiftData\", function (empid) {\n    var shiftprof = ShiftSetting.find({\n      \"_id\": empid\n    });\n    return shiftprof;\n  });\n  Meteor.publish(\"allShiftData\", function () {\n    var allShift = ShiftSetting.find({});\n    console.log(\"allShift\", allShift);\n    return allShift;\n  });\n}\n\nMeteor.methods({\n  \"insertBasicInfo\": function (formValues) {\n    console.log(formValues);\n    var emp_id = ShiftSetting.insert({\n      \"shiftName\": formValues.shiftName,\n      \"startTime\": formValues.startTime,\n      \"startTimeAmPm\": formValues.startTimeAmPm,\n      \"endTime\": formValues.endTime,\n      \"endTimeAmPm\": formValues.endTimeAmPm,\n      \"effectiveFrom\": formValues.effectiveFrom,\n      \"tillDate\": formValues.tillDate\n    }, (error, result) => {\n      if (error) {\n        console.log(error);\n        return;\n      } else {\n        console.log(result);\n        return;\n      }\n    });\n    return emp_id;\n  },\n  \"updateBasicInfo\": function (formValues) {\n    console.log(formValues);\n    var emp_id = ShiftSetting.update({\n      \"_id\": formValues._id\n    }, {\n      $set: {\n        \"shiftName\": formValues.shiftName,\n        \"startTime\": formValues.startTime,\n        \"startTimeAmPm\": formValues.startTimeAmPm,\n        \"endTime\": formValues.endTime,\n        \"endTimeAmPm\": formValues.endTimeAmPm,\n        \"effectiveFrom\": formValues.effectiveFrom,\n        \"tillDate\": formValues.tillDate\n      }\n    }, (error, result) => {\n      if (error) {\n        console.log(error);\n        return;\n      } else {\n        console.log(result);\n        return;\n      }\n    });\n    return emp_id;\n  },\n  \"deleteAllotedShift\": function (empid) {\n    ShiftSetting.remove({\n      \"_id\": empid\n    }, (error, result) => {\n      if (error) {\n        return error;\n        console.log(error);\n      } else {\n        return result;\n      }\n    });\n    return;\n  }\n});\n///////////////////////////////////////////////////////////////////////////////////////\n\n}}}}}},\"server\":{\"main.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////\n//                                                                                   //\n// server/main.js                                                                    //\n//                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////\n                                                                                     //\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nmodule.link(\"/imports/shiftMgmt/shiftRoster/shiftAllotment/api/shiftAllocation.js\");\nmodule.link(\"/imports/shiftMgmt/shiftRoster/shiftDefine/api/shiftSetting.js\");\n\n/*import Links from '/imports/api/links';\n\nfunction insertLink(title, url) {\n  Links.insert({ title, url, createdAt: new Date() });\n}*/\nMeteor.startup(() => {// If the Links collection is empty, add some data.\n\n  /*  if (Links.find().count() === 0) {\n      insertLink(\n        'Do the Tutorial',\n        'https://www.meteor.com/tutorials/react/creating-an-app'\n      );\n  \n      insertLink(\n        'Follow the Guide',\n        'http://guide.meteor.com'\n      );\n  \n      insertLink(\n        'Read the Docs',\n        'https://docs.meteor.com'\n      );\n  \n      insertLink(\n        'Discussions',\n        'https://forums.meteor.com'\n      );\n    }*/\n});\n///////////////////////////////////////////////////////////////////////////////////////\n\n}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\",\n    \".jsx\"\n  ]\n});\n\nvar exports = require(\"/server/main.js\");","hash":"12e7e02149215b8601aec864c2b070fb9139cd42","servePath":"/app.js","sourceMap":{"version":3,"sources":["imports/shiftMgmt/shiftRoster/shiftAllotment/api/shiftAllocation.js","imports/shiftMgmt/shiftRoster/shiftDefine/api/shiftSetting.js","server/main.js"],"names":["module","export","ShiftAllocation","Mongo","link","v","Collection","ShiftSetting","Meteor","isServer","publish","empid","shiftprof","find","allShift","console","log","methods","formValues","emp_id","insert","shiftName","startTime","startTimeAmPm","endTime","endTimeAmPm","effectiveFrom","tillDate","error","result","update","_id","$set","remove","startup"],"mappings":"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","file":"/app.js","sourcesContent":["import { Mongo } from 'meteor/mongo';\n\n\nexport const ShiftAllocation = new Mongo.Collection('shiftAllocation');\n","import { Mongo } from 'meteor/mongo';\n\nexport const ShiftSetting = new Mongo.Collection('shiftSetting');\n\nif(Meteor.isServer){\n\tMeteor.publish(\"shiftData\",function(empid){\n\t\tvar shiftprof = ShiftSetting.find({\"_id\":empid});\n\t\treturn shiftprof;\n\t});\n\n\tMeteor.publish(\"allShiftData\",function(){\n\t\tvar allShift = ShiftSetting.find({});\n\t\tconsole.log(\"allShift\",allShift);\n\t\treturn allShift;\n\t});\n}\n\nMeteor.methods({\n\t\"insertBasicInfo\" : function(formValues){\n\t\tconsole.log(formValues);\n\n\t\tvar emp_id = ShiftSetting.insert({\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\"shiftName\" \t\t: formValues.shiftName,\t        \n\t\t\t\t\t\t\t        \"startTime\" \t\t: formValues.startTime,\t        \n\t\t\t\t\t\t\t        \"startTimeAmPm\" \t: formValues.startTimeAmPm,\t        \n\t\t\t\t\t\t\t        \"endTime\" \t\t\t: formValues.endTime,\t        \n\t\t\t\t\t\t\t        \"endTimeAmPm\" \t\t: formValues.endTimeAmPm,\t        \n\t\t\t\t\t\t\t        \"effectiveFrom\" \t: formValues.effectiveFrom,\t   \n\t\t\t\t\t\t\t        \"tillDate\" \t\t\t: formValues.tillDate,\t\t\t\t\t\n\t\t\t\t\t\t\t\t}, \n\t\t\t\t\t\t\t\t(error,result)=>{\n\t\t\t\t\t\t\t\t\tif(error){\n\t\t\t\t\t\t\t\t\t\tconsole.log(error);\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t\t\tconsole.log(result);\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t);\n\n\t\treturn emp_id;\n\t},\t\n\n\t\"updateBasicInfo\" : function(formValues){\n\t\tconsole.log(formValues);\n\n\t\tvar emp_id = ShiftSetting.update(\n\t\t\t\t\t\t\t\t{\"_id\": formValues._id},\n\t\t\t\t\t\t\t\t{$set : {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"shiftName\" \t\t: formValues.shiftName,\t        \n\t\t\t\t\t\t\t\t\t\t\t        \"startTime\" \t\t: formValues.startTime,\t        \n\t\t\t\t\t\t\t\t\t\t\t        \"startTimeAmPm\" \t: formValues.startTimeAmPm,\t        \n\t\t\t\t\t\t\t\t\t\t\t        \"endTime\" \t\t\t: formValues.endTime,\t        \n\t\t\t\t\t\t\t\t\t\t\t        \"endTimeAmPm\" \t\t: formValues.endTimeAmPm,\t        \n\t\t\t\t\t\t\t\t\t\t\t        \"effectiveFrom\" \t: formValues.effectiveFrom,\t   \n\t\t\t\t\t\t\t\t\t\t\t        \"tillDate\" \t\t\t: formValues.tillDate,\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t(error,result)=>{\n\t\t\t\t\t\t\t\t\tif(error){\n\t\t\t\t\t\t\t\t\t\tconsole.log(error);\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t\t\tconsole.log(result);\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t);\n\n\t\treturn emp_id;\n\t},\n\n\t\"deleteAllotedShift\" : function(empid){\n\t\tShiftSetting.remove({\"_id\":empid}, (error,result)=>{\n\t\t\t\tif(error){\n\t\t\t\t\treturn error;\n\t\t\t\t\tconsole.log(error);\n\t\t\t\t}else{\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t});\n\n\t\treturn;\n\t}\n\n});","import { Meteor } from 'meteor/meteor';\n// import \"/imports/shiftMgmt/shiftRoster/shiftAllotment/api/empMaster.js\";\nimport \"/imports/shiftMgmt/shiftRoster/shiftAllotment/api/shiftAllocation.js\";\nimport \"/imports/shiftMgmt/shiftRoster/shiftDefine/api/shiftSetting.js\";\n\n\n/*import Links from '/imports/api/links';\n\nfunction insertLink(title, url) {\n  Links.insert({ title, url, createdAt: new Date() });\n}*/\n\nMeteor.startup(() => {\n  // If the Links collection is empty, add some data.\n/*  if (Links.find().count() === 0) {\n    insertLink(\n      'Do the Tutorial',\n      'https://www.meteor.com/tutorials/react/creating-an-app'\n    );\n\n    insertLink(\n      'Follow the Guide',\n      'http://guide.meteor.com'\n    );\n\n    insertLink(\n      'Read the Docs',\n      'https://docs.meteor.com'\n    );\n\n    insertLink(\n      'Discussions',\n      'https://forums.meteor.com'\n    );\n  }*/\n});\n"]}}]